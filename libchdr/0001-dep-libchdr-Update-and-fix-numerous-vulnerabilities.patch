From 48f3985b57bbfe4ec856fe386d283717c93ae83f Mon Sep 17 00:00:00 2001
From: Stenzek <stenzek@gmail.com>
Date: Fri, 25 Oct 2024 20:23:10 +1000
Subject: [PATCH] dep/libchdr: Update and fix numerous vulnerabilities

---
 include/libchdr/cdrom.h   |   8 +-
 include/libchdr/chd.h     |  11 +-
 include/libchdr/huffman.h |   2 +-
 src/libchdr_cdrom.c       |   8 +-
 src/libchdr_chd.c         | 215 +++++++++++++++++++++++++++-----------
 src/libchdr_huffman.c     |  32 ++++--
 6 files changed, 199 insertions(+), 77 deletions(-)

diff --git a/include/libchdr/cdrom.h b/include/libchdr/cdrom.h
index 715a19c..dd18e6f 100644
--- a/include/libchdr/cdrom.h
+++ b/include/libchdr/cdrom.h
@@ -10,12 +10,13 @@
 
 #pragma once
 
+#ifndef __CDROM_H__
+#define __CDROM_H__
 #ifdef __cplusplus
 extern "C" {
 #endif
 
 #include <stdint.h>
-#include <stdbool.h>
 #include <libchdr/chdconfig.h>
 
 /***************************************************************************
@@ -55,7 +56,7 @@ enum
 };
 
 const char* cdrom_get_subtype_string(uint32_t subtype);
-bool cdrom_parse_subtype_string(const char* typestring, uint32_t* subtype, uint32_t* subsize);
+int cdrom_parse_subtype_string(const char* typestring, uint32_t* subtype, uint32_t* subsize);
 
 
 #define CD_FLAG_GDROM   0x00000001  /* disc is a GD-ROM, all tracks should be stored with GD-ROM metadata */
@@ -117,4 +118,5 @@ static inline uint32_t lba_to_msf_alt(int lba)
 
 #ifdef __cplusplus
 } // extern "C"
-#endif
\ No newline at end of file
+#endif
+#endif  /* __CDROM_H__ */
diff --git a/include/libchdr/chd.h b/include/libchdr/chd.h
index 1c92d22..a55f380 100644
--- a/include/libchdr/chd.h
+++ b/include/libchdr/chd.h
@@ -48,7 +48,6 @@ extern "C" {
 
 #include <libchdr/coretypes.h>
 #include <libchdr/chdconfig.h>
-#include <stdbool.h>
 
 /***************************************************************************
 
@@ -384,7 +383,7 @@ CHD_EXPORT chd_error chd_open(const char *filename, int mode, chd_file *parent,
 
 /* precache underlying file */
 CHD_EXPORT chd_error chd_precache(chd_file *chd);
-CHD_EXPORT chd_error chd_precache_progress(chd_file* chd, bool(*progress)(size_t pos, size_t total, void* param), void* param);
+CHD_EXPORT chd_error chd_precache_progress(chd_file* chd, void(*progress)(size_t pos, size_t total, void* param), void* param);
 
 /* close a CHD file */
 CHD_EXPORT void chd_close(chd_file *chd);
@@ -406,9 +405,15 @@ CHD_EXPORT const chd_header *chd_get_header(chd_file *chd);
 
 /* read CHD header data from file into the pointed struct */
 CHD_EXPORT chd_error chd_read_header_core_file(core_file *file, chd_header *header);
+
+/* reads CHD header from the C file into the pointed struct */
 CHD_EXPORT chd_error chd_read_header_file(FILE *file, chd_header *header);
+
+/* reads CHD header from the specified filename into the pointed struct */
 CHD_EXPORT chd_error chd_read_header(const char *filename, chd_header *header);
-CHD_EXPORT bool chd_is_matching_parent(const chd_header* header, const chd_header* parent_header);
+
+/* returns non-zero if the second header is a valid parent header for the first header */
+CHD_EXPORT int chd_is_matching_parent(const chd_header* header, const chd_header* parent_header);
 
 
 
diff --git a/include/libchdr/huffman.h b/include/libchdr/huffman.h
index 6c9f511..d771c29 100644
--- a/include/libchdr/huffman.h
+++ b/include/libchdr/huffman.h
@@ -85,6 +85,6 @@ int huffman_build_tree(struct huffman_decoder* decoder, uint32_t totaldata, uint
 enum huffman_error huffman_assign_canonical_codes(struct huffman_decoder* decoder);
 enum huffman_error huffman_compute_tree_from_histo(struct huffman_decoder* decoder);
 
-void huffman_build_lookup_table(struct huffman_decoder* decoder);
+enum huffman_error huffman_build_lookup_table(struct huffman_decoder* decoder);
 
 #endif
diff --git a/src/libchdr_cdrom.c b/src/libchdr_cdrom.c
index d34f88e..7acd539 100644
--- a/src/libchdr_cdrom.c
+++ b/src/libchdr_cdrom.c
@@ -30,23 +30,23 @@ const char* cdrom_get_subtype_string(uint32_t subtype)
 	}
 }
 
-bool cdrom_parse_subtype_string(const char* typestring, uint32_t* subtype, uint32_t* subsize)
+int cdrom_parse_subtype_string(const char* typestring, uint32_t* subtype, uint32_t* subsize)
 {
 	// https://github.com/mamedev/mame/blob/d2d54fb8ed53a2e86d308067da8414f85b5929b0/src/lib/util/cdrom.cpp#L767
   if (!strcmp(typestring, "RW"))
   {
     *subtype = CD_SUB_RAW;
     *subsize = 96;
-		return true;
+		return 1;
   }
   else if (!strcmp(typestring, "RW_RAW"))
   {
     *subtype = CD_SUB_RAW_INTERLEAVED;
     *subsize = 96;
-		return true;
+		return 1;
   }
 
-	return false;
+	return 0;
 }
 
 #ifdef WANT_RAW_DATA_SECTOR
diff --git a/src/libchdr_chd.c b/src/libchdr_chd.c
index 6fef627..08a3197 100644
--- a/src/libchdr_chd.c
+++ b/src/libchdr_chd.c
@@ -41,8 +41,8 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <time.h>
 #include <limits.h>
+#include <time.h>
 
 #include <libchdr/chd.h>
 #include <libchdr/cdrom.h>
@@ -299,6 +299,7 @@ struct _chd_file
 	uint32_t					cookie;			/* cookie, should equal COOKIE_VALUE */
 
 	core_file *				file;			/* handle to the open core file */
+	uint64_t				file_size;		/* size of the core file */
 	chd_header				header;			/* header, extracted from file */
 
 	chd_file *				parent;			/* pointer to parent file, or NULL */
@@ -713,22 +714,37 @@ static chd_error cdlz_codec_decompress(void *codec, const uint8_t *src, uint32_t
 {
 	uint32_t framenum;
 	cdlz_codec_data* cdlz = (cdlz_codec_data*)codec;
+	chd_error decomp_err;
 
 	/* determine header bytes */
-	uint32_t frames = destlen / CD_FRAME_SIZE;
-	uint32_t complen_bytes = (destlen < 65536) ? 2 : 3;
-	uint32_t ecc_bytes = (frames + 7) / 8;
-	uint32_t header_bytes = ecc_bytes + complen_bytes;
+	const uint32_t frames = destlen / CD_FRAME_SIZE;
+	const uint32_t complen_bytes = (destlen < 65536) ? 2 : 3;
+	const uint32_t ecc_bytes = (frames + 7) / 8;
+	const uint32_t header_bytes = ecc_bytes + complen_bytes;
+
+	/* input may be truncated, double-check. both bytes, plus at least one input byte, or the third */
+	if ((ecc_bytes + 2) > complen)
+		return CHDERR_DECOMPRESSION_ERROR;
 
 	/* extract compressed length of base */
 	uint32_t complen_base = (src[ecc_bytes + 0] << 8) | src[ecc_bytes + 1];
 	if (complen_bytes > 2)
+	{
 		complen_base = (complen_base << 8) | src[ecc_bytes + 2];
+		if ((ecc_bytes + 3) > complen)
+			return CHDERR_DECOMPRESSION_ERROR;
+	}
+	if ((header_bytes + complen_base) > complen)
+		return CHDERR_DECOMPRESSION_ERROR;
 
 	/* reset and decode */
-	lzma_codec_decompress(&cdlz->base_decompressor, &src[header_bytes], complen_base, &cdlz->buffer[0], frames * CD_MAX_SECTOR_DATA);
+	decomp_err = lzma_codec_decompress(&cdlz->base_decompressor, &src[header_bytes], complen_base, &cdlz->buffer[0], frames * CD_MAX_SECTOR_DATA);
+	if (decomp_err != CHDERR_NONE)
+		return decomp_err;
 #ifdef WANT_SUBCODE
-	zlib_codec_decompress(&cdlz->subcode_decompressor, &src[header_bytes + complen_base], complen - complen_base - header_bytes, &cdlz->buffer[frames * CD_MAX_SECTOR_DATA], frames * CD_MAX_SUBCODE_DATA);
+	decomp_err = zlib_codec_decompress(&cdlz->subcode_decompressor, &src[header_bytes + complen_base], complen - complen_base - header_bytes, &cdlz->buffer[frames * CD_MAX_SECTOR_DATA], frames * CD_MAX_SUBCODE_DATA);
+	if (decomp_err != CHDERR_NONE)
+		return decomp_err;
 #endif
 
 	/* reassemble the data */
@@ -796,22 +812,37 @@ static chd_error cdzl_codec_decompress(void *codec, const uint8_t *src, uint32_t
 {
 	uint32_t framenum;
 	cdzl_codec_data* cdzl = (cdzl_codec_data*)codec;
+	chd_error decomp_err;
 
 	/* determine header bytes */
-	uint32_t frames = destlen / CD_FRAME_SIZE;
-	uint32_t complen_bytes = (destlen < 65536) ? 2 : 3;
-	uint32_t ecc_bytes = (frames + 7) / 8;
-	uint32_t header_bytes = ecc_bytes + complen_bytes;
+	const uint32_t frames = destlen / CD_FRAME_SIZE;
+	const uint32_t complen_bytes = (destlen < 65536) ? 2 : 3;
+	const uint32_t ecc_bytes = (frames + 7) / 8;
+	const uint32_t header_bytes = ecc_bytes + complen_bytes;
+
+	/* input may be truncated, double-check. both bytes, plus at least one input byte, or the third */
+	if ((ecc_bytes + 2) > complen)
+		return CHDERR_DECOMPRESSION_ERROR;
 
 	/* extract compressed length of base */
 	uint32_t complen_base = (src[ecc_bytes + 0] << 8) | src[ecc_bytes + 1];
 	if (complen_bytes > 2)
+	{
 		complen_base = (complen_base << 8) | src[ecc_bytes + 2];
+		if ((ecc_bytes + 3) > complen)
+			return CHDERR_DECOMPRESSION_ERROR;
+	}
+	if ((header_bytes + complen_base) > complen)
+		return CHDERR_DECOMPRESSION_ERROR;
 
 	/* reset and decode */
-	zlib_codec_decompress(&cdzl->base_decompressor, &src[header_bytes], complen_base, &cdzl->buffer[0], frames * CD_MAX_SECTOR_DATA);
+	decomp_err = zlib_codec_decompress(&cdzl->base_decompressor, &src[header_bytes], complen_base, &cdzl->buffer[0], frames * CD_MAX_SECTOR_DATA);
+	if (decomp_err != CHDERR_NONE)
+		return decomp_err;
 #ifdef WANT_SUBCODE
-	zlib_codec_decompress(&cdzl->subcode_decompressor, &src[header_bytes + complen_base], complen - complen_base - header_bytes, &cdzl->buffer[frames * CD_MAX_SECTOR_DATA], frames * CD_MAX_SUBCODE_DATA);
+	decomp_err = zlib_codec_decompress(&cdzl->subcode_decompressor, &src[header_bytes + complen_base], complen - complen_base - header_bytes, &cdzl->buffer[frames * CD_MAX_SECTOR_DATA], frames * CD_MAX_SUBCODE_DATA);
+	if (decomp_err != CHDERR_NONE)
+		return decomp_err;
 #endif
 
 	/* reassemble the data */
@@ -1156,22 +1187,37 @@ static chd_error cdzs_codec_decompress(void *codec, const uint8_t *src, uint32_t
 {
 	uint32_t framenum;
 	cdzs_codec_data* cdzs = (cdzs_codec_data*)codec;
+	chd_error decomp_err;
 
 	/* determine header bytes */
-	uint32_t frames = destlen / CD_FRAME_SIZE;
-	uint32_t complen_bytes = (destlen < 65536) ? 2 : 3;
-	uint32_t ecc_bytes = (frames + 7) / 8;
-	uint32_t header_bytes = ecc_bytes + complen_bytes;
+	const uint32_t frames = destlen / CD_FRAME_SIZE;
+	const uint32_t complen_bytes = (destlen < 65536) ? 2 : 3;
+	const uint32_t ecc_bytes = (frames + 7) / 8;
+	const uint32_t header_bytes = ecc_bytes + complen_bytes;
+
+	/* input may be truncated, double-check. both bytes, plus at least one input byte, or the third */
+	if ((ecc_bytes + 2) > complen)
+		return CHDERR_DECOMPRESSION_ERROR;
 
 	/* extract compressed length of base */
 	uint32_t complen_base = (src[ecc_bytes + 0] << 8) | src[ecc_bytes + 1];
 	if (complen_bytes > 2)
+	{
 		complen_base = (complen_base << 8) | src[ecc_bytes + 2];
+		if ((ecc_bytes + 3) > complen)
+			return CHDERR_DECOMPRESSION_ERROR;
+	}
+	if ((header_bytes + complen_base) > complen)
+		return CHDERR_DECOMPRESSION_ERROR;
 
 	/* reset and decode */
-	zstd_codec_decompress(&cdzs->base_decompressor, &src[header_bytes], complen_base, &cdzs->buffer[0], frames * CD_MAX_SECTOR_DATA);
+	decomp_err = zstd_codec_decompress(&cdzs->base_decompressor, &src[header_bytes], complen_base, &cdzs->buffer[0], frames * CD_MAX_SECTOR_DATA);
+	if (decomp_err != CHDERR_NONE)
+		return decomp_err;
 #ifdef WANT_SUBCODE
-	zstd_codec_decompress(&cdzs->subcode_decompressor, &src[header_bytes + complen_base], complen - complen_base - header_bytes, &cdzs->buffer[frames * CD_MAX_SECTOR_DATA], frames * CD_MAX_SUBCODE_DATA);
+	decomp_err = zstd_codec_decompress(&cdzs->subcode_decompressor, &src[header_bytes + complen_base], complen - complen_base - header_bytes, &cdzs->buffer[frames * CD_MAX_SECTOR_DATA], frames * CD_MAX_SUBCODE_DATA);
+	if (decomp_err != CHDERR_NONE)
+		return decomp_err;
 #endif
 
 	/* reassemble the data */
@@ -1492,6 +1538,11 @@ static inline void map_assemble(uint8_t *base, map_entry *entry)
 -------------------------------------------------*/
 static inline int map_size_v5(chd_header* header)
 {
+	// Avoid overflow due to corrupted data.
+	const uint32_t max_hunkcount = (UINT32_MAX / header->mapentrybytes);
+	if (header->hunkcount > max_hunkcount)
+		return -1;
+
 	return header->hunkcount * header->mapentrybytes;
 }
 
@@ -1576,11 +1627,16 @@ static chd_error decompress_v5_map(chd_file* chd, chd_header* header)
 	uint8_t rawbuf[16];
 	struct huffman_decoder* decoder;
 	enum huffman_error err;
-	uint64_t curoffset;	
+	uint64_t curoffset;
 	int rawmapsize = map_size_v5(header);
+	if (rawmapsize < 0)
+		return CHDERR_INVALID_FILE;
 
 	if (!chd_compressed(header))
 	{
+		if ((header->mapoffset + rawmapsize) >= chd->file_size || (header->mapoffset + rawmapsize) < header->mapoffset)
+			return CHDERR_INVALID_FILE;
+
 		header->rawmap = (uint8_t*)malloc(rawmapsize);
 		if (header->rawmap == NULL)
 			return CHDERR_OUT_OF_MEMORY;
@@ -1600,6 +1656,8 @@ static chd_error decompress_v5_map(chd_file* chd, chd_header* header)
 	parentbits = rawbuf[14];
 
 	/* now read the map */
+	if ((header->mapoffset + mapbytes) < header->mapoffset || (header->mapoffset + mapbytes) >= chd->file_size)
+		return CHDERR_INVALID_FILE;
 	compressed_ptr = (uint8_t*)malloc(sizeof(uint8_t) * mapbytes);
 	if (compressed_ptr == NULL)
 		return CHDERR_OUT_OF_MEMORY;
@@ -1639,7 +1697,16 @@ static chd_error decompress_v5_map(chd_file* chd, chd_header* header)
 			rawmap[0] = lastcomp, repcount--;
 		else
 		{
-			uint8_t val = huffman_decode_one(decoder, bitbuf);
+			uint8_t val;
+			if (bitstream_overflow(bitbuf))
+			{
+				free(compressed_ptr);
+				free(bitbuf);
+				delete_huffman_decoder(decoder);
+				return CHDERR_DECOMPRESSION_ERROR;
+			}
+
+			val = huffman_decode_one(decoder, bitbuf);
 			if (val == COMPRESSION_RLE_SMALL)
 				rawmap[0] = lastcomp, repcount = 2 + huffman_decode_one(decoder, bitbuf);
 			else if (val == COMPRESSION_RLE_LARGE)
@@ -1751,6 +1818,7 @@ static inline void map_extract_old(const uint8_t *base, map_entry *entry, uint32
 -------------------------------------------------*/
 
 CHD_EXPORT chd_error chd_open_file(FILE *file, int mode, chd_file *parent, chd_file **chd) {
+	chd_error err;
 	core_file *stream = malloc(sizeof(core_file));
 	if (!stream)
 		return CHDERR_OUT_OF_MEMORY;
@@ -1760,12 +1828,14 @@ CHD_EXPORT chd_error chd_open_file(FILE *file, int mode, chd_file *parent, chd_f
 	stream->fclose = core_stdio_fclose_nonowner;
 	stream->fseek = core_stdio_fseek;
 
-	chd_error err = chd_open_core_file(stream, mode, parent, chd);
+	err = chd_open_core_file(stream, mode, parent, chd);
 	if (err != CHDERR_NONE)
 		return err;
 
 	// swap out the fclose so that we close it on chd clost
-	stream->fclose = core_stdio_fclose;
+	if (mode & CHD_OPEN_TRANSFER_FILE)
+		stream->fclose = core_stdio_fclose;
+
 	return CHDERR_NONE;
 }
 
@@ -1795,6 +1865,9 @@ CHD_EXPORT chd_error chd_open_core_file(core_file *file, int mode, chd_file *par
 	newchd->cookie = COOKIE_VALUE;
 	newchd->parent = parent;
 	newchd->file = file;
+	newchd->file_size = core_fsize(file);
+	if ((int64_t)newchd->file_size <= 0)
+		EARLY_EXIT(err = CHDERR_INVALID_FILE);
 
 	/* now attempt to read the header */
 	err = header_read(newchd, &newchd->header);
@@ -1899,11 +1972,18 @@ CHD_EXPORT chd_error chd_open_core_file(core_file *file, int mode, chd_file *par
 		/* verify the compression types and initialize the codecs */
 		for (decompnum = 0; decompnum < ARRAY_LENGTH(newchd->header.compression); decompnum++)
 		{
-			int i;
+			int i, j;
 			for (i = 0 ; i < ARRAY_LENGTH(codec_interfaces) ; i++)
 			{
 				if (codec_interfaces[i].compression == newchd->header.compression[decompnum])
 				{
+					/* ensure we don't try to initialize the same codec twice */
+					for (j = 0; j < i; j++)
+					{
+						if (newchd->codecintf[j] == &codec_interfaces[i])
+							EARLY_EXIT(err = CHDERR_UNSUPPORTED_FORMAT);
+					}
+
 					newchd->codecintf[decompnum] = &codec_interfaces[i];
 					break;
 				}
@@ -1985,32 +2065,32 @@ CHD_EXPORT chd_error chd_precache(chd_file* chd)
   return chd_precache_progress(chd, NULL, NULL);
 }
 
-CHD_EXPORT chd_error chd_precache_progress(chd_file* chd, bool(*progress)(size_t pos, size_t total, void* param), void* param)
+CHD_EXPORT chd_error chd_precache_progress(chd_file* chd, void(*progress)(size_t pos, size_t total, void* param), void* param)
 {
 #define PRECACHE_CHUNK_SIZE 16 * 1024 * 1024
 
-  if (chd->file_cache == NULL)
-  {
-    const uint64_t size = core_fsize(chd->file);
-    if ((int64_t)size <= 0)
-      return CHDERR_INVALID_DATA;
+	size_t count;
+	uint64_t done, req_count, last_update_done, update_interval;
 
-		if (size > SIZE_MAX)
+	if (chd->file_cache == NULL)
+	{
+		chd->file_cache = malloc(chd->file_size);
+		if (chd->file_cache == NULL)
 			return CHDERR_OUT_OF_MEMORY;
+		if (core_fseek(chd->file, 0, SEEK_SET) != 0)
+			return CHDERR_READ_ERROR;
 
-    chd->file_cache = malloc(size);
-    if (chd->file_cache == NULL)
-      return CHDERR_OUT_OF_MEMORY;
-    core_fseek(chd->file, 0, SEEK_SET);
+		done = 0;
+		last_update_done = 0;
+		update_interval = ((chd->file_size + 99) / 100);
 
-		uint64_t done = 0;
-		while (done < size)
+		while (done < chd->file_size)
 		{
-			uint64_t req_count = size - done;
+			req_count = chd->file_size - done;
 			if (req_count > PRECACHE_CHUNK_SIZE)
 				req_count = PRECACHE_CHUNK_SIZE;
 
-			size_t count = core_fread(chd->file, chd->file_cache + (size_t)done, (size_t)req_count);
+			count = core_fread(chd->file, chd->file_cache + (size_t)done, (size_t)req_count);
 			if (count != (size_t)req_count)
 			{
 				free(chd->file_cache);
@@ -2019,19 +2099,16 @@ CHD_EXPORT chd_error chd_precache_progress(chd_file* chd, bool(*progress)(size_t
 			}
 
 			done += req_count;
-			if (progress != NULL)
+			if (progress != NULL && (done - last_update_done) >= update_interval && done != chd->file_size)
 			{
-				if (!progress(done, size, param))
-				{
-					free(chd->file_cache);
-					chd->file_cache = NULL;
-					return CHDERR_CANCELLED;
-				}
+				last_update_done = done;
+				progress(done, chd->file_size, param);
 			}
 		}
-  }
+	}
 
-  return CHDERR_NONE;
+#undef PRECACHE_CHUNK_SIZE
+	return CHDERR_NONE;
 }
 
 /*-------------------------------------------------
@@ -2272,10 +2349,11 @@ CHD_EXPORT const chd_header *chd_get_header(chd_file *chd)
 CHD_EXPORT chd_error chd_read_header_core_file(core_file* file, chd_header* header)
 {
 	chd_file chd;
+	chd_error err;
 	chd.file = file;
 
 	/* attempt to read the header */
-	const chd_error err = header_read(&chd, header);
+	err = header_read(&chd, header);
 	if (err != CHDERR_NONE)
 		return err;
 
@@ -2297,27 +2375,28 @@ CHD_EXPORT chd_error chd_read_header_file(FILE *file, chd_header *header)
 
 CHD_EXPORT chd_error chd_read_header(const char *filename, chd_header *header)
 {
+	core_file *file;
+	chd_error err;
 	if (filename == NULL)
 		return CHDERR_INVALID_PARAMETER;
 
-	core_file* file = core_stdio_fopen(filename);
+	file = core_stdio_fopen(filename);
 	if (file == NULL)
 		return CHDERR_FILE_NOT_FOUND;
 
-	chd_error err = chd_read_header_core_file(file, header);
-	
+	err = chd_read_header_core_file(file, header);
 	core_fclose(file);
 	return err;
 }
 
-CHD_EXPORT bool chd_is_matching_parent(const chd_header* header, const chd_header* parent_header)
+CHD_EXPORT int chd_is_matching_parent(const chd_header* header, const chd_header* parent_header)
 {
   /* check MD5 if it isn't empty */
   if (memcmp(nullmd5, header->parentmd5, sizeof(header->parentmd5)) != 0 &&
       memcmp(nullmd5, parent_header->md5, sizeof(parent_header->md5)) != 0 &&
       memcmp(parent_header->md5, header->parentmd5, sizeof(header->parentmd5)) != 0)
 	{
-		return false;
+		return 0;
 	}
 
   /* check SHA1 if it isn't empty */
@@ -2325,10 +2404,10 @@ CHD_EXPORT bool chd_is_matching_parent(const chd_header* header, const chd_heade
       memcmp(nullsha1, parent_header->sha1, sizeof(parent_header->sha1)) != 0 &&
       memcmp(parent_header->sha1, header->parentsha1, sizeof(header->parentsha1)) != 0)
 	{
-		return false;
+		return 0;
 	}
 
-	return true;
+	return 1;
 }
 
 /***************************************************************************
@@ -2380,7 +2459,7 @@ CHD_EXPORT chd_error chd_get_metadata(chd_file *chd, uint32_t searchtag, uint32_
 			uint32_t faux_length;
 
 			/* fill in the faux metadata */
-			sprintf(faux_metadata, HARD_DISK_METADATA_FORMAT, chd->header.obsolete_cylinders, chd->header.obsolete_heads, chd->header.obsolete_sectors, chd->header.hunkbytes / chd->header.obsolete_hunksize);
+			sprintf(faux_metadata, HARD_DISK_METADATA_FORMAT, chd->header.obsolete_cylinders, chd->header.obsolete_heads, chd->header.obsolete_sectors, (chd->header.obsolete_hunksize != 0) ? (chd->header.hunkbytes / chd->header.obsolete_hunksize) : 0);
 			faux_length = (uint32_t)strlen(faux_metadata) + 1;
 
 			/* copy the metadata itself */
@@ -2502,6 +2581,14 @@ static chd_error header_validate(const chd_header *header)
 			return CHDERR_INVALID_PARAMETER;
 	}
 
+	/* some basic size checks to prevent huge mallocs: hunk size probably shouldn't be more than 128MB */
+	if (header->hunkbytes >= (128 * 1024 * 1024))
+		return CHDERR_INVALID_PARAMETER;
+
+	/* - we're currently only using this for CD/DVDs, if we end up with more than 10GB data, it's probably invalid */
+	if (((uint64_t)header->hunkbytes * (uint64_t)header->totalhunks) >= (10ULL * 1024 * 1024 * 1024))
+		return CHDERR_INVALID_PARAMETER;
+
 	return CHDERR_NONE;
 }
 
@@ -2695,10 +2782,17 @@ static uint8_t* hunk_read_compressed(chd_file *chd, uint64_t offset, size_t size
 #endif
 	if (chd->file_cache != NULL)
 	{
-		return chd->file_cache + offset;
+		if ((offset + size) > chd->file_size || (offset + size) < offset)
+			return NULL;
+		else
+			return chd->file_cache + offset;
 	}
 	else
 	{
+		/* make sure it isn't larger than the compressed buffer */
+		if (size > chd->header.hunkbytes)
+			return NULL;
+
 		core_fseek(chd->file, offset, SEEK_SET);
 		bytes = core_fread(chd->file, chd->compressed, size);
 		if (bytes != size)
@@ -2721,6 +2815,9 @@ static chd_error hunk_read_uncompressed(chd_file *chd, uint64_t offset, size_t s
 #endif
 	if (chd->file_cache != NULL)
 	{
+		if ((offset + size) > chd->file_size || (offset + size) < offset)
+			return CHDERR_READ_ERROR;
+
 		memcpy(dest, chd->file_cache + offset, size);
 	}
 	else
@@ -3063,7 +3160,7 @@ static chd_error map_read(chd_file *chd)
 	}
 
 	/* verify the length */
-	if (maxoffset > core_fsize(chd->file))
+	if (maxoffset > chd->file_size)
 	{
 		err = CHDERR_INVALID_FILE;
 		goto cleanup;
diff --git a/src/libchdr_huffman.c b/src/libchdr_huffman.c
index 556aa34..2332104 100644
--- a/src/libchdr_huffman.c
+++ b/src/libchdr_huffman.c
@@ -230,7 +230,9 @@ enum huffman_error huffman_import_tree_rle(struct huffman_decoder* decoder, stru
 		return error;
 
 	/* build the lookup table */
-	huffman_build_lookup_table(decoder);
+	error = huffman_build_lookup_table(decoder);
+	if (error != HUFFERR_NONE)
+		return error;
 
 	/* determine final input length and report errors */
 	return bitstream_overflow(bitbuf) ? HUFFERR_INPUT_BUFFER_TOO_SMALL : HUFFERR_NONE;
@@ -271,8 +273,16 @@ enum huffman_error huffman_import_tree_huffman(struct huffman_decoder* decoder,
 	/* then regenerate the tree */
 	error = huffman_assign_canonical_codes(smallhuff);
 	if (error != HUFFERR_NONE)
+	{
+		delete_huffman_decoder(smallhuff);
+		return error;
+	}
+	error = huffman_build_lookup_table(smallhuff);
+	if (error != HUFFERR_NONE)
+	{
+		delete_huffman_decoder(smallhuff);
 		return error;
-	huffman_build_lookup_table(smallhuff);
+	}
 
 	/* determine the maximum length of an RLE count */
 	temp = decoder->numcodes - 9;
@@ -308,7 +318,9 @@ enum huffman_error huffman_import_tree_huffman(struct huffman_decoder* decoder,
 		return error;
 
 	/* build the lookup table */
-	huffman_build_lookup_table(decoder);
+	error = huffman_build_lookup_table(decoder);
+	if (error != HUFFERR_NONE)
+		return error;
 
 	/* determine final input length and report errors */
 	return bitstream_overflow(bitbuf) ? HUFFERR_INPUT_BUFFER_TOO_SMALL : HUFFERR_NONE;
@@ -523,8 +535,9 @@ enum huffman_error huffman_assign_canonical_codes(struct huffman_decoder* decode
  *-------------------------------------------------
  */
 
-void huffman_build_lookup_table(struct huffman_decoder* decoder)
+enum huffman_error huffman_build_lookup_table(struct huffman_decoder* decoder)
 {
+	const lookup_value* lookupend = &decoder->lookup[(1u << decoder->maxbits)];
 	uint32_t curcode;
 	/* iterate over all codes */
 	for (curcode = 0; curcode < decoder->numcodes; curcode++)
@@ -533,9 +546,10 @@ void huffman_build_lookup_table(struct huffman_decoder* decoder)
 		struct node_t* node = &decoder->huffnode[curcode];
 		if (node->numbits > 0)
 		{
-         int shift;
-         lookup_value *dest;
-         lookup_value *destend;
+			int shift;
+			lookup_value *dest;
+			lookup_value *destend;
+
 			/* set up the entry */
 			lookup_value value = MAKE_LOOKUP(curcode, node->numbits);
 
@@ -543,8 +557,12 @@ void huffman_build_lookup_table(struct huffman_decoder* decoder)
 			shift = decoder->maxbits - node->numbits;
 			dest = &decoder->lookup[node->bits << shift];
 			destend = &decoder->lookup[((node->bits + 1) << shift) - 1];
+			if (dest >= lookupend || destend >= lookupend || destend < dest)
+				return HUFFERR_INTERNAL_INCONSISTENCY;
 			while (dest <= destend)
 				*dest++ = value;
 		}
 	}
+
+	return HUFFERR_NONE;
 }
-- 
2.47.0

