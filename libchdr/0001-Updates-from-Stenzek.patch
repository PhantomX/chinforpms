From fd5cdeff7441a1c460c8824bad753df49ba38170 Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Tue, 5 Nov 2024 22:10:33 -0300
Subject: [PATCH] Updates from Stenzek

https://github.com/stenzek/duckstation/tree/master/dep/libchdr

dep/libchdr: Re-add progress precaching
dep/libchdr: Add read_header variants for user-provided
dep/libchdr: Add option to transfer file ownership
dep/libchdr: Add chd_is_matching_parent()
dep/libchdr: Add subtype parsing functions
dep/libchdr: Add chd_get_compressed_size()
3rdparty/libchdr: Allow cancelling precache
dep/libchdr: Add EDC computation functions
CDImageCHD: Show precaching in MB
dep/libchdr: Fix mismatched function pointer type
---
 include/libchdr/cdrom.h |  26 ++++++--
 include/libchdr/chd.h   |  12 ++++
 src/libchdr_cdrom.c     |  75 +++++++++++++++++++++
 src/libchdr_chd.c       | 144 ++++++++++++++++++++++++++--------------
 4 files changed, 201 insertions(+), 56 deletions(-)

diff --git a/include/libchdr/cdrom.h b/include/libchdr/cdrom.h
index 816e6a5..27321e4 100644
--- a/include/libchdr/cdrom.h
+++ b/include/libchdr/cdrom.h
@@ -12,6 +12,9 @@
 
 #ifndef __CDROM_H__
 #define __CDROM_H__
+#ifdef __cplusplus
+extern "C" {
+#endif
 
 #include <stdint.h>
 #include <libchdr/chdconfig.h>
@@ -47,11 +50,15 @@ enum
 
 enum
 {
-	CD_SUB_NORMAL = 0,          /* "cooked" 96 bytes per sector */
-	CD_SUB_RAW,                 /* raw uninterleaved 96 bytes per sector */
-	CD_SUB_NONE                 /* no subcode data stored */
+	CD_SUB_NONE = 0,            /* no subcode data stored */
+	CD_SUB_RAW_INTERLEAVED,     /* raw interleaved 96 bytes per sector */
+	CD_SUB_RAW,                 /* raw non-interleaved 96 bytes per sector */
 };
 
+const char* cdrom_get_subtype_string(uint32_t subtype);
+int cdrom_parse_subtype_string(const char* typestring, uint32_t* subtype, uint32_t* subsize);
+
+
 #define CD_FLAG_GDROM   0x00000001  /* disc is a GD-ROM, all tracks should be stored with GD-ROM metadata */
 #define CD_FLAG_GDROMLE 0x00000002  /* legacy GD-ROM, with little-endian CDDA data */
 
@@ -64,6 +71,8 @@ enum
 int ecc_verify(const uint8_t *sector);
 void ecc_generate(uint8_t *sector);
 void ecc_clear(uint8_t *sector);
+uint32_t edc_compute(const uint8_t* data, uint32_t length);
+void edc_set(uint8_t* dst, uint32_t edc);
 #endif
 
 
@@ -81,10 +90,10 @@ static inline uint32_t lba_to_msf(uint32_t lba)
 {
 	uint8_t m, s, f;
 
-	m = lba / (60 * 75);
+	m = (uint8_t)(lba / (60 * 75));
 	lba -= m * (60 * 75);
-	s = lba / 75;
-	f = lba % 75;
+	s = (uint8_t)(lba / 75);
+	f = (uint8_t)(lba % 75);
 
 	return ((m / 10) << 20) | ((m % 10) << 16) |
 			((s / 10) << 12) | ((s % 10) <<  8) |
@@ -107,4 +116,7 @@ static inline uint32_t lba_to_msf_alt(int lba)
 	return ret;
 }
 
-#endif  /* __CDROM_H__ */
+#ifdef __cplusplus
+} // extern "C"
+#endif
+#endif  /* __CDROM_H__ */
\ No newline at end of file
diff --git a/include/libchdr/chd.h b/include/libchdr/chd.h
index 82e638f..3d2fffb 100644
--- a/include/libchdr/chd.h
+++ b/include/libchdr/chd.h
@@ -258,6 +258,7 @@ extern "C" {
 /* CHD open values */
 #define CHD_OPEN_READ				1
 #define CHD_OPEN_READWRITE			2
+#define CHD_OPEN_TRANSFER_FILE			4 /* Freeing of the FILE* is now libchdr's responsibility if open was successful */
 
 /* error types */
 enum _chd_error
@@ -381,6 +382,7 @@ CHD_EXPORT chd_error chd_open(const char *filename, int mode, chd_file *parent,
 
 /* precache underlying file */
 CHD_EXPORT chd_error chd_precache(chd_file *chd);
+CHD_EXPORT chd_error chd_precache_progress(chd_file* chd, void(*progress)(size_t pos, size_t total, void* param), void* param);
 
 /* close a CHD file */
 CHD_EXPORT void chd_close(chd_file *chd);
@@ -388,6 +390,9 @@ CHD_EXPORT void chd_close(chd_file *chd);
 /* return the associated core_file */
 CHD_EXPORT core_file *chd_core_file(chd_file *chd);
 
+/* return the overall size of a CHD, and any of its parents */
+CHD_EXPORT uint64_t chd_get_compressed_size(chd_file* chd);
+
 /* return an error string for the given CHD error */
 CHD_EXPORT const char *chd_error_string(chd_error err);
 
@@ -400,9 +405,16 @@ CHD_EXPORT const chd_header *chd_get_header(chd_file *chd);
 
 /* read CHD header data from file into the pointed struct */
 CHD_EXPORT chd_error chd_read_header_core_file(core_file *file, chd_header *header);
+
+/* reads CHD header from the C file into the pointed struct */
 CHD_EXPORT chd_error chd_read_header_file(FILE *file, chd_header *header);
+
+/* reads CHD header from the specified filename into the pointed struct */
 CHD_EXPORT chd_error chd_read_header(const char *filename, chd_header *header);
 
+/* returns non-zero if the second header is a valid parent header for the first header */
+CHD_EXPORT int chd_is_matching_parent(const chd_header* header, const chd_header* parent_header);
+
 
 
 /* ----- core data read/write ----- */
diff --git a/src/libchdr_cdrom.c b/src/libchdr_cdrom.c
index 112ea2e..dacba66 100644
--- a/src/libchdr_cdrom.c
+++ b/src/libchdr_cdrom.c
@@ -20,6 +20,35 @@
 
 #include <libchdr/cdrom.h>
 
+const char* cdrom_get_subtype_string(uint32_t subtype)
+{
+	switch (subtype)
+	{
+	case CD_SUB_RAW:              return "RW";
+	case CD_SUB_RAW_INTERLEAVED:  return "RW_RAW";
+	default:                      return "NONE";
+	}
+}
+
+int cdrom_parse_subtype_string(const char* typestring, uint32_t* subtype, uint32_t* subsize)
+{
+	// https://github.com/mamedev/mame/blob/d2d54fb8ed53a2e86d308067da8414f85b5929b0/src/lib/util/cdrom.cpp#L767
+	if (!strcmp(typestring, "RW"))
+	{
+		*subtype = CD_SUB_RAW;
+		*subsize = 96;
+		return 1;
+	}
+	else if (!strcmp(typestring, "RW_RAW"))
+	{
+		*subtype = CD_SUB_RAW_INTERLEAVED;
+		*subsize = 96;
+		return 1;
+	}
+
+	return 0;
+}
+
 #ifdef WANT_RAW_DATA_SECTOR
 
 /***************************************************************************
@@ -412,4 +441,50 @@ void ecc_clear(uint8_t *sector)
 	memset(&sector[ECC_Q_OFFSET], 0, 2 * ECC_Q_NUM_BYTES);
 }
 
+static const uint32_t edc_table[256] = {
+	0x00000000, 0x90910101, 0x91210201, 0x01b00300, 0x92410401, 0x02d00500, 0x03600600, 0x93f10701, 0x94810801,
+	0x04100900, 0x05a00a00, 0x95310b01, 0x06c00c00, 0x96510d01, 0x97e10e01, 0x07700f00, 0x99011001, 0x09901100,
+	0x08201200, 0x98b11301, 0x0b401400, 0x9bd11501, 0x9a611601, 0x0af01700, 0x0d801800, 0x9d111901, 0x9ca11a01,
+	0x0c301b00, 0x9fc11c01, 0x0f501d00, 0x0ee01e00, 0x9e711f01, 0x82012001, 0x12902100, 0x13202200, 0x83b12301,
+	0x10402400, 0x80d12501, 0x81612601, 0x11f02700, 0x16802800, 0x86112901, 0x87a12a01, 0x17302b00, 0x84c12c01,
+	0x14502d00, 0x15e02e00, 0x85712f01, 0x1b003000, 0x8b913101, 0x8a213201, 0x1ab03300, 0x89413401, 0x19d03500,
+	0x18603600, 0x88f13701, 0x8f813801, 0x1f103900, 0x1ea03a00, 0x8e313b01, 0x1dc03c00, 0x8d513d01, 0x8ce13e01,
+	0x1c703f00, 0xb4014001, 0x24904100, 0x25204200, 0xb5b14301, 0x26404400, 0xb6d14501, 0xb7614601, 0x27f04700,
+	0x20804800, 0xb0114901, 0xb1a14a01, 0x21304b00, 0xb2c14c01, 0x22504d00, 0x23e04e00, 0xb3714f01, 0x2d005000,
+	0xbd915101, 0xbc215201, 0x2cb05300, 0xbf415401, 0x2fd05500, 0x2e605600, 0xbef15701, 0xb9815801, 0x29105900,
+	0x28a05a00, 0xb8315b01, 0x2bc05c00, 0xbb515d01, 0xbae15e01, 0x2a705f00, 0x36006000, 0xa6916101, 0xa7216201,
+	0x37b06300, 0xa4416401, 0x34d06500, 0x35606600, 0xa5f16701, 0xa2816801, 0x32106900, 0x33a06a00, 0xa3316b01,
+	0x30c06c00, 0xa0516d01, 0xa1e16e01, 0x31706f00, 0xaf017001, 0x3f907100, 0x3e207200, 0xaeb17301, 0x3d407400,
+	0xadd17501, 0xac617601, 0x3cf07700, 0x3b807800, 0xab117901, 0xaaa17a01, 0x3a307b00, 0xa9c17c01, 0x39507d00,
+	0x38e07e00, 0xa8717f01, 0xd8018001, 0x48908100, 0x49208200, 0xd9b18301, 0x4a408400, 0xdad18501, 0xdb618601,
+	0x4bf08700, 0x4c808800, 0xdc118901, 0xdda18a01, 0x4d308b00, 0xdec18c01, 0x4e508d00, 0x4fe08e00, 0xdf718f01,
+	0x41009000, 0xd1919101, 0xd0219201, 0x40b09300, 0xd3419401, 0x43d09500, 0x42609600, 0xd2f19701, 0xd5819801,
+	0x45109900, 0x44a09a00, 0xd4319b01, 0x47c09c00, 0xd7519d01, 0xd6e19e01, 0x46709f00, 0x5a00a000, 0xca91a101,
+	0xcb21a201, 0x5bb0a300, 0xc841a401, 0x58d0a500, 0x5960a600, 0xc9f1a701, 0xce81a801, 0x5e10a900, 0x5fa0aa00,
+	0xcf31ab01, 0x5cc0ac00, 0xcc51ad01, 0xcde1ae01, 0x5d70af00, 0xc301b001, 0x5390b100, 0x5220b200, 0xc2b1b301,
+	0x5140b400, 0xc1d1b501, 0xc061b601, 0x50f0b700, 0x5780b800, 0xc711b901, 0xc6a1ba01, 0x5630bb00, 0xc5c1bc01,
+	0x5550bd00, 0x54e0be00, 0xc471bf01, 0x6c00c000, 0xfc91c101, 0xfd21c201, 0x6db0c300, 0xfe41c401, 0x6ed0c500,
+	0x6f60c600, 0xfff1c701, 0xf881c801, 0x6810c900, 0x69a0ca00, 0xf931cb01, 0x6ac0cc00, 0xfa51cd01, 0xfbe1ce01,
+	0x6b70cf00, 0xf501d001, 0x6590d100, 0x6420d200, 0xf4b1d301, 0x6740d400, 0xf7d1d501, 0xf661d601, 0x66f0d700,
+	0x6180d800, 0xf111d901, 0xf0a1da01, 0x6030db00, 0xf3c1dc01, 0x6350dd00, 0x62e0de00, 0xf271df01, 0xee01e001,
+	0x7e90e100, 0x7f20e200, 0xefb1e301, 0x7c40e400, 0xecd1e501, 0xed61e601, 0x7df0e700, 0x7a80e800, 0xea11e901,
+	0xeba1ea01, 0x7b30eb00, 0xe8c1ec01, 0x7850ed00, 0x79e0ee00, 0xe971ef01, 0x7700f000, 0xe791f101, 0xe621f201,
+	0x76b0f300, 0xe541f401, 0x75d0f500, 0x7460f600, 0xe4f1f701, 0xe381f801, 0x7310f900, 0x72a0fa00, 0xe231fb01,
+	0x71c0fc00, 0xe151fd01, 0xe0e1fe01, 0x7070ff00
+};
+
+uint32_t edc_compute(const uint8_t* data, uint32_t length)
+{
+	uint32_t edc = 0;
+	for (uint32_t i = 0; i < length; i++)
+		edc = (edc >> 8) ^ edc_table[(edc ^ (*data++)) & 0xFF];
+	return edc;
+}
+
+void edc_set(uint8_t* dst, uint32_t edc)
+{
+	// store in little-endian byte order
+	memcpy(dst, &edc, sizeof(edc));
+}
+
 #endif /* WANT_RAW_DATA_SECTOR */
diff --git a/src/libchdr_chd.c b/src/libchdr_chd.c
index 83f5d2a..4f7c119 100644
--- a/src/libchdr_chd.c
+++ b/src/libchdr_chd.c
@@ -220,9 +220,9 @@ struct _zlib_codec_data
 typedef struct _lzma_allocator lzma_allocator;
 struct _lzma_allocator
 {
-	void *(*Alloc)(void *p, size_t size);
- 	void (*Free)(void *p, void *address); /* address can be 0 */
-	void (*FreeSz)(void *p, void *address, size_t size); /* address can be 0 */
+	void *(*Alloc)(ISzAllocPtr p, size_t size);
+	void (*Free)(ISzAllocPtr p, void *address); /* address can be 0 */
+	void (*FreeSz)(ISzAllocPtr p, void *address, size_t size); /* address can be 0 */
 	uint32_t*	allocptr[MAX_LZMA_ALLOCS];
 	uint32_t*	allocptr2[MAX_LZMA_ALLOCS];
 };
@@ -429,8 +429,8 @@ static chd_error cdzs_codec_decompress(void *codec, const uint8_t *src, uint32_t
  ***************************************************************************
  */
 
-static void *lzma_fast_alloc(void *p, size_t size);
-static void lzma_fast_free(void *p, void *address);
+static void *lzma_fast_alloc(ISzAllocPtr p, size_t size);
+static void lzma_fast_free(ISzAllocPtr p, void *address);
 
 /*-------------------------------------------------
  *  lzma_allocator_init
@@ -498,7 +498,7 @@ static void lzma_allocator_free_unused(lzma_allocator *codec)
 #define LZMA_MIN_ALIGNMENT_BITS 512
 #define LZMA_MIN_ALIGNMENT_BYTES (LZMA_MIN_ALIGNMENT_BITS / 8)
 
-static void *lzma_fast_alloc(void *p, size_t size)
+static void *lzma_fast_alloc(ISzAllocPtr p, size_t size)
 {
 	int scan;
 	uint32_t *addr        = NULL;
@@ -554,7 +554,7 @@ static void *lzma_fast_alloc(void *p, size_t size)
  *-------------------------------------------------
  */
 
-static void lzma_fast_free(void *p, void *address)
+static void lzma_fast_free(ISzAllocPtr p, void *address)
 {
 	int scan;
 	uint32_t *ptr = NULL;
@@ -1829,6 +1829,7 @@ static inline void map_extract_old(const uint8_t *base, map_entry *entry, uint32
 -------------------------------------------------*/
 
 CHD_EXPORT chd_error chd_open_file(FILE *file, int mode, chd_file *parent, chd_file **chd) {
+	chd_error err;
 	core_file *stream = malloc(sizeof(core_file));
 	if (!stream)
 		return CHDERR_OUT_OF_MEMORY;
@@ -1838,7 +1839,15 @@ CHD_EXPORT chd_error chd_open_file(FILE *file, int mode, chd_file *parent, chd_f
 	stream->fclose = core_stdio_fclose_nonowner;
 	stream->fseek = core_stdio_fseek;
 
-	return chd_open_core_file(stream, mode, parent, chd);
+	err = chd_open_core_file(stream, mode, parent, chd);
+	if (err != CHDERR_NONE)
+		return err;
+
+	// swap out the fclose so that we close it on chd clost
+	if (mode & CHD_OPEN_TRANSFER_FILE)
+		stream->fclose = core_stdio_fclose;
+
+	return CHDERR_NONE;
 }
 
 /*-------------------------------------------------
@@ -2069,25 +2078,54 @@ cleanup:
     memory
 -------------------------------------------------*/
 
-CHD_EXPORT chd_error chd_precache(chd_file *chd)
+CHD_EXPORT chd_error chd_precache(chd_file* chd)
+{
+	return chd_precache_progress(chd, NULL, NULL);
+}
+
+CHD_EXPORT chd_error chd_precache_progress(chd_file* chd, void(*progress)(size_t pos, size_t total, void* param), void* param)
 {
-	int64_t count;
+#define PRECACHE_CHUNK_SIZE 16 * 1024 * 1024
+
+	size_t count;
+	uint64_t done, req_count, last_update_done, update_interval;
 
 	if (chd->file_cache == NULL)
 	{
 		chd->file_cache = malloc(chd->file_size);
 		if (chd->file_cache == NULL)
 			return CHDERR_OUT_OF_MEMORY;
-		core_fseek(chd->file, 0, SEEK_SET);
-		count = core_fread(chd->file, chd->file_cache, chd->file_size);
-		if (count != chd->file_size)
-		{
-			free(chd->file_cache);
-			chd->file_cache = NULL;
+		if (core_fseek(chd->file, 0, SEEK_SET) != 0)
 			return CHDERR_READ_ERROR;
+
+		done = 0;
+		last_update_done = 0;
+		update_interval = ((chd->file_size + 99) / 100);
+
+		while (done < chd->file_size)
+		{
+			req_count = chd->file_size - done;
+			if (req_count > PRECACHE_CHUNK_SIZE)
+				req_count = PRECACHE_CHUNK_SIZE;
+
+			count = core_fread(chd->file, chd->file_cache + (size_t)done, (size_t)req_count);
+			if (count != (size_t)req_count)
+			{
+				free(chd->file_cache);
+				chd->file_cache = NULL;
+				return CHDERR_READ_ERROR;
+			}
+
+			done += req_count;
+			if (progress != NULL && (done - last_update_done) >= update_interval && done != chd->file_size)
+			{
+				last_update_done = done;
+				progress(done, chd->file_size, param);
+			}
 		}
 	}
 
+#undef PRECACHE_CHUNK_SIZE
 	return CHDERR_NONE;
 }
 
@@ -2269,6 +2307,14 @@ CHD_EXPORT core_file *chd_core_file(chd_file *chd)
 	return chd->file;
 }
 
+CHD_EXPORT uint64_t chd_get_compressed_size(chd_file *chd)
+{
+	uint64_t size = chd->file->fsize(chd->file);
+	if (chd->parent)
+		size += chd_get_compressed_size(chd->parent);
+	return size;
+}
+
 /*-------------------------------------------------
     chd_error_string - return an error string for
     the given CHD error
@@ -2335,13 +2381,8 @@ CHD_EXPORT const chd_header *chd_get_header(chd_file *chd)
 
 CHD_EXPORT chd_error chd_read_header_core_file(core_file *file, chd_header *header)
 {
-	chd_error err = CHDERR_NONE;
 	chd_file chd;
-
-	/* verify parameters */
-	if (file == NULL || header == NULL)
-		return CHDERR_INVALID_PARAMETER;
-
+	chd_error err;
 	chd.file = file;
 
 	/* attempt to read the header */
@@ -2360,19 +2401,14 @@ CHD_EXPORT chd_error chd_read_header_core_file(core_file *file, chd_header *head
 
 CHD_EXPORT chd_error chd_read_header_file(FILE *file, chd_header *header)
 {
-	chd_error err;
-	core_file *stream = malloc(sizeof(core_file));
-	if (!stream)
-		return CHDERR_OUT_OF_MEMORY;
-	stream->argp = file;
-	stream->fsize = core_stdio_fsize;
-	stream->fread = core_stdio_fread;
-	stream->fclose = core_stdio_fclose_nonowner;
-	stream->fseek = core_stdio_fseek;
+	core_file stream;
+	stream.argp = file;
+	stream.fsize = core_stdio_fsize;
+	stream.fread = core_stdio_fread;
+	stream.fclose = core_stdio_fclose_nonowner;
+	stream.fseek = core_stdio_fseek;
 
-	err = chd_read_header_core_file(stream, header);
-	core_fclose(stream);
-	return err;
+	return chd_read_header_core_file(&stream, header);
 }
 
 /*-------------------------------------------------
@@ -2382,29 +2418,39 @@ CHD_EXPORT chd_error chd_read_header_file(FILE *file, chd_header *header)
 
 CHD_EXPORT chd_error chd_read_header(const char *filename, chd_header *header)
 {
+	core_file *file;
 	chd_error err;
-	core_file *file = NULL;
-
 	if (filename == NULL)
-	{
-		err = CHDERR_INVALID_PARAMETER;
-		goto cleanup;
-	}
+		return CHDERR_INVALID_PARAMETER;
 
-	/* open the file */
 	file = core_stdio_fopen(filename);
-	if (file == 0)
+	if (file == NULL)
+		return CHDERR_FILE_NOT_FOUND;
+
+	err = chd_read_header_core_file(file, header);
+	core_fclose(file);
+	return err;
+}
+
+CHD_EXPORT int chd_is_matching_parent(const chd_header *header, const chd_header *parent_header)
+{
+	/* check MD5 if it isn't empty */
+	if (memcmp(nullmd5, header->parentmd5, sizeof(header->parentmd5)) != 0 &&
+	    memcmp(nullmd5, parent_header->md5, sizeof(parent_header->md5)) != 0 &&
+	    memcmp(parent_header->md5, header->parentmd5, sizeof(header->parentmd5)) != 0)
 	{
-		err = CHDERR_FILE_NOT_FOUND;
-		goto cleanup;
+		return 0;
 	}
 
-	err = chd_read_header_core_file(file, header);
+	/* check SHA1 if it isn't empty */
+	if (memcmp(nullsha1, header->parentsha1, sizeof(header->parentsha1)) != 0 &&
+	    memcmp(nullsha1, parent_header->sha1, sizeof(parent_header->sha1)) != 0 &&
+	    memcmp(parent_header->sha1, header->parentsha1, sizeof(header->parentsha1)) != 0)
+	{
+		return 0;
+	}
 
-	cleanup:
-	if (file != NULL)
-		core_fclose(file);
-	return err;
+	return 1;
 }
 
 /***************************************************************************
-- 
2.47.1

