From 3719d82565643394cec56edb31b3bb2ceeeef8b5 Mon Sep 17 00:00:00 2001
From: Connor McLaughlin <stenzek@gmail.com>
Date: Sun, 3 Apr 2022 20:54:53 +1000
Subject: [PATCH] dep/libchdr: Add chd_precache_progress()

Alternative which reports back as the file is read.
---
 include/libchdr/chd.h |  1 +
 src/libchdr_chd.c     | 39 ++++++++++++++++++++++++++++++++-------
 2 files changed, 33 insertions(+), 7 deletions(-)

diff --git a/include/libchdr/chd.h b/include/libchdr/chd.h
index 9ff2f12..4dd4c5d 100644
--- a/include/libchdr/chd.h
+++ b/include/libchdr/chd.h
@@ -378,6 +378,7 @@ CHD_EXPORT chd_error chd_open(const char *filename, int mode, chd_file *parent,
 
 /* precache underlying file */
 CHD_EXPORT chd_error chd_precache(chd_file *chd);
+CHD_EXPORT chd_error chd_precache_progress(chd_file* chd, void(*progress)(size_t pos, size_t total, void* param), void* param);
 
 /* close a CHD file */
 CHD_EXPORT void chd_close(chd_file *chd);
diff --git a/src/libchdr_chd.c b/src/libchdr_chd.c
index 7d337ce..95f9adc 100644
--- a/src/libchdr_chd.c
+++ b/src/libchdr_chd.c
@@ -1655,10 +1655,16 @@ cleanup:
     memory
 -------------------------------------------------*/
 
-CHD_EXPORT chd_error chd_precache(chd_file *chd)
+CHD_EXPORT chd_error chd_precache(chd_file* chd)
 {
+	return chd_precache_progress(chd, NULL, NULL);
+}
+
+CHD_EXPORT chd_error chd_precache_progress(chd_file *chd, void(*progress)(size_t pos, size_t total, void* param), void* param)
+{
+#define PRECACHE_CHUNK_SIZE 16 * 1024 * 1024
 	INT64 count;
-	UINT64 size;
+	UINT64 size, done, req_count,last_update_done, update_interval;
 
 	if (chd->file_cache == NULL)
 	{
@@ -1669,12 +1675,31 @@ CHD_EXPORT chd_error chd_precache(chd_file *chd)
 		if (chd->file_cache == NULL)
 			return CHDERR_OUT_OF_MEMORY;
 		core_fseek(chd->file, 0, SEEK_SET);
-		count = core_fread(chd->file, chd->file_cache, size);
-		if (count != size)
+
+		done = 0;
+		last_update_done = 0;
+		update_interval = ((size + 99) / 100);
+
+		while (done < size)
 		{
-			free(chd->file_cache);
-			chd->file_cache = NULL;
-			return CHDERR_READ_ERROR;
+			req_count = size - done;
+			if (req_count > PRECACHE_CHUNK_SIZE)
+				req_count = PRECACHE_CHUNK_SIZE;
+
+			count = core_fread(chd->file, chd->file_cache + done, req_count);
+			if (count != req_count)
+			{
+				free(chd->file_cache);
+				chd->file_cache = NULL;
+				return CHDERR_READ_ERROR;
+			}
+
+			done += req_count;
+			if (progress != NULL && (done - last_update_done) >= update_interval && done != size)
+			{
+				last_update_done = done;
+				progress(done, size, param);
+			}
 		}
 	}
 
-- 
2.37.2

