From 806278ac55406af318678112bfcc27babcd65cdc Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Thu, 19 Oct 2023 20:05:46 -0300
Subject: [PATCH] Use system libraries

---
 CMakeLists.txt            |  3 +-
 externals/CMakeLists.txt  | 59 ++++++++++++++++++++++++++++++++++++++-
 src/common/CMakeLists.txt | 10 +++++--
 3 files changed, 67 insertions(+), 5 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3f1fbee..9f31408 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -12,7 +12,6 @@ set(CMAKE_POLICY_DEFAULT_CMP0063 NEW)
 
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules")
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/externals/cmake-modules")
-include(DownloadExternals)
 include(CMakeDependentOption)
 
 project(citra LANGUAGES C CXX ASM)
@@ -167,7 +166,7 @@ function(check_submodules_present)
 endfunction()
 if (EXISTS "${PROJECT_SOURCE_DIR}/.git/objects")
     # only check submodules when source is obtained via Git
-    check_submodules_present()
+    #check_submodules_present()
 endif()
 
 configure_file(${PROJECT_SOURCE_DIR}/dist/compatibility_list/compatibility_list.qrc
diff --git a/externals/CMakeLists.txt b/externals/CMakeLists.txt
index 649f1c2..c61d991 100644
--- a/externals/CMakeLists.txt
+++ b/externals/CMakeLists.txt
@@ -8,7 +8,6 @@ else()
 endif()
 
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/CMakeModules)
-include(DownloadExternals)
 include(ExternalProject)
 
 # Boost
@@ -37,9 +36,19 @@ if (NOT USE_SYSTEM_BOOST)
 endif()
 
 # Catch2
+if (ENABLE_TESTS)
+find_package(Catch2 3.1.0 REQUIRED CONFIG)
+if(Catch2_FOUND)
+  message(STATUS "Using the system Catch")
+  add_library(catch-shared INTERFACE)
+  target_link_libraries(catch-shared INTERFACE Catch2::Catch2WithMain)
+  add_library(Catch2::Catch2WithMain ALIAS catch-shared)
+else()
 set(CATCH_INSTALL_DOCS OFF CACHE BOOL "")
 set(CATCH_INSTALL_EXTRAS OFF CACHE BOOL "")
 add_subdirectory(catch2)
+endif()
+endif()
 
 # Crypto++
 set(CRYPTOPP_BUILD_DOCUMENTATION OFF CACHE BOOL "")
@@ -179,6 +188,14 @@ if (NOT FOUND_FFMPEG_HEADERS)
     target_include_directories(library-headers SYSTEM INTERFACE ./library-headers/ffmpeg/include)
 endif()
 
+find_package(tsl-robin-map)
+if(tsl-robin-map_FOUND)
+    message(STATUS "Using the system tls_robin_map")
+    add_library(tsl-robin-map-shared INTERFACE)
+    target_link_libraries(tsl-robin-map-shared INTERFACE tsl::robin_map)
+    add_library(tsl::robin_map ALIAS tsl-robin-map-shared)
+endif()
+
 # SoundTouch
 if(NOT USE_SYSTEM_SOUNDTOUCH)
     set(INTEGER_SAMPLES ON CACHE BOOL "")
@@ -207,22 +224,46 @@ if (ENABLE_LIBUSB AND NOT USE_SYSTEM_LIBUSB)
 endif()
 
 # Zstandard
+pkg_check_modules(ZSTD IMPORTED_TARGET libzstd)
+if(ZSTD_FOUND)
+  message(STATUS "Using the system zstd")
+  add_library(zstd-shared INTERFACE)
+  target_link_libraries(zstd-shared INTERFACE PkgConfig::ZSTD)
+  add_library(libzstd_static ALIAS zstd-shared)
+else()
 set(ZSTD_LEGACY_SUPPORT OFF)
 set(ZSTD_BUILD_PROGRAMS OFF)
 set(ZSTD_BUILD_SHARED OFF)
 add_subdirectory(zstd/build/cmake EXCLUDE_FROM_ALL)
 target_include_directories(libzstd_static INTERFACE $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/externals/zstd/lib>)
+endif()
 
 # ENet
+pkg_check_modules(ENET IMPORTED_TARGET libenet)
+if(ENET_FOUND)
+  message(STATUS "Using the system enet")
+  add_library(enet-shared INTERFACE)
+  target_link_libraries(enet-shared INTERFACE PkgConfig::ENET)
+  add_library(enet ALIAS enet-shared)
+else()
 add_subdirectory(enet)
 target_include_directories(enet INTERFACE ./enet/include)
+endif()
 
 # Cubeb
 if (ENABLE_CUBEB)
+    find_package(cubeb)
+    if(cubeb_FOUND)
+      message(STATUS "Using the system cubeb")
+      add_library(cubeb-shared INTERFACE)
+      target_link_libraries(cubeb-shared INTERFACE cubeb::cubeb)
+      add_library(cubeb ALIAS cubeb-shared)
+    else()
     set(BUILD_TESTS OFF CACHE BOOL "")
     set(BUILD_TOOLS OFF CACHE BOOL "")
     set(BUNDLE_SPEEX ON CACHE BOOL "")
     add_subdirectory(cubeb EXCLUDE_FROM_ALL)
+    endif()
 endif()
 
 # DiscordRPC
@@ -310,6 +351,13 @@ endif()
 
 # OpenAL Soft
 if (ENABLE_OPENAL)
+find_package(OpenAL 1.23.1)
+if(OpenAL_FOUND)
+    message(STATUS "Using the system OpenAL")
+    add_library(openal-shared INTERFACE)
+    target_link_libraries(openal-shared INTERFACE OpenAL::OpenAL)
+    add_library(OpenAL ALIAS openal-shared)
+  else()
     set(ALSOFT_EMBED_HRTF_DATA OFF CACHE BOOL "")
     set(ALSOFT_EXAMPLES OFF CACHE BOOL "")
     set(ALSOFT_INSTALL OFF CACHE BOOL "")
@@ -320,17 +368,26 @@ if (ENABLE_OPENAL)
     set(LIBTYPE "STATIC" CACHE STRING "")
     add_subdirectory(openal-soft EXCLUDE_FROM_ALL)
 endif()
+endif()
 
 # VMA
 add_library(vma INTERFACE)
 target_include_directories(vma SYSTEM INTERFACE ./vma/include)
 
 # vulkan-headers
+find_package(VulkanHeaders)
+if(VulkanHeaders_FOUND)
+    message(STATUS "Using the system vulkan-headers")
+    add_library(vulkan-shared INTERFACE)
+    target_link_libraries(vulkan-shared INTERFACE Vulkan::Headers)
+    add_library(vulkan-headers ALIAS vulkan-shared)
+else()
 add_library(vulkan-headers INTERFACE)
 target_include_directories(vulkan-headers SYSTEM INTERFACE ./vulkan-headers/include)
 if (APPLE)
     target_include_directories(vulkan-headers SYSTEM INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/MoltenVK)
 endif()
+endif()
 
 # adrenotools
 if (ANDROID AND "arm64" IN_LIST ARCHITECTURE)
diff --git a/src/common/CMakeLists.txt b/src/common/CMakeLists.txt
index e2ee678..a7e4c7d 100644
--- a/src/common/CMakeLists.txt
+++ b/src/common/CMakeLists.txt
@@ -144,12 +144,18 @@ add_library(citra_common STATIC
     web_result.h
     x64/cpu_detect.cpp
     x64/cpu_detect.h
-    x64/xbyak_abi.h
-    x64/xbyak_util.h
     zstd_compression.cpp
     zstd_compression.h
 )
 
+if(NOT TARGET xbyak::xbyak)
+target_sources(citra_common
+    PRIVATE
+      x64/xbyak_abi.h
+      x64/xbyak_util.h
+)
+endif()
+
 if (APPLE)
     target_sources(citra_common PUBLIC
         apple_authorization.h
-- 
2.41.0

