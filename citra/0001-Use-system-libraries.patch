From 2c2dd7a55c01482219451c7b54c31aea2aa6efea Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Wed, 9 Feb 2022 08:28:04 -0300
Subject: [PATCH] Use system libraries

---
 CMakeLists.txt            |  2 --
 externals/CMakeLists.txt  | 68 +++++++++++++++++++++++++++++++++++++--
 src/citra/config.cpp      |  2 +-
 src/common/CMakeLists.txt | 10 ++++--
 4 files changed, 74 insertions(+), 8 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index c98cc3a..a54cb66 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -8,7 +8,6 @@ cmake_policy(SET CMP0069 NEW)
 
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules")
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/externals/cmake-modules")
-include(DownloadExternals)
 include(CMakeDependentOption)
 
 project(citra LANGUAGES C CXX ASM)
@@ -113,7 +112,6 @@ function(check_submodules_present)
         endif()
     endforeach()
 endfunction()
-check_submodules_present()
 
 configure_file(${PROJECT_SOURCE_DIR}/dist/compatibility_list/compatibility_list.qrc
                ${PROJECT_BINARY_DIR}/dist/compatibility_list/compatibility_list.qrc
diff --git a/externals/CMakeLists.txt b/externals/CMakeLists.txt
index 12831f3..8fa154b 100644
--- a/externals/CMakeLists.txt
+++ b/externals/CMakeLists.txt
@@ -6,10 +6,10 @@ if (CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
 endif()
 
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/CMakeModules)
-include(DownloadExternals)
 include(ExternalProject)
 
 # Boost
+if (NOT USE_SYSTEM_BOOST)
 set(BOOST_ROOT "${CMAKE_SOURCE_DIR}/externals/boost")
 set(Boost_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/externals/boost")
 set(Boost_NO_SYSTEM_PATHS ON)
@@ -22,11 +22,20 @@ add_library(boost_serialization STATIC ${boost_serialization_SRC})
 target_link_libraries(boost_iostreams PUBLIC boost)
 
 # Add additional boost libs here; remember to ALIAS them in the root CMakeLists!
+endif()
 
 # Catch2
+find_package(Catch2 3.1.0 REQUIRED CONFIG)
+if(Catch2_FOUND)
+  message(STATUS "Using the system Catch")
+  add_library(catch-shared INTERFACE)
+  target_link_libraries(catch-shared INTERFACE Catch2::Catch2WithMain)
+  add_library(Catch2::Catch2WithMain ALIAS catch-shared)
+else()
 set(CATCH_INSTALL_DOCS OFF)
 set(CATCH_INSTALL_EXTRAS OFF)
 add_subdirectory(catch2)
+endif()
 
 # Crypto++
 set(CRYPTOPP_BUILD_DOCUMENTATION OFF)
@@ -50,19 +59,43 @@ endif()
 
 # fmt and Xbyak need to be added before dynarmic
 # libfmt
+find_package(fmt 9.1)
+if(fmt_FOUND)
+  message(STATUS "Using the system fmt")
+  add_library(fmt-shared INTERFACE)
+  target_link_libraries(fmt-shared INTERFACE fmt::fmt)
+  add_library(fmt::fmt ALIAS fmt-shared)
+else()
 option(FMT_INSTALL "" ON)
 add_subdirectory(fmt)
+endif()
 
 # Xbyak
 if ("x86_64" IN_LIST ARCHITECTURE)
+  find_package(xbyak 6)
+  if(xbyak_FOUND)
+    message(STATUS "Using the system xbyak")
+    add_library(xbyak-shared INTERFACE)
+    target_link_libraries(xbyak-shared INTERFACE xbyak::xbyak)
+    add_library(xbyak ALIAS xbyak-shared)
+  else()
     add_subdirectory(xbyak)
+  endif()
 endif()
 
 # Dynarmic
 if ("x86_64" IN_LIST ARCHITECTURE OR "arm64" IN_LIST ARCHITECTURE)
+  find_package(dynarmic 6.4.0)
+  if(dynarmic_FOUND)
+    message(STATUS "Using the system dynarmic")
+    add_library(dynarmic-shared INTERFACE)
+    target_link_libraries(dynarmic-shared INTERFACE dynarmic::dynarmic)
+    add_library(dynarmic ALIAS dynarmic-shared)
+  else()
     set(DYNARMIC_TESTS OFF)
     set(DYNARMIC_FRONTENDS "A32")
     add_subdirectory(dynarmic)
+  endif()
 endif()
 
 # getopt
@@ -74,7 +107,15 @@ endif()
 add_subdirectory(glad)
 
 # inih
+pkg_check_modules(inih IMPORTED_TARGET INIReader)
+if(inih_FOUND)
+  message(STATUS "Using the system inih")
+  add_library(inih-shared INTERFACE)
+  target_link_libraries(inih-shared INTERFACE PkgConfig::inih)
+  add_library(inih ALIAS inih-shared)
+else()
 add_subdirectory(inih)
+endif()
 
 # MicroProfile
 add_library(microprofile INTERFACE)
@@ -101,20 +142,41 @@ if (ENABLE_SDL2 AND NOT USE_SYSTEM_SDL2)
 endif()
 
 # Zstandard
+pkg_check_modules(ZSTD IMPORTED_TARGET libzstd)
+if(ZSTD_FOUND)
+  message(STATUS "Using the system zstd")
+  add_library(zstd-shared INTERFACE)
+  target_link_libraries(zstd-shared INTERFACE PkgConfig::ZSTD)
+  add_library(libzstd_static ALIAS zstd-shared)
+else()
 set(ZSTD_LEGACY_SUPPORT OFF)
 set(ZSTD_BUILD_PROGRAMS OFF)
 set(ZSTD_BUILD_SHARED OFF)
 add_subdirectory(zstd/build/cmake EXCLUDE_FROM_ALL)
 target_include_directories(libzstd_static INTERFACE $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/externals/zstd/lib>)
+endif()
 
 # ENet
+pkg_check_modules(ENET IMPORTED_TARGET libenet)
+if(ENET_FOUND)
+  message(STATUS "Using the system enet")
+  add_library(enet-shared INTERFACE)
+  target_link_libraries(enet-shared INTERFACE PkgConfig::ENET)
+  add_library(enet ALIAS enet-shared)
+else()
 add_subdirectory(enet)
 target_include_directories(enet INTERFACE ./enet/include)
+endif()
 
 # Cubeb
 if (ENABLE_CUBEB)
-    set(BUILD_TESTS OFF CACHE BOOL "")
-    add_subdirectory(cubeb EXCLUDE_FROM_ALL)
+    find_package(cubeb)
+    if(cubeb_FOUND)
+      message(STATUS "Using the system cubeb")
+    else()
+      set(BUILD_TESTS OFF CACHE BOOL "")
+      add_subdirectory(cubeb EXCLUDE_FROM_ALL)
+    endif()
 endif()
 
 # DiscordRPC
diff --git a/src/citra/config.cpp b/src/citra/config.cpp
index 64d33a9..c32d52d 100644
--- a/src/citra/config.cpp
+++ b/src/citra/config.cpp
@@ -7,7 +7,7 @@
 #include <sstream>
 #include <unordered_map>
 #include <SDL.h>
-#include <inih/cpp/INIReader.h>
+#include <INIReader.h>
 #include "citra/config.h"
 #include "citra/default_ini.h"
 #include "common/file_util.h"
diff --git a/src/common/CMakeLists.txt b/src/common/CMakeLists.txt
index 43b1e1b..1078ae6 100644
--- a/src/common/CMakeLists.txt
+++ b/src/common/CMakeLists.txt
@@ -128,12 +128,18 @@ add_library(common STATIC
     web_result.h
     x64/cpu_detect.cpp
     x64/cpu_detect.h
-    x64/xbyak_abi.h
-    x64/xbyak_util.h
     zstd_compression.cpp
     zstd_compression.h
 )
 
+if(NOT TARGET xbyak::xbyak)
+target_sources(common
+    PRIVATE
+      x64/xbyak_abi.h
+      x64/xbyak_util.h
+)
+endif()
+
 create_target_directory_groups(common)
 
 target_link_libraries(common PUBLIC fmt::fmt microprofile Boost::boost Boost::serialization Boost::iostreams)
-- 
2.39.1

