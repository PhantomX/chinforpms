From 0c54e4c3902bdd49117c762395a726003a607ef1 Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Wed, 9 Feb 2022 08:28:04 -0300
Subject: [PATCH] Use system libraries

---
 CMakeLists.txt            | 17 +------
 externals/CMakeLists.txt  | 93 ++++++++++++++++++++++++++++++++++++++-
 src/citra/config.cpp      |  2 +-
 src/common/CMakeLists.txt | 10 ++++-
 4 files changed, 102 insertions(+), 20 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 12c511b..82f3cc5 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -12,7 +12,6 @@ set(CMAKE_POLICY_DEFAULT_CMP0063 NEW)
 
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules")
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/externals/cmake-modules")
-include(DownloadExternals)
 include(CMakeDependentOption)
 
 project(citra LANGUAGES C CXX ASM)
@@ -133,7 +132,7 @@ function(check_submodules_present)
 endfunction()
 if (EXISTS "${PROJECT_SOURCE_DIR}/.git/objects")
     # only check submodules when source is obtained via Git
-    check_submodules_present()
+    #check_submodules_present()
 endif()
 
 configure_file(${PROJECT_SOURCE_DIR}/dist/compatibility_list/compatibility_list.qrc
@@ -396,20 +395,6 @@ else()
     set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT citra)
 endif()
 
-# Create target for outputting distributable bundles.
-if (NOT ANDROID AND NOT IOS)
-    include(BundleTarget)
-    if (ENABLE_SDL2_FRONTEND)
-        bundle_target(citra)
-    endif()
-    if (ENABLE_QT)
-        bundle_target(citra-qt)
-    endif()
-    if (ENABLE_DEDICATED_ROOM)
-        bundle_target(citra-room)
-    endif()
-endif()
-
 # Installation instructions
 # =========================
 
diff --git a/externals/CMakeLists.txt b/externals/CMakeLists.txt
index 4406c3d..ae98544 100644
--- a/externals/CMakeLists.txt
+++ b/externals/CMakeLists.txt
@@ -8,10 +8,10 @@ else()
 endif()
 
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/CMakeModules)
-include(DownloadExternals)
 include(ExternalProject)
 
 # Boost
+if (NOT USE_SYSTEM_BOOST)
 set(BOOST_ROOT "${CMAKE_SOURCE_DIR}/externals/boost" CACHE STRING "")
 set(Boost_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/externals/boost" CACHE STRING "")
 set(Boost_NO_SYSTEM_PATHS ON CACHE BOOL "")
@@ -33,11 +33,22 @@ add_library(
 target_link_libraries(boost_iostreams PUBLIC boost)
 
 # Add additional boost libs here; remember to ALIAS them in the root CMakeLists!
+endif()
 
 # Catch2
+if (ENABLE_TESTS)
+find_package(Catch2 3.1.0 REQUIRED CONFIG)
+if(Catch2_FOUND)
+  message(STATUS "Using the system Catch")
+  add_library(catch-shared INTERFACE)
+  target_link_libraries(catch-shared INTERFACE Catch2::Catch2WithMain)
+  add_library(Catch2::Catch2WithMain ALIAS catch-shared)
+else()
 set(CATCH_INSTALL_DOCS OFF CACHE BOOL "")
 set(CATCH_INSTALL_EXTRAS OFF CACHE BOOL "")
 add_subdirectory(catch2)
+endif()
+endif()
 
 # Crypto++
 set(CRYPTOPP_BUILD_DOCUMENTATION OFF CACHE BOOL "")
@@ -66,19 +77,43 @@ target_include_directories(dds-ktx INTERFACE ./dds-ktx)
 
 # fmt and Xbyak need to be added before dynarmic
 # libfmt
+find_package(fmt 9.1)
+if(fmt_FOUND)
+  message(STATUS "Using the system fmt")
+  add_library(fmt-shared INTERFACE)
+  target_link_libraries(fmt-shared INTERFACE fmt::fmt)
+  add_library(fmt::fmt ALIAS fmt-shared)
+else()
 option(FMT_INSTALL "" ON)
 add_subdirectory(fmt EXCLUDE_FROM_ALL)
+endif()
 
 # Xbyak
 if ("x86_64" IN_LIST ARCHITECTURE)
+  find_package(xbyak 6)
+  if(xbyak_FOUND)
+    message(STATUS "Using the system xbyak")
+    add_library(xbyak-shared INTERFACE)
+    target_link_libraries(xbyak-shared INTERFACE xbyak::xbyak)
+    add_library(xbyak ALIAS xbyak-shared)
+  else()
     add_subdirectory(xbyak EXCLUDE_FROM_ALL)
+  endif()
 endif()
 
 # Dynarmic
 if ("x86_64" IN_LIST ARCHITECTURE OR "arm64" IN_LIST ARCHITECTURE)
+  find_package(dynarmic 6.4.0)
+  if(dynarmic_FOUND)
+    message(STATUS "Using the system dynarmic")
+    add_library(dynarmic-shared INTERFACE)
+    target_link_libraries(dynarmic-shared INTERFACE dynarmic::dynarmic)
+    add_library(dynarmic ALIAS dynarmic-shared)
+  else()
     set(DYNARMIC_TESTS OFF CACHE BOOL "")
     set(DYNARMIC_FRONTENDS "A32" CACHE STRING "")
     add_subdirectory(dynarmic EXCLUDE_FROM_ALL)
+  endif()
 endif()
 
 # getopt
@@ -98,7 +133,15 @@ set(ENABLE_HLSL OFF CACHE BOOL "")
 add_subdirectory(glslang)
 
 # inih
+pkg_check_modules(inih IMPORTED_TARGET INIReader)
+if(inih_FOUND)
+  message(STATUS "Using the system inih")
+  add_library(inih-shared INTERFACE)
+  target_link_libraries(inih-shared INTERFACE PkgConfig::inih)
+  add_library(inih ALIAS inih-shared)
+else()
 add_subdirectory(inih)
+endif()
 
 # MicroProfile
 add_library(microprofile INTERFACE)
@@ -118,6 +161,14 @@ add_subdirectory(open_source_archives)
 # Dynamic library headers
 add_subdirectory(library-headers EXCLUDE_FROM_ALL)
 
+find_package(tsl-robin-map)
+if(tsl-robin-map_FOUND)
+    message(STATUS "Using the system tls_robin_map")
+    add_library(tsl-robin-map-shared INTERFACE)
+    target_link_libraries(tsl-robin-map-shared INTERFACE tsl::robin_map)
+    add_library(tsl::robin_map ALIAS tsl-robin-map-shared)
+endif()
+
 # SoundTouch
 set(INTEGER_SAMPLES ON CACHE BOOL "")
 set(SOUNDSTRETCH OFF CACHE BOOL "")
@@ -143,22 +194,46 @@ if (ENABLE_LIBUSB AND NOT USE_SYSTEM_LIBUSB)
 endif()
 
 # Zstandard
+pkg_check_modules(ZSTD IMPORTED_TARGET libzstd)
+if(ZSTD_FOUND)
+  message(STATUS "Using the system zstd")
+  add_library(zstd-shared INTERFACE)
+  target_link_libraries(zstd-shared INTERFACE PkgConfig::ZSTD)
+  add_library(libzstd_static ALIAS zstd-shared)
+else()
 set(ZSTD_LEGACY_SUPPORT OFF)
 set(ZSTD_BUILD_PROGRAMS OFF)
 set(ZSTD_BUILD_SHARED OFF)
 add_subdirectory(zstd/build/cmake EXCLUDE_FROM_ALL)
 target_include_directories(libzstd_static INTERFACE $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/externals/zstd/lib>)
+endif()
 
 # ENet
+pkg_check_modules(ENET IMPORTED_TARGET libenet)
+if(ENET_FOUND)
+  message(STATUS "Using the system enet")
+  add_library(enet-shared INTERFACE)
+  target_link_libraries(enet-shared INTERFACE PkgConfig::ENET)
+  add_library(enet ALIAS enet-shared)
+else()
 add_subdirectory(enet)
 target_include_directories(enet INTERFACE ./enet/include)
+endif()
 
 # Cubeb
 if (ENABLE_CUBEB)
+    find_package(cubeb)
+    if(cubeb_FOUND)
+      message(STATUS "Using the system cubeb")
+      add_library(cubeb-shared INTERFACE)
+      target_link_libraries(cubeb-shared INTERFACE cubeb::cubeb)
+      add_library(cubeb ALIAS cubeb-shared)
+    else()
     set(BUILD_TESTS OFF CACHE BOOL "")
     set(BUILD_TOOLS OFF CACHE BOOL "")
     set(BUNDLE_SPEEX ON CACHE BOOL "")
     add_subdirectory(cubeb EXCLUDE_FROM_ALL)
+    endif()
 endif()
 
 # DiscordRPC
@@ -219,6 +294,13 @@ endif()
 
 # OpenAL Soft
 if (ENABLE_OPENAL)
+find_package(OpenAL 1.23.1)
+if(OpenAL_FOUND)
+    message(STATUS "Using the system OpenAL")
+    add_library(openal-shared INTERFACE)
+    target_link_libraries(openal-shared INTERFACE OpenAL::OpenAL)
+    add_library(OpenAL ALIAS openal-shared)
+  else()
     set(ALSOFT_EMBED_HRTF_DATA OFF CACHE BOOL "")
     set(ALSOFT_EXAMPLES OFF CACHE BOOL "")
     set(ALSOFT_INSTALL OFF CACHE BOOL "")
@@ -229,11 +311,20 @@ if (ENABLE_OPENAL)
     set(LIBTYPE "STATIC" CACHE STRING "")
     add_subdirectory(openal-soft EXCLUDE_FROM_ALL)
 endif()
+endif()
 
 # VMA
 add_library(vma INTERFACE)
 target_include_directories(vma SYSTEM INTERFACE ./vma/include)
 
 # vulkan-headers
+find_package(VulkanHeaders)
+if(VulkanHeaders_FOUND)
+    message(STATUS "Using the system vulkan-headers")
+    add_library(vulkan-shared INTERFACE)
+    target_link_libraries(vulkan-shared INTERFACE Vulkan::Headers)
+    add_library(vulkan-headers ALIAS vulkan-shared)
+else()
 add_library(vulkan-headers INTERFACE)
 target_include_directories(vulkan-headers SYSTEM INTERFACE ./vulkan-headers/include)
+endif()
diff --git a/src/citra/config.cpp b/src/citra/config.cpp
index 5edaf42..2e5a23d 100644
--- a/src/citra/config.cpp
+++ b/src/citra/config.cpp
@@ -7,7 +7,7 @@
 #include <sstream>
 #include <type_traits>
 #include <SDL.h>
-#include <inih/cpp/INIReader.h>
+#include <INIReader.h>
 #include "citra/config.h"
 #include "citra/default_ini.h"
 #include "common/file_util.h"
diff --git a/src/common/CMakeLists.txt b/src/common/CMakeLists.txt
index ddf715f..a8d32d8 100644
--- a/src/common/CMakeLists.txt
+++ b/src/common/CMakeLists.txt
@@ -136,12 +136,18 @@ add_library(citra_common STATIC
     web_result.h
     x64/cpu_detect.cpp
     x64/cpu_detect.h
-    x64/xbyak_abi.h
-    x64/xbyak_util.h
     zstd_compression.cpp
     zstd_compression.h
 )
 
+if(NOT TARGET xbyak::xbyak)
+target_sources(citra_common
+    PRIVATE
+      x64/xbyak_abi.h
+      x64/xbyak_util.h
+)
+endif()
+
 if (APPLE)
     target_sources(citra_common PUBLIC
         apple_authorization.h
-- 
2.41.0

