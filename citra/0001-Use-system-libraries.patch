From deae7a7ca4428312655b851d04da3d9a93aac318 Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Thu, 19 Oct 2023 20:05:46 -0300
Subject: [PATCH] Use system libraries

---
 CMakeLists.txt            |  3 +--
 externals/CMakeLists.txt  | 30 ++++++++++++++++++++++++++----
 src/common/CMakeLists.txt | 10 ++++++++--
 3 files changed, 35 insertions(+), 8 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index d2bf7ae..f00dbba 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -12,7 +12,6 @@ set(CMAKE_POLICY_DEFAULT_CMP0063 NEW)
 
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules")
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/externals/cmake-modules")
-include(DownloadExternals)
 include(CMakeDependentOption)
 
 project(citra LANGUAGES C CXX ASM)
@@ -148,7 +147,7 @@ function(check_submodules_present)
 endfunction()
 if (EXISTS "${PROJECT_SOURCE_DIR}/.git/objects")
     # only check submodules when source is obtained via Git
-    check_submodules_present()
+    #check_submodules_present()
 endif()
 
 configure_file(${PROJECT_SOURCE_DIR}/dist/compatibility_list/compatibility_list.qrc
diff --git a/externals/CMakeLists.txt b/externals/CMakeLists.txt
index 29e0a73..f816d4d 100644
--- a/externals/CMakeLists.txt
+++ b/externals/CMakeLists.txt
@@ -8,7 +8,6 @@ else()
 endif()
 
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/CMakeModules)
-include(DownloadExternals)
 include(ExternalProject)
 
 # Boost
@@ -41,6 +40,7 @@ else()
 endif()
 
 # Catch2
+if (ENABLE_TESTS)
 add_library(catch2 INTERFACE)
 if(USE_SYSTEM_CATCH2)
     find_package(Catch2 3.0.0 REQUIRED)
@@ -50,6 +50,7 @@ else()
     add_subdirectory(catch2)
 endif()
 target_link_libraries(catch2 INTERFACE Catch2::Catch2WithMain)
+endif()
 
 # Crypto++
 if(USE_SYSTEM_CRYPTOPP)
@@ -188,6 +189,14 @@ if (NOT FOUND_FFMPEG_HEADERS)
     target_include_directories(library-headers SYSTEM INTERFACE ./library-headers/ffmpeg/include)
 endif()
 
+find_package(tsl-robin-map)
+if(tsl-robin-map_FOUND)
+    message(STATUS "Using the system tls_robin_map")
+    add_library(tsl-robin-map-shared INTERFACE)
+    target_link_libraries(tsl-robin-map-shared INTERFACE tsl::robin_map)
+    add_library(tsl::robin_map ALIAS tsl-robin-map-shared)
+endif()
+
 # SoundTouch
 if(NOT USE_SYSTEM_SOUNDTOUCH)
     set(INTEGER_SAMPLES ON CACHE BOOL "")
@@ -217,12 +226,19 @@ endif()
 
 # Zstandard
 if(USE_SYSTEM_ZSTD)
-    find_package(zstd REQUIRED)
+    find_package(zstd)
+    if(NOT zstd_FOUND)
+      pkg_check_modules(libzstd_shared REQUIRED IMPORTED_TARGET libzstd)
+    endif()
     add_library(zstd INTERFACE)
-    if(TARGET zstd::libzstd_shared)
+    if(TARGET zstd::libzstd_shared OR TARGET PkgConfig::libzstd_shared ) 
         message(STATUS "Found system Zstandard")
     endif()
+    if(TARGET zstd::libzstd_shared)
     target_link_libraries(zstd INTERFACE zstd::libzstd_shared)
+    else()
+      target_link_libraries(zstd INTERFACE PkgConfig::libzstd_shared)
+    endif()
 else()
     set(ZSTD_LEGACY_SUPPORT OFF)
     set(ZSTD_BUILD_PROGRAMS OFF)
@@ -320,7 +336,13 @@ if(ANDROID)
 endif()
 
 if (UNIX AND NOT APPLE)
+    pkg_check_modules(gamemode REQUIRED IMPORTED_TARGET gamemode)
+    if(gamemode_FOUND)
+       add_library(gamemode INTERFACE)
+       target_link_libraries(gamemode INTERFACE PkgConfig::gamemode)
+    else()
     add_subdirectory(gamemode)
+    endif()
 endif()
 
 # cpp-jwt
@@ -387,7 +409,7 @@ endif()
 # vulkan-headers
 add_library(vulkan-headers INTERFACE)
 if(USE_SYSTEM_VULKAN_HEADERS)
-    find_package(Vulkan REQUIRED)
+    find_package(VulkanHeaders REQUIRED)
     if(TARGET Vulkan::Headers)
         message(STATUS "Found Vulkan headers")
         target_link_libraries(vulkan-headers INTERFACE Vulkan::Headers)
diff --git a/src/common/CMakeLists.txt b/src/common/CMakeLists.txt
index f8c953a..fbc90b3 100644
--- a/src/common/CMakeLists.txt
+++ b/src/common/CMakeLists.txt
@@ -146,12 +146,18 @@ add_library(citra_common STATIC
     web_result.h
     x64/cpu_detect.cpp
     x64/cpu_detect.h
-    x64/xbyak_abi.h
-    x64/xbyak_util.h
     zstd_compression.cpp
     zstd_compression.h
 )
 
+if(NOT TARGET xbyak::xbyak)
+target_sources(citra_common
+    PRIVATE
+      x64/xbyak_abi.h
+      x64/xbyak_util.h
+)
+endif()
+
 if (UNIX AND NOT APPLE)
   target_sources(citra_common PRIVATE
     linux/gamemode.cpp
-- 
2.43.0

