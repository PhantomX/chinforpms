From dd025ed08dc701050e07a3accaa346cc33fd05cb Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Thu, 19 Sep 2024 21:05:14 -0300
Subject: [PATCH] python: 2to3

---
 build.py                 |  4 ++--
 test/run-tests.py        | 18 +++++++++---------
 test/www/delay.py        |  6 +++---
 test/www/echo.py         |  8 ++++----
 test/www/status.py       |  8 ++++----
 test/www/url-encoding.py |  8 ++++----
 6 files changed, 26 insertions(+), 26 deletions(-)

diff --git a/build.py b/build.py
index 133cc5e..fb6453b 100755
--- a/build.py
+++ b/build.py
@@ -128,7 +128,7 @@ class PhantomJSBuilder(object):
         # python 2 compatibility: manually convert to strings
         command = [str(c) for c in command]
         workingDirectory = os.path.abspath(workingDirectory)
-        print("Executing in %s: %s" % (workingDirectory, " ".join(command)))
+        print(("Executing in %s: %s" % (workingDirectory, " ".join(command))))
         if self.options.dry_run:
             return 0
         process = subprocess.Popen(command, stdout=sys.stdout, stderr=sys.stderr, cwd=workingDirectory)
@@ -221,7 +221,7 @@ class PhantomJSBuilder(object):
                     if os.path.exists(search_path["header"]):
                       openssl_found = True
                       platformOptions.extend(search_path["flags"])
-                      print("Found OpenSSL installed via %s" % search_path["name"])
+                      print(("Found OpenSSL installed via %s" % search_path["name"]))
 
                   if not openssl_found:
                     raise RuntimeError("Could not find OpenSSL")
diff --git a/test/run-tests.py b/test/run-tests.py
index 060d53f..c2a912b 100755
--- a/test/run-tests.py
+++ b/test/run-tests.py
@@ -10,18 +10,18 @@ import platform
 import posixpath
 import re
 import shlex
-import SimpleHTTPServer
+import http.server
 import socket
-import SocketServer
+import socketserver
 import ssl
 import string
-import cStringIO as StringIO
+import io as StringIO
 import subprocess
 import sys
 import threading
 import time
 import traceback
-import urllib
+import urllib.request, urllib.parse, urllib.error
 
 # All files matching one of these glob patterns will be run as tests.
 TESTS = [
@@ -234,7 +234,7 @@ def do_call_subprocess(command, verbose, stdin_data, timeout):
 # HTTP/HTTPS server, presented on localhost to the tests
 #
 
-class FileHandler(SimpleHTTPServer.SimpleHTTPRequestHandler, object):
+class FileHandler(http.server.SimpleHTTPRequestHandler, object):
 
     def __init__(self, *args, **kwargs):
         self._cached_untranslated_path = None
@@ -252,7 +252,7 @@ class FileHandler(SimpleHTTPServer.SimpleHTTPRequestHandler, object):
     def do_POST(self):
         try:
             ln = int(self.headers.get('content-length'))
-        except TypeError, ValueError:
+        except TypeError as ValueError:
             self.send_response(400, 'Bad Request')
             self.send_header('Content-Type', 'text/plain')
             self.end_headers()
@@ -313,7 +313,7 @@ class FileHandler(SimpleHTTPServer.SimpleHTTPRequestHandler, object):
         # Ensure consistent encoding of special characters, then
         # lowercase everything so that the tests behave consistently
         # whether or not the local filesystem is case-sensitive.
-        path = urllib.quote(urllib.unquote(path)).lower()
+        path = urllib.parse.quote(urllib.parse.unquote(path)).lower()
 
         # Prevent access to files outside www/.
         # At this point we want specifically POSIX-like treatment of 'path'
@@ -339,13 +339,13 @@ class FileHandler(SimpleHTTPServer.SimpleHTTPRequestHandler, object):
         self._cached_translated_path = path
         return path
 
-class TCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
+class TCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
     # This is how you are officially supposed to set SO_REUSEADDR per
     # https://docs.python.org/2/library/socketserver.html#SocketServer.BaseServer.allow_reuse_address
     allow_reuse_address = True
 
     def __init__(self, use_ssl, handler, base_path, signal_error):
-        SocketServer.TCPServer.__init__(self, ('localhost', 0), handler)
+        socketserver.TCPServer.__init__(self, ('localhost', 0), handler)
         if use_ssl:
             self.socket = wrap_socket_ssl(self.socket, base_path)
         self._signal_error = signal_error
diff --git a/test/www/delay.py b/test/www/delay.py
index 9653499..f0c5fb9 100644
--- a/test/www/delay.py
+++ b/test/www/delay.py
@@ -1,9 +1,9 @@
-import cStringIO as StringIO
-import urlparse
+import io as StringIO
+import urllib.parse
 import time
 
 def handle_request(req):
-    url = urlparse.urlparse(req.path)
+    url = urllib.parse.urlparse(req.path)
     delay = float(int(url.query))
     time.sleep(delay / 1000) # argument is in milliseconds
 
diff --git a/test/www/echo.py b/test/www/echo.py
index 8a7ba2d..b574ec6 100644
--- a/test/www/echo.py
+++ b/test/www/echo.py
@@ -1,11 +1,11 @@
 import json
-import urlparse
-import cStringIO as StringIO
+import urllib.parse
+import io as StringIO
 
 def handle_request(req):
-    url = urlparse.urlparse(req.path)
+    url = urllib.parse.urlparse(req.path)
     headers = {}
-    for name, value in req.headers.items():
+    for name, value in list(req.headers.items()):
         headers[name] = value.rstrip()
 
     d = dict(
diff --git a/test/www/status.py b/test/www/status.py
index e7a1c3e..5d3d7c4 100644
--- a/test/www/status.py
+++ b/test/www/status.py
@@ -1,16 +1,16 @@
-import cStringIO as StringIO
-import urlparse
+import io as StringIO
+import urllib.parse
 
 def html_esc(s):
     return s.replace('&','&amp;').replace('<','&lt;').replace('>','&gt;')
 
 def handle_request(req):
-    url = urlparse.urlparse(req.path)
+    url = urllib.parse.urlparse(req.path)
     headers = []
     body = ""
 
     try:
-        query = urlparse.parse_qsl(url.query, strict_parsing=True)
+        query = urllib.parse.parse_qsl(url.query, strict_parsing=True)
         status = None
         for key, value in query:
             if key == 'status':
diff --git a/test/www/url-encoding.py b/test/www/url-encoding.py
index 300dfdc..5fa2ffd 100644
--- a/test/www/url-encoding.py
+++ b/test/www/url-encoding.py
@@ -1,6 +1,6 @@
 # -*- encoding: utf-8 -*-
-import urlparse
-from cStringIO import StringIO
+import urllib.parse
+from io import StringIO
 import time
 
 def html_esc(s):
@@ -11,7 +11,7 @@ def do_response(req, body, code=200, headers={}):
     req.send_header('Content-Length', str(len(body)))
     if 'Content-Type' not in headers:
         req.send_header('Content-Type', 'text/html')
-    for k, v in headers.items():
+    for k, v in list(headers.items()):
         if k != 'Content-Length':
             req.send_header(k, v)
     req.end_headers()
@@ -23,7 +23,7 @@ def do_redirect(req, target):
         code=302, headers={ 'Location': target })
 
 def handle_request(req):
-    url = urlparse.urlparse(req.path)
+    url = urllib.parse.urlparse(req.path)
 
     # This handler returns one of several different documents,
     # depending on the query string.  Many of the URLs involved contain
-- 
2.46.1

