From 2deb75c33a1f6028ced27e5699d8358b8ea11a4d Mon Sep 17 00:00:00 2001
From: Paolo Valente <paolo.valente@linaro.org>
Date: Wed, 15 Mar 2017 10:51:39 +0100
Subject: [PATCH] BUGFIX: do not put a bfq_queue when forgetting it

If the entity associated with a bfq_queue becomes inactive both in
the real system and in the ideal system tracked by the internal
fair-queueing scheduler of BFQ, then the entity is 'forgotten'.
Unfortunately, the function that updates data structures so as
to forget the entity also executed a bfq_put_queue on the
bfq_queue. In some cases, this led to the bfq_queue being
freed, with the following instructions still accessing the
(freed) bfq_queue.

This commit fixes this issue by removing the above invocation of
bfq_put_queue. As a consequence, the bfq_queue associated with a
process is now freed only when the process terminates, or when
the bfq_queue is merged.

Signed-off-by: Paolo Valente <paolo.valente@linaro.org>
---
 block/bfq-sched.c | 15 +--------------
 1 file changed, 1 insertion(+), 14 deletions(-)

diff --git a/block/bfq-sched.c b/block/bfq-sched.c
index 2e9dc59..e210d70e 100644
--- a/block/bfq-sched.c
+++ b/block/bfq-sched.c
@@ -691,30 +691,17 @@ static void bfq_idle_insert(struct bfq_service_tree *st,
 }
 
 /**
- * bfq_forget_entity - remove an entity from the wfq trees.
+ * bfq_forget_entity - do not consider entity anymore when computing schedule
  * @st: the service tree.
  * @entity: the entity being removed.
- *
- * Update the device status and forget everything about @entity, putting
- * the device reference to it, if it is a queue.  Entities belonging to
- * groups are not refcounted.
  */
 static void bfq_forget_entity(struct bfq_service_tree *st,
 			      struct bfq_entity *entity)
 {
-	struct bfq_queue *bfqq = bfq_entity_to_bfqq(entity);
-	struct bfq_sched_data *sd;
-
 	BUG_ON(!entity->on_st);
 
 	entity->on_st = false;
 	st->wsum -= entity->weight;
-	if (bfqq) {
-		sd = entity->sched_data;
-		bfq_log_bfqq(bfqq->bfqd, bfqq, "forget_entity: %p %d",
-			     bfqq, bfqq->ref);
-		bfq_put_queue(bfqq);
-	}
 }
 
 /**
-- 
2.10.0

