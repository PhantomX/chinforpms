From: Filipe Manana <fdmanana@suse.com>
Date: Tue, 18 Oct 2016 15:02:08 +0100
Patch-mainline: Not yet, used for debugging issues in openqa only
References: bsc#990384
Subject: [PATCH] Btrfs: fix extent tree corruption due to relocation

When dropping a subtree of a relocation tree, if the node used as the root
for that subtree is pointed to by multiple trees (snapshots), we ended up
dropping the owner's (and last) reference on that node if we attempted to
drop the subtree through a root for which we have not COWed after dropped
that subtree for all the roots for which the node was COWed. So make sure
this does not happen by not going through subtrees for which their root
node does not have the BTRFS_BLOCK_FLAG_FULL_BACKREF flag set.

Signed-off-by: Filipe Manana <fdmanana@suse.com>
---
 fs/btrfs/extent-tree.c | 24 +++++++++++++++++++++++-
 1 file changed, 23 insertions(+), 1 deletion(-)

diff --git a/fs/btrfs/extent-tree.c b/fs/btrfs/extent-tree.c
index 09908a6..0398cfc 100644
--- a/fs/btrfs/extent-tree.c
+++ b/fs/btrfs/extent-tree.c
@@ -8374,6 +8374,16 @@ static noinline int walk_down_proc(struct btrfs_trans_handle *trans,
 		if (wc->refs[level] > 1)
 			return 1;
 
+		/*
+		 * If this is for_reloc then we want to stop if the current
+		 * block doesn't have FULL_BACKREF set, which means that we
+		 * never cow'ed down to this block from the owner or from the
+		 * reloc_root, so we don't need to do anything for it.
+		 */
+		if (wc->for_reloc &&
+		    !(wc->flags[level] & BTRFS_BLOCK_FLAG_FULL_BACKREF))
+			return 1;
+
 		if (path->locks[level] && !wc->keep_locks) {
 			btrfs_tree_unlock_rw(eb, path->locks[level]);
 			path->locks[level] = 0;
@@ -8633,7 +8643,19 @@ static noinline int walk_up_proc(struct btrfs_trans_handle *trans,
 	/* wc->stage == DROP_REFERENCE */
 	BUG_ON(wc->refs[level] > 1 && !path->locks[level]);
 
-	if (wc->refs[level] == 1) {
+	/*
+	 * This is tricky because if we are doing drop_subtree we could stumble
+	 * across a block that we haven't actually touched either via the reloc
+	 * root or the owner root, which means that we would drop the owner
+	 * root's ref when it still refers to that block.  So if we are
+	 * for_reloc and the flags are not FLLL_BACKREF then we shouldn't do
+	 * anything to this blocks children.  However if FULL_BACKREF is in fact
+	 * set and we are free'ing this block then we definitely want to drop
+	 * the references for its children.
+	 */
+	if (wc->refs[level] == 1 &&
+	    (!wc->for_reloc ||
+	     (wc->flags[level] & BTRFS_BLOCK_FLAG_FULL_BACKREF))) {
 		if (level == 0) {
 			if (wc->flags[level] & BTRFS_BLOCK_FLAG_FULL_BACKREF)
 				ret = btrfs_dec_ref(trans, root, eb, 1);
-- 
1.8.4.5

