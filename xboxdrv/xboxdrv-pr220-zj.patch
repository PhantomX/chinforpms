From c4eb98993f6a7448ae693c7712205d23fc5f32e6 Mon Sep 17 00:00:00 2001
From: James Le Cuirot <chewi@gentoo.org>
Date: Tue, 27 Dec 2016 22:52:49 +0000
Subject: [PATCH 1/3] Fix crash by making USBController::parse() a non-pure
 virtual

parse() is indirectly called by the destructor, which is not allowed
when it is pure virtual, causing a "pure virtual function called"
crash.

We don't care about parsing when the controller instance is about to
be destroyed so define a dummy method in the base case.
---
 src/usb_controller.cpp | 7 +++++++
 src/usb_controller.hpp | 2 +-
 2 files changed, 8 insertions(+), 1 deletion(-)

diff --git a/src/usb_controller.cpp b/src/usb_controller.cpp
index e8ac104..031c748 100644
--- a/src/usb_controller.cpp
+++ b/src/usb_controller.cpp
@@ -123,6 +123,13 @@ USBController::get_name() const
   return m_name;
 }
 
+bool
+USBController::parse(uint8_t* data, int len, XboxGenericMsg* msg_out)
+{
+  // dummy method for destructor
+  return false;
+}
+
 void
 USBController::usb_submit_read(int endpoint, int len)
 {
diff --git a/src/usb_controller.hpp b/src/usb_controller.hpp
index d7ce628..94506d2 100644
--- a/src/usb_controller.hpp
+++ b/src/usb_controller.hpp
@@ -47,7 +47,7 @@ public:
   virtual std::string get_usbid() const;
   virtual std::string get_name() const;
 
-  virtual bool parse(uint8_t* data, int len, XboxGenericMsg* msg_out) =0;
+  virtual bool parse(uint8_t* data, int len, XboxGenericMsg* msg_out);
 
   int  usb_find_ep(int direction, uint8_t if_class, uint8_t if_subclass, uint8_t if_protocol);
 
-- 
2.43.0


From e303d08be5ac286911107bb3248ba198d5926e8c Mon Sep 17 00:00:00 2001
From: James Le Cuirot <chewi@gentoo.org>
Date: Tue, 27 Dec 2016 22:58:32 +0000
Subject: [PATCH 2/3] Refactor USBController::on_read_data with a switch
 statement

---
 src/usb_controller.cpp | 69 ++++++++++++++++++++----------------------
 1 file changed, 32 insertions(+), 37 deletions(-)

diff --git a/src/usb_controller.cpp b/src/usb_controller.cpp
index 031c748..71e7626 100644
--- a/src/usb_controller.cpp
+++ b/src/usb_controller.cpp
@@ -251,48 +251,43 @@ USBController::on_read_data(libusb_transfer* transfer)
 {
   assert(transfer);
 
-  if (transfer->status == LIBUSB_TRANSFER_COMPLETED)
+  switch(transfer->status)
   {
-    // process data
-    XboxGenericMsg msg;
-    if (parse(transfer->buffer, transfer->actual_length, &msg))
-    {
-      submit_msg(msg);
-    }
+    case LIBUSB_TRANSFER_COMPLETED:
+      // process data
+      XboxGenericMsg msg;
+      if (parse(transfer->buffer, transfer->actual_length, &msg))
+      {
+        submit_msg(msg);
+      }
 
-    int ret;
-    ret = libusb_submit_transfer(transfer);
-    if (ret != LIBUSB_SUCCESS) // could also check for LIBUSB_ERROR_NO_DEVICE
-    {
-      log_error("failed to resubmit USB transfer: " << usb_strerror(ret));
+      int ret;
+      ret = libusb_submit_transfer(transfer);
+      if (ret != LIBUSB_SUCCESS) // could also check for LIBUSB_ERROR_NO_DEVICE
+      {
+          log_error("failed to resubmit USB transfer: " << usb_strerror(ret));
+          m_transfers.erase(transfer);
+          libusb_free_transfer(transfer);
+          send_disconnect();
+      }
+      break;
+
+    case LIBUSB_TRANSFER_CANCELLED:
+      m_transfers.erase(transfer);
+      libusb_free_transfer(transfer);
+      break;
+
+    case LIBUSB_TRANSFER_NO_DEVICE:
       m_transfers.erase(transfer);
       libusb_free_transfer(transfer);
       send_disconnect();
-    }
-  }
-  else if (transfer->status == LIBUSB_TRANSFER_CANCELLED)
-  {
-    m_transfers.erase(transfer);
-    libusb_free_transfer(transfer);
-  }
-  else if (transfer->status == LIBUSB_TRANSFER_NO_DEVICE)
-  {
-    m_transfers.erase(transfer);
-    libusb_free_transfer(transfer);
-    send_disconnect();
-  }
-  else if (transfer->status == LIBUSB_TRANSFER_ERROR)
-  {
-    m_transfers.erase(transfer);
-    libusb_free_transfer(transfer);
-    send_disconnect();
-  }
-  else
-  {
-    log_error("USB read failure: " << transfer->length << ": " << usb_transfer_strerror(transfer->status));
-    m_transfers.erase(transfer);
-    libusb_free_transfer(transfer);
-    send_disconnect();
+      break;
+
+    default:
+      log_error("USB read failure: " << transfer->length << ": " << usb_transfer_strerror(transfer->status));
+      m_transfers.erase(transfer);
+      libusb_free_transfer(transfer);
+      break;
   }
 }
 
-- 
2.43.0


From bf47df14e34c9d95b957dc1b7b790bc14ba7cc5d Mon Sep 17 00:00:00 2001
From: James Le Cuirot <chewi@gentoo.org>
Date: Tue, 27 Dec 2016 23:00:21 +0000
Subject: [PATCH 3/3] Fix USBController destructor hang with m_is_disconnected
 flag

Now that the destructor crash is fixed, it hangs instead. The crash
has probably always masked this issue. I don't understand libusb much
as it isn't well documented but it seems that by the time we check
that all transfers have been cancelled, new ones have already been
submitted. Setting m_is_disconnected to true beforehand to indicate we
are destructing appears to remedy this.
---
 src/usb_controller.cpp | 24 +++++++++++++++++++-----
 1 file changed, 19 insertions(+), 5 deletions(-)

diff --git a/src/usb_controller.cpp b/src/usb_controller.cpp
index 71e7626..69093d6 100644
--- a/src/usb_controller.cpp
+++ b/src/usb_controller.cpp
@@ -79,19 +79,25 @@ USBController::USBController(libusb_device* dev) :
 
 USBController::~USBController()
 {
+  m_is_disconnected = true;
+
   // cancel all transfers
   for(std::set<libusb_transfer*>::iterator it = m_transfers.begin(); it != m_transfers.end(); ++it)
   {
     libusb_cancel_transfer(*it);
   }
 
+  struct timeval to;
+  to.tv_sec = 1;
+  to.tv_usec = 0;
+
   // wait for cancel to succeed
   while (!m_transfers.empty())
   {
-    int ret = libusb_handle_events(NULL);
+    int ret = libusb_handle_events_timeout_completed(NULL, &to, NULL);
     if (ret != 0)
     {
-      log_error("libusb_handle_events() failure: " << ret);
+      log_error("libusb_handle_events_timeout_completed() failure: " << ret);
     }
   }
 
@@ -261,14 +267,22 @@ USBController::on_read_data(libusb_transfer* transfer)
         submit_msg(msg);
       }
 
-      int ret;
-      ret = libusb_submit_transfer(transfer);
-      if (ret != LIBUSB_SUCCESS) // could also check for LIBUSB_ERROR_NO_DEVICE
+      if (m_is_disconnected)
+      {
+        m_transfers.erase(transfer);
+        libusb_free_transfer(transfer);
+      }
+      else
       {
+        int ret;
+        ret = libusb_submit_transfer(transfer);
+        if (ret != LIBUSB_SUCCESS) // could also check for LIBUSB_ERROR_NO_DEVICE
+        {
           log_error("failed to resubmit USB transfer: " << usb_strerror(ret));
           m_transfers.erase(transfer);
           libusb_free_transfer(transfer);
           send_disconnect();
+        }
       }
       break;
 
-- 
2.43.0

