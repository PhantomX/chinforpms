Index: smtube/src/browserwindow.cpp
===================================================================
--- smtube/src/browserwindow.cpp	(revisão 9216)
+++ smtube/src/browserwindow.cpp	(revisão 9217)
@@ -651,7 +651,7 @@
 	settings->setValue("playback_resolution", preferred_resolution);
 	settings->setValue("user_agent", ryu->userAgent());
 	settings->setValue("use_https_main", ryu->useHttpsMain());
-	settings->setValue("use_https_vi", ryu->useHttpsVi());
+	//settings->setValue("use_https_vi", ryu->useHttpsVi());
 
 #ifdef D_BUTTON
 	settings->setValue("add_download_button", add_download_button);
@@ -708,7 +708,7 @@
 	preferred_resolution = settings->value("playback_resolution", RetrieveYoutubeUrl::R360p).toInt();
 	ryu->setUserAgent(settings->value("user_agent", "").toString());
 	ryu->setUseHttpsMain(settings->value("use_https_main", false).toBool());
-	ryu->setUseHttpsVi(settings->value("use_https_vi", false).toBool());
+	//ryu->setUseHttpsVi(settings->value("use_https_vi", false).toBool());
 
 #ifdef D_BUTTON
 	add_download_button = settings->value("add_download_button", false).toBool();
Index: smtube/src/retrieveyoutubeurl.cpp
===================================================================
--- smtube/src/retrieveyoutubeurl.cpp	(revisão 9216)
+++ smtube/src/retrieveyoutubeurl.cpp	(revisão 9217)
@@ -51,9 +51,9 @@
 #endif
 	, preferred_resolution(R720p)
 	, use_https_main(false)
-	, use_https_vi(false)
 #ifdef YT_DASH_SUPPORT
 	, use_dash(false)
+	, use_60fps(false)
 #endif
 {
 	clearData();
@@ -215,9 +215,8 @@
 void RetrieveYoutubeUrl::fetchVideoInfoPage(const QString & url) {
 	QString video_id = getVideoID(url);
 
-	QString scheme = use_https_vi ? "https" : "http";
-	QString u = QString("%2://www.youtube.com/get_video_info?video_id=%1&disable_polymer=true&eurl=https://youtube.googleapis.com/v/%1&gl=US&hl=en").arg(video_id).arg(scheme);
-	qDebug() << "RetrieveYoutubeUrl::fetchVideoInfoPage: url:" << url;
+	QString u = QString("https://www.youtube.com/get_video_info?video_id=%1&disable_polymer=true&eurl=https://youtube.googleapis.com/v/%1&gl=US&hl=en").arg(video_id);
+	qDebug() << "RetrieveYoutubeUrl::fetchVideoInfoPage: url:" << u;
 
 	if (u.toLower().startsWith("https") && !QSslSocket::supportsSsl()) {
 		qDebug() << "RetrieveYoutubeUrl::fetchVideoInfoPage: no support for ssl";
@@ -333,6 +332,18 @@
 			return;
 		}
 	}
+
+	QRegExp manifest_rx("\\\\\"hlsManifestUrl\\\\\":\\\\\"(.*)\\\\\"");
+	manifest_rx.setMinimal(true);
+	if (manifest_rx.indexIn(replyString) != -1) {
+		QString manifest_url = QUrl::fromPercentEncoding(manifest_rx.cap(1).toLatin1()).replace("\\/", "/");
+		qDebug() << "RetrieveYoutubeUrl::processVideoPage:" << manifest_url;
+
+		if (!manifest_url.isEmpty()) {
+			fetchStreamPage(manifest_url);
+			return;
+		}
+	}
 #endif
 
 	QString fmtArray;
@@ -519,7 +530,7 @@
 	setUrlMap(url_map);
 
 	#ifdef YT_DASH_SUPPORT
-	selected_quality = findPreferredResolution(url_map, preferred_resolution, use_dash);
+	selected_quality = findPreferredResolution(url_map, preferred_resolution, use_dash, use_60fps);
 	#else
 	selected_quality = findPreferredResolution(url_map, preferred_resolution);
 	#endif
@@ -563,6 +574,20 @@
 }
 #endif
 
+OptMap RetrieveYoutubeUrl::extractOptions(const QByteArray & urldata) {
+	OptMap data;
+	QList<QByteArray> l = urldata.split('&');
+	foreach(QByteArray o, l) {
+		QList<QByteArray> p = o.split('=');
+		if (p.count() > 1) {
+			QString tag = QUrl::fromPercentEncoding(p[0]);
+			QString value = QUrl::fromPercentEncoding(p[1]);
+			data[tag] = value;
+		}
+	}
+	return data;
+}
+
 UrlMap RetrieveYoutubeUrl::extractURLs(QString fmtArray, bool allow_https, bool use_player) {
 	UrlMap url_map;
 
@@ -578,40 +603,37 @@
 	//qDebug() << "RetrieveYoutubeUrl::extractURLs: codeList.count:" << codeList.count();
 
 	foreach(QByteArray code, codeList) {
-		code = QUrl::fromPercentEncoding(code).toLatin1();
 		//qDebug() << "RetrieveYoutubeUrl::extractURLs: code:" << code;
+		OptMap opt_map = extractOptions(code);
+		//qDebug() << "RetrieveYoutubeUrl::extractURLs: opt_map:" << opt_map;
 
-		QUrl line;
-		#if QT_VERSION >= 0x050000
-		q->setQuery(code);
-		#else
-		QUrl * q = &line;
-		q->setEncodedQuery(code);
-		#endif
+		if (opt_map.contains("url")) {
+			QUrl url(opt_map["url"]);
+			//qDebug() << "RetrieveYoutubeUrl::extractURLs: url:" << url;
 
-		if (q->hasQueryItem("url")) {
-			QUrl url( q->queryItemValue("url") );
-			line.setScheme(url.scheme());
-			line.setHost(url.host());
-			line.setPath(url.path());
-			q->removeQueryItem("url");
 			#if QT_VERSION >= 0x050000
-			q->setQuery( q->query(QUrl::FullyDecoded) + "&" + url.query(QUrl::FullyDecoded) );
+			q->setQuery(url.query(QUrl::FullyDecoded));
 			#else
-			q->setEncodedQuery( q->encodedQuery() + "&" + url.encodedQuery() );
+			QUrl * q = &url;
 			#endif
 
-			if (q->hasQueryItem("sig")) {
-				q->addQueryItem("signature", q->queryItemValue("sig"));
-				q->removeQueryItem("sig");
+			QString signature_name = "signature";
+			if (opt_map.contains("sp")) {
+				signature_name = opt_map["sp"];
+				//qDebug() << "RetrieveYoutubeUrl::extractURLs: signature field:" << signature_name;
 			}
+
+			if (opt_map.contains("sig")) {
+				q->addQueryItem(signature_name, opt_map["sig"]);
+			}
 			else
-			if (q->hasQueryItem("s")) {
+			if (opt_map.contains("s")) {
 				#ifdef YT_USE_SIG
 				QString player = sig.html5_player;
-				QString signature = aclara(q->queryItemValue("s"), use_player ? player : QString::null);
+				QString enc_sig = opt_map["s"];
+				QString signature = aclara(enc_sig, use_player ? player : QString::null);
 				if (!signature.isEmpty()) {
-					q->addQueryItem("signature", signature);
+					q->addQueryItem(signature_name, signature);
 				} else {
 					failed_to_decrypt_signature = true;
 				}
@@ -626,7 +648,14 @@
 
 			if (!q->hasQueryItem("ratebypass")) q->addQueryItem("ratebypass", "yes");
 
-			if ((q->hasQueryItem("itag")) && (q->hasQueryItem("signature"))) {
+			if (opt_map.contains("clen")) {
+				if (opt_map["clen"] == "0") {
+					qDebug() << "RetrieveYoutubeUrl::extractURLs: discarted url with empty clen";
+					continue;
+				}
+			}
+
+			if ((q->hasQueryItem("itag")) /*&& (q->hasQueryItem(signature_name))*/) {
 				QString itag = q->queryItemValue("itag");
 
 				// Remove duplicated queries
@@ -637,6 +666,7 @@
 					q->addQueryItem(item.first, item.second);
 				}
 
+				QUrl line = url;
 				#if QT_VERSION >= 0x050000
 				line.setQuery(q->query(QUrl::FullyDecoded));
 				#endif
@@ -669,7 +699,7 @@
 	return None;
 }
 
-RetrieveYoutubeUrl::Quality RetrieveYoutubeUrl::findPreferredResolution(const UrlMap & url_map, Resolution res, bool use_dash) {
+RetrieveYoutubeUrl::Quality RetrieveYoutubeUrl::findPreferredResolution(const UrlMap & url_map, Resolution res, bool use_dash, bool use_60fps) {
 	Quality chosen_quality = None;
 
 	QList<Quality> l2160p, l1440p, l1080p, l720p, l480p, l360p, l240p;
@@ -694,12 +724,12 @@
 		l2160p << DASH_VIDEO_WEBM_2160p60hdr;
 		#endif
 
-		#if 0
-		l720p << DASH_VIDEO_720p60 << DASH_VIDEO_WEBM_720p60;
-		l1080p << DASH_VIDEO_1080p60 << DASH_VIDEO_WEBM_1080p60;
-		l1440p << DASH_VIDEO_WEBM_1440p60;
-		l2160p << DASH_VIDEO_WEBM_2160p60;
-		#endif
+		if (use_60fps) {
+			l720p << DASH_VIDEO_720p60 << DASH_VIDEO_WEBM_720p60;
+			l1080p << DASH_VIDEO_1080p60 << DASH_VIDEO_WEBM_1080p60;
+			l1440p << DASH_VIDEO_WEBM_1440p60;
+			l2160p << DASH_VIDEO_WEBM_2160p60;
+		}
 
 		l2160p << DASH_VIDEO_2160p << DASH_VIDEO_2160p2 << DASH_VIDEO_WEBM_2160p << DASH_VIDEO_WEBM_2160p2;
 		l1440p << DASH_VIDEO_1440p << DASH_VIDEO_WEBM_1440p;
Index: smtube/src/retrieveyoutubeurl.h
===================================================================
--- smtube/src/retrieveyoutubeurl.h	(revisão 9216)
+++ smtube/src/retrieveyoutubeurl.h	(revisão 9217)
@@ -38,6 +38,7 @@
 #endif
 
 typedef QMap<int,QString> UrlMap;
+typedef QMap<QString,QString> OptMap;
 
 class RetrieveYoutubeUrl : public QObject
 {
@@ -125,6 +126,9 @@
 	void setUseDASH(bool b) { use_dash = b; }
 	bool useDASH() { return use_dash; }
 
+	void enable60fps(bool b) { use_60fps = b; }
+	bool is60fpsEnabled() { return use_60fps; }
+
 	QString selectedAudioUrl() { return selected_audio_url; }
 	Quality selectedAudioQuality() { return selected_audio_quality; }
 	#endif
@@ -135,9 +139,7 @@
 	QString fullUrl(const QString & url);
 
 	void setUseHttpsMain(bool b) { use_https_main = b; };
-	void setUseHttpsVi(bool b) { use_https_vi = b; };
 	bool useHttpsMain() { return use_https_main; };
-	bool useHttpsVi() { return use_https_vi; };
 
 	static QString extensionForItag(int itag);
 
@@ -183,6 +185,7 @@
 	void setUrlMap(const UrlMap & map) { urlmap = map; }
 
 	QString getVideoID(QString video_url);
+	OptMap extractOptions(const QByteArray & urldata);
 	UrlMap extractURLs(QString fmtArray, bool allow_https, bool use_player);
 
 	void finish(const UrlMap & url_map);
@@ -192,7 +195,7 @@
 	#endif
 
 	static Quality findResolution(const UrlMap & url_map, QList<Quality> l);
-	static Quality findPreferredResolution(const UrlMap & url_map, Resolution res, bool use_dash = false);
+	static Quality findPreferredResolution(const UrlMap & url_map, Resolution res, bool use_dash = false, bool use_60fps = false);
 	#ifdef YT_DASH_SUPPORT
 	static Quality findBestAudio(const QMap<int, QString>& url_map);
 	#endif
@@ -220,7 +223,6 @@
 	Resolution preferred_resolution;
 
 	bool use_https_main;
-	bool use_https_vi;
 
 	QString yt_url;
 	QString url_title;
@@ -232,6 +234,7 @@
 	QString selected_audio_url;
 	Quality selected_audio_quality;
 	bool use_dash;
+	bool use_60fps;
 	#endif
 
 	UrlMap urlmap;
Index: smtube/src/sig.cpp
===================================================================
--- smtube/src/sig.cpp	(revisão 9216)
+++ smtube/src/sig.cpp	(revisão 9217)
@@ -33,7 +33,7 @@
 	QString p = player_name.toUtf8().toBase64();
 	return QString("http://updates.smplayer.info/ytsig/?e=%1&c=1").arg(p);
 #else
-	return QString("http://s.ytimg.com/yts/jsbin/%1/base.js").arg(player_name);
+	return QString("http://www.youtube.com/yts/jsbin/%1/base.js").arg(player_name);
 #endif
 }
 
@@ -103,13 +103,10 @@
 	qDebug() << "Sig::findFunctions: sts:" << sts;
 
 	QString sig_name;
-	//QRegExp rx_sig("\\.sig\\|\\|([a-zA-Z0-9\\$]+)\\(");
-	//QRegExp rx_sig("([\"\'])signature\\1\\s*,\\s*([a-zA-Z0-9$]+)\\(");
-	QRegExp rx_sig("yt\\.akamaized\\.net\\/\\).*\\.set\\(.*,([a-zA-Z0-9$]+)\\(");
+	QRegExp rx_sig("akamaized\\.net.*encodeURIComponent\\((.*)\\(");
 	rx_sig.setMinimal(true);
 	if (rx_sig.indexIn(text) != -1) {
 		sig_name = rx_sig.cap(1);
-		//sig_name = rx_sig.cap(2);
 	}
 	qDebug() << "Sig::findFunctions: sig_name:" << sig_name;
 
@@ -201,7 +198,11 @@
 #ifdef SIG_USE_JSCODE
 QString Sig::aclaraJS(const QString & signature) {
 	int dot = signature.indexOf('.');
-	qDebug("Sig::aclaraJS: length: %d (%d.%d)", signature.size(), dot, signature.size()-dot-1);
+	if (dot != -1) {
+		qDebug("Sig::aclaraJS: length: %d (%d.%d)", signature.size(), dot, signature.size()-dot-1);
+	} else {
+		qDebug("Sig::aclaraJS: length: %d", signature.size());
+	}
 
 	QString res;
 
@@ -240,7 +241,11 @@
 
 QString Sig::aclaraNoJS(const QString & signature) {
 	int dot = signature.indexOf('.');
-	qDebug("Sig::aclaraNoJS: length: %d (%d.%d)", signature.size(), dot, signature.size()-dot-1);
+	if (dot != -1) {
+		qDebug("Sig::aclaraNoJS: length: %d (%d.%d)", signature.size(), dot, signature.size()-dot-1);
+	} else {
+		qDebug("Sig::aclaraNoJS: length: %d", signature.size());
+	}
 
 	QString s = signature;
 
Index: smtube/src/ytsig.cpp
===================================================================
--- smtube/src/ytsig.cpp	(revisão 9216)
+++ smtube/src/ytsig.cpp	(revisão 9217)
@@ -98,10 +98,3 @@
 
 	}
 }
-
-void YTSig::check(QString & u) {
-	if (!parsed_ts.isEmpty()) {
-		u.append(QString("&%1").arg(parsed_ts));
-	}
-}
-
Index: smtube/src/ytsig.h
===================================================================
--- smtube/src/ytsig.h	(revisão 9216)
+++ smtube/src/ytsig.h	(revisão 9217)
@@ -25,10 +25,8 @@
 {
 public:
 	static QString aclara(const QString & text, const QString & player = "", const QString & function_name = QString::null);
-
-	static void check(QString & u);
-
 	static void setScriptFile(const QString & f) { script_filename = f; reloadScriptFile(); };
+	static QString parsed_ts;
 
 private:
 	static QString script;
@@ -35,9 +33,6 @@
 	static QString default_script;
 	static QString script_filename;
 	static void reloadScriptFile();
-
-private:
-	static QString parsed_ts;
 };
 
 #endif
