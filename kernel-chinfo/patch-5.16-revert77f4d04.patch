From 77f4d04971afd67990d04174c971a74bd2bd1fc9 Mon Sep 17 00:00:00 2001
From: Fedora Kernel Team <kernel-team@fedoraproject.org>
Date: Mon, 8 Mar 2021 10:29:25 -0300
Subject: [PATCH] patch-5.15-revert77f4d04

---
--- b/drivers/char/random.c
+++ a/drivers/char/random.c
@@ -335,7 +335,6 @@
 #include <linux/syscalls.h>
 #include <linux/completion.h>
 #include <linux/uuid.h>
-#include <linux/rcupdate.h>
 #include <crypto/chacha.h>
 #include <crypto/sha1.h>
 
@@ -350,11 +349,6 @@
 
 /* #define ADD_INTERRUPT_BENCH */
 
-/*
- * Hook for external RNG.
- */
-static const struct random_extrng __rcu *extrng;
-
 /*
  * Configuration information
  */
@@ -487,9 +481,6 @@
 module_param_named(ratelimit_disable, ratelimit_disable, int, 0644);
 MODULE_PARM_DESC(ratelimit_disable, "Disable random ratelimit suppression");
 
-static const struct file_operations extrng_random_fops;
-static const struct file_operations extrng_urandom_fops;
-
 /**********************************************************************
  *
  * OS independent entropy store.   Here are the functions which handle
@@ -1867,13 +1858,6 @@
 	return mask;
 }
 
-static __poll_t
-extrng_poll(struct file *file, poll_table * wait)
-{
-	/* extrng pool is always full, always read, no writes */
-	return EPOLLIN | EPOLLRDNORM;
-}
-
 static int
 write_pool(struct entropy_store *r, const char __user *buffer, size_t count)
 {
@@ -1977,58 +1961,7 @@
 	return fasync_helper(fd, filp, on, &fasync);
 }
 
-static int random_open(struct inode *inode, struct file *filp)
-{
-	const struct random_extrng *rng;
-
-	rcu_read_lock();
-	rng = rcu_dereference(extrng);
-	if (rng && !try_module_get(rng->owner))
-		rng = NULL;
-	rcu_read_unlock();
-
-	if (!rng)
-		return 0;
-
-	filp->f_op = &extrng_random_fops;
-	filp->private_data = rng->owner;
-
-	return 0;
-}
-
-static int urandom_open(struct inode *inode, struct file *filp)
-{
-	const struct random_extrng *rng;
-
-	rcu_read_lock();
-	rng = rcu_dereference(extrng);
-	if (rng && !try_module_get(rng->owner))
-		rng = NULL;
-	rcu_read_unlock();
-
-	if (!rng)
-		return 0;
-
-	filp->f_op = &extrng_urandom_fops;
-	filp->private_data = rng->owner;
-
-	return 0;
-}
-
-static int extrng_release(struct inode *inode, struct file *filp)
-{
-	module_put(filp->private_data);
-	return 0;
-}
-
-static ssize_t
-extrng_read(struct file *file, char __user *buf, size_t nbytes, loff_t *ppos)
-{
-	return rcu_dereference_raw(extrng)->extrng_read(buf, nbytes);
-}
-
 const struct file_operations random_fops = {
-	.open  = random_open,
 	.read  = random_read,
 	.write = random_write,
 	.poll  = random_poll,
@@ -2039,7 +1972,6 @@
 };
 
 const struct file_operations urandom_fops = {
-	.open  = urandom_open,
 	.read  = urandom_read,
 	.write = random_write,
 	.unlocked_ioctl = random_ioctl,
@@ -2048,31 +1980,9 @@
 	.llseek = noop_llseek,
 };
 
-static const struct file_operations extrng_random_fops = {
-	.open  = random_open,
-	.read  = extrng_read,
-	.write = random_write,
-	.poll  = extrng_poll,
-	.unlocked_ioctl = random_ioctl,
-	.fasync = random_fasync,
-	.llseek = noop_llseek,
-	.release = extrng_release,
-};
-
-static const struct file_operations extrng_urandom_fops = {
-	.open  = urandom_open,
-	.read  = extrng_read,
-	.write = random_write,
-	.unlocked_ioctl = random_ioctl,
-	.fasync = random_fasync,
-	.llseek = noop_llseek,
-	.release = extrng_release,
-};
-
 SYSCALL_DEFINE3(getrandom, char __user *, buf, size_t, count,
 		unsigned int, flags)
 {
-	const struct random_extrng *rng;
 	int ret;
 
 	if (flags & ~(GRND_NONBLOCK|GRND_RANDOM|GRND_INSECURE))
@@ -2088,18 +1998,6 @@
 	if (count > INT_MAX)
 		count = INT_MAX;
 
-	rcu_read_lock();
-	rng = rcu_dereference(extrng);
-	if (rng && !try_module_get(rng->owner))
-		rng = NULL;
-	rcu_read_unlock();
-
-	if (rng) {
-		ret = rng->extrng_read(buf, count);
-		module_put(rng->owner);
-		return ret;
-	}
-
 	if (!(flags & GRND_INSECURE) && !crng_ready()) {
 		if (flags & GRND_NONBLOCK)
 			return -EAGAIN;
@@ -2405,16 +2303,3 @@
 		add_device_randomness(buf, size);
 }
 EXPORT_SYMBOL_GPL(add_bootloader_randomness);
-
-void random_register_extrng(const struct random_extrng *rng)
-{
-	rcu_assign_pointer(extrng, rng);
-}
-EXPORT_SYMBOL_GPL(random_register_extrng);
-
-void random_unregister_extrng(void)
-{
-	RCU_INIT_POINTER(extrng, NULL);
-	synchronize_rcu();
-}
-EXPORT_SYMBOL_GPL(random_unregister_extrng);
reverted:
--- b/include/linux/random.h
+++ a/include/linux/random.h
@@ -14,11 +14,6 @@
 
 #include <uapi/linux/random.h>
 
-struct random_extrng {
-	ssize_t (*extrng_read)(void __user *buf, size_t buflen);
-	struct module *owner;
-};
-
 struct random_ready_callback {
 	struct list_head list;
 	void (*func)(struct random_ready_callback *rdy);
@@ -49,8 +44,6 @@
 extern int add_random_ready_callback(struct random_ready_callback *rdy);
 extern void del_random_ready_callback(struct random_ready_callback *rdy);
 extern int __must_check get_random_bytes_arch(void *buf, int nbytes);
-void random_register_extrng(const struct random_extrng *rng);
-void random_unregister_extrng(void);
 
 #ifndef MODULE
 extern const struct file_operations random_fops, urandom_fops;
