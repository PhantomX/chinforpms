# Only the variables listed in this file and ../Makefile.rhelver are available
# for command line modification.  There is no guarantee on the stability of
# variables found in this file, or any other redhat/ Makefile.
#
# Merge requests to include additional variables in _this_ file must include
# details of why the variable must be exported.

# Variables below should be changed as needed for building on a different
# branch, or with a different upstream branch. This should be the only
# file that needs to be changed now, and is included in redhat/Makefile
# and redhat/Makefile.common

# This appends 5 characters of the top-of-tree commit ID to the BUILD variable,
# which is then reflected in the package NVR.
ADD_COMMITID_TO_VERSION ?=

# This sets the incremental build version value in the rpm NVR.  If unset, this
# defaults to RHEL_RELEASE from Makefile.rhelver
BUILD ?=

# This sets the koji|brew build flags for the dist[g]-koji|brew targets.  These
# options are passed directly to the brew and koji commands in those targets.
BUILD_FLAGS ?=

# This sets the koji/brew configuration profile variable.
BUILD_PROFILE ?=

# This is the brew/koji scratch build target.  A list of targets can be found
# by executing the 'brew list-targets' or 'koji list-targets' command.  The
# default values can be found in redhat/Makefile and are dependent on the
# target OS.  The target OS can be changed by setting the DIST or DISTRO
# variables.
BUILD_TARGET ?=

# BUMP_RELEASE determines whether the pkgrelease is bumped when you call
# 'make dist-release'.  It should be set to "yes" if you expect to do
# multiple updates and builds without bumping the base version, and no
# when you expect every build to use a different base kernel version.
BUMP_RELEASE:=yes

# This is the dist release suffix used in the package release, eg. .fc34,
# .el8 etc. In a different branch this may be set to a fixed value.
DIST ?=

# This is the source branch that you are building out of typically this is
# the current branch.
DIST_BRANCH ?= "os-build"

# This is a human readable distribution variable that is used to determine the
# OS version (fedora, centos, or rhel).
DISTRO ?=

# This overrides CONFIG_WERROR to 'y' for all arches.  RHEL requires this variable to be set.
ENABLE_WERROR ?=

# This is the executable for 'git' commands.  It is used by the redhat/self-test
# tests to provide testing information on git hashes (see redhat/self-test/egit.sh)
GIT ?= git

# This is the referenced HEAD commit for git commands and can be used to change
# the "top of tree" commit ID.  This is useful in cases where users want to
# build against an older commit but do not want to check out the tree.
HEAD ?= HEAD

# INCLUDE_*_FILES determines whether or not the specific OS flavor files will
# be included as part of the source RPM.  Downstream projects, such as
# centos-stream or RHEL, can disable file inclusion by setting these values
# to '0'.
INCLUDE_FEDORA_FILES:=1
INCLUDE_RHEL_FILES:=1
INCLUDE_RT_FILES:=1

# This variable is the location of the KABI cross compilers
KABI_CROSS_COMPILE_PREFIX ?= /usr/bin/

# This variable is the suffix of the KABI cross compilers
KABI_CROSS_COMPILE_SUFFIX ?= -linux-gnu-

# This variable is a list of the arches that are protected under RHEL's KABI policy
KABI_SUPPORTED_ARCHS ?=

# This disables the CONFIG error checking in redhat/configs/process_configs.sh.
NO_CONFIGCHECKS ?=

# In case PATCHLIST_URL is not set to "none", Patchlist.changelog is added to
# the kernel src.rpm, which will contain shas and commits not upstream. The
# value of PATCHLIST_URL in this case should point to the git repository where
# the commits are located, and will be added as a prefix to the shas listed.
PATCHLIST_URL ?= "https://gitlab.com/cki-project/kernel-ark/-/commit"

# RELEASED_KERNEL swaps between the pre-release secureboot keys and
# the release one, for vmlinux signing. It also controls whether Fedora
# kernels are built as debug kernels or release kernels with a separate
# kernel-debug build.
# Set RELEASED_KERNEL to 1 when the upstream source tarball contains a
#  kernel release. (This includes prepatch or "rc" releases.)
# Set RELEASED_KERNEL to 0 when the upstream source tarball contains an
#  unreleased kernel development snapshot.
RELEASED_KERNEL:=0

# This variable is used by the redhat/self-tests.  It should not be
# considered stable and my be changed or removed without warning.
RHDISTDATADIR ?=

# This variable is the local dist-git clone, and is used when dist-git is updated.
RHDISTGIT_CACHE ?=

# This variable is the directory in which the dist-git repo is cloned into.  This
# can be changed to a different directory for performance reasons.
RHDISTGIT_TMP ?= /tmp

# This sets the base commit ID for distg-* targets, and must be set on the
# commandline with distg-* targets.
RHGITCOMMIT ?= $(HEAD)

# This overrides the default git repository for the distg-* targets.  See
# the 'make dist-full-help' entry for distg-brew for information on setting
# rhg.url.
RHGITURL ?= $(shell $(GIT) config rhg.url || $(GIT) config remote.origin.url)

# This sets the number of threads that scripts called by Makefile targets can
# use.  By default, this variable is set by the makefile '-j' parameter.
RHJOBS ?=

# This variable is only used to create self-test data.  It should not be
# considered stable and may be changed or removed without warning.
RHSELFTESTDATA ?=

# Use Gemini project versioning - $PACKAGE_NAME-A.B-C.$disttag
# A - major that introduced this kernel
# B - rebase number
# C - build number (X or X.Y.Z)
SPECGEMINI ?= 0

# If set to 1, this variable will cause the kernel package build to fail if
# the selftests fail to build.
SPECSELFTESTS_MUST_BUILD ?= 0

# This can be used to change the filename of the specfile.  For example, it can
# be set to "kernel" for kernel.spec or "kernel-rt" for kernel-rt.spec.  This
# is useful for other projects with different specfile names.
SPECPACKAGE_NAME ?= kernel

# The branch used as upstream. This is what the upstream tarball is it
# should be tracked in a local branch. This would be "master" for the
# Linus master branch or linux-5.x.y for a stable branch. It can also be
# any other upstream you have added as a branch locally.
UPSTREAM_BRANCH ?= master

# If VERSION_ON_UPSTREAM is set, the versioning of the rpm package is based
# on a branch tracking upstream. This allows for generating rpms
# based on untagged releases.
ifeq ($(SPECGEMINI),0)
  VERSION_ON_UPSTREAM:=1
else
  VERSION_ON_UPSTREAM:=0
endif

# Builds may include a s390x+zfcpdump arch build, which results in the build
# failing because the UTS_RELEASE field exceeded 64 chars.  This variable can
# be set to 1 to decrease the kernel UTS_RELEASE and SPECBUILD by 11 characters
# (YYYYMMDDgit).
UPSTREAMBUILD_GIT_ONLY ?=
