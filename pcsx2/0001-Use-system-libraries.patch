From b96ae31e1a234ae630116d7bddd7a260aceaad73 Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Sun, 22 May 2022 20:12:38 -0300
Subject: [PATCH] Use system libraries

---
 cmake/SearchForStuff.cmake                 | 89 +++++++++++++++++++++-
 pcsx2/CMakeLists.txt                       |  6 ++
 pcsx2/GS/GSDump.cpp                        |  4 +
 pcsx2/GS/GSLzma.cpp                        |  6 ++
 pcsx2/GS/Renderers/SW/GSNewCodeGenerator.h |  4 +-
 5 files changed, 105 insertions(+), 4 deletions(-)

diff --git a/cmake/SearchForStuff.cmake b/cmake/SearchForStuff.cmake
index d7131a3..41485fb 100644
--- a/cmake/SearchForStuff.cmake
+++ b/cmake/SearchForStuff.cmake
@@ -19,8 +19,8 @@ find_package(LZ4 REQUIRED)
 find_package(WebP REQUIRED) # v1.3.2, spews an error on Linux because no pkg-config.
 find_package(SDL3 3.2.6 REQUIRED)
 find_package(Freetype 2.12 REQUIRED)
-find_package(plutovg 1.1.0 REQUIRED)
-find_package(plutosvg 0.0.7 REQUIRED)
+find_package(plutovg 1.3.0)
+find_package(plutosvg 0.0.7)
 
 if(USE_VULKAN)
 	find_package(Shaderc REQUIRED)
@@ -78,33 +78,105 @@ endif()
 
 set(CMAKE_FIND_FRAMEWORK ${FIND_FRAMEWORK_BACKUP})
 
+find_package(FastFloat)
+if(FastFloat_FOUND)
+	message(STATUS "Using the system fast_float")
+	alias_library(fast_float FastFloat::fast_float)
+else()
 add_subdirectory(3rdparty/fast_float EXCLUDE_FROM_ALL)
+endif()
+find_package(ryml)
+if(ryml_FOUND)
+	message(STATUS "Using the system rapidyml")
+	alias_library(rapidyaml::rapidyaml ryml::ryml)
+else()
 add_subdirectory(3rdparty/rapidyaml EXCLUDE_FROM_ALL)
+endif()
+check_lib(LZMA lzmasdk-c)
+if(LZMA_FOUND)
+	alias_library(LZMA PkgConfig::LZMA)
+	add_library(LZMA::LZMA ALIAS PkgConfig::LZMA)
+	add_definitions("-D_SYSTEM_LZMA")
+else()
 add_subdirectory(3rdparty/lzma EXCLUDE_FROM_ALL)
+endif()
+check_lib(CHDR libchdr)
+if(CHDR_FOUND)
+	alias_library(libchdr PkgConfig::CHDR)
+else()
 add_subdirectory(3rdparty/libchdr EXCLUDE_FROM_ALL)
 disable_compiler_warnings_for_target(libchdr)
+endif()
+find_package(SoundTouch)
+if(SoundTouch_FOUND)
+	message(STATUS "Using the system soundtouch")
+	alias_library(soundtouch SoundTouch::SoundTouch)
+else()
 add_subdirectory(3rdparty/soundtouch EXCLUDE_FROM_ALL)
+endif()
 add_subdirectory(3rdparty/simpleini EXCLUDE_FROM_ALL)
+if (NOT plutovg_FOUND)
+check_lib(plutovg plutovg)
+	alias_library(plutovg::plutovg PkgConfig::plutovg)
+endif()
+if (NOT plutosvg_FOUND)
+check_lib(plutosvg plutosvg)
+	alias_library(plutosvg::plutosvg PkgConfig::plutosvg)
+endif()
 add_subdirectory(3rdparty/imgui EXCLUDE_FROM_ALL)
+check_lib(CPUINFO libcpuinfo)
+if(CPUINFO_FOUND)
+	alias_library(cpuinfo PkgConfig::CPUINFO)
+else()
 add_subdirectory(3rdparty/cpuinfo EXCLUDE_FROM_ALL)
 disable_compiler_warnings_for_target(cpuinfo)
+endif()
+find_package(libzip)
+if(libzip_FOUND)
+	message(STATUS "Using the system libzip")
+else()
 add_subdirectory(3rdparty/libzip EXCLUDE_FROM_ALL)
+endif()
 add_subdirectory(3rdparty/rcheevos EXCLUDE_FROM_ALL)
+pkg_search_module(rapidjson IMPORTED_TARGET RapidJSON)
+if(rapidjson_FOUND)
+	message(STATUS "Using the system rapidjson")
+	alias_library(rapidjson PkgConfig::rapidjson)
+else()
 add_subdirectory(3rdparty/rapidjson EXCLUDE_FROM_ALL)
+endif()
 add_subdirectory(3rdparty/discord-rpc EXCLUDE_FROM_ALL)
 add_subdirectory(3rdparty/freesurround EXCLUDE_FROM_ALL)
 
+find_package(xbyak)
+if(xbyak_FOUND)
+	message(STATUS "Using the system xbyak")
+	alias_library(xbyak xbyak::xbyak)
+endif()
+
 if(USE_OPENGL)
 	add_subdirectory(3rdparty/glad EXCLUDE_FROM_ALL)
 endif()
 
 if(USE_VULKAN)
+	find_package(VulkanHeaders)
+	if(VulkanHeaders_FOUND)
+		message(STATUS "Using the system vulkan-headers")
+		alias_library(vulkan-headers Vulkan::Headers)
+	else()
 	add_subdirectory(3rdparty/vulkan EXCLUDE_FROM_ALL)
+	endif()
 endif()
 
+find_package(cubeb)
+if(cubeb_FOUND)
+	message(STATUS "Using the system cubeb")
+	alias_library(cubeb cubeb::cubeb)
+else()
 add_subdirectory(3rdparty/cubeb EXCLUDE_FROM_ALL)
 disable_compiler_warnings_for_target(cubeb)
 disable_compiler_warnings_for_target(speex)
+endif()
 
 # Find the Qt components that we need.
 if(ENABLE_QT_UI)
@@ -132,14 +204,27 @@ add_subdirectory(3rdparty/ccc EXCLUDE_FROM_ALL)
 
 # Architecture-specific.
 if(_M_X86)
+if(DUMP_BLOCKS)
+find_package(zydis)
+	if(zydis_FOUND)
+		message(STATUS "Using the system Zydis")
+		alias_library(zydis Zydis::Zydis)
+	else()
 	add_subdirectory(3rdparty/zydis EXCLUDE_FROM_ALL)
+	endif()
+endif()
 elseif(_M_ARM64)
 	add_subdirectory(3rdparty/vixl EXCLUDE_FROM_ALL)
 endif()
 
 # Prevent fmt from being built with exceptions, or being thrown at call sites.
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DFMT_USE_EXCEPTIONS=0 -DFMT_USE_RTTI=0")
+find_package(fmt 11)
+if(fmt_FOUND)
+	message(STATUS "Using the system fmt")
+else()
 add_subdirectory(3rdparty/fmt EXCLUDE_FROM_ALL)
+endif()
 
 # Deliberately at the end. We don't want to set the flag on third-party projects.
 if(MSVC)
diff --git a/pcsx2/CMakeLists.txt b/pcsx2/CMakeLists.txt
index c66a27e..e17fb65 100644
--- a/pcsx2/CMakeLists.txt
+++ b/pcsx2/CMakeLists.txt
@@ -1064,7 +1064,9 @@ set(pcsx2LTOSources
 
 if(_M_X86)
 	list(APPEND pcsx2LTOSources ${pcsx2x86Sources} ${pcsx2x86Headers})
+	if(DUMP_BLOCKS)
 	target_link_libraries(PCSX2_FLAGS INTERFACE zydis)
+	endif()
 elseif(_M_ARM64)
 	list(APPEND pcsx2LTOSources ${pcsx2arm64Sources} ${pcsx2arm64Headers})
 	target_link_libraries(PCSX2_FLAGS INTERFACE vixl)
@@ -1194,7 +1196,11 @@ endif()
 
 # additonal include directories
 if(_M_X86)
+	if(TARGET xbyak::xbyak)
+		target_link_libraries(PCSX2_FLAGS INTERFACE xbyak::xbyak)
+	else()
 	target_include_directories(PCSX2_FLAGS INTERFACE "${CMAKE_SOURCE_DIR}/3rdparty/xbyak")
+	endif()
 	target_compile_definitions(PCSX2_FLAGS INTERFACE XBYAK_NO_EXCEPTION)
 endif()
 target_include_directories(PCSX2_FLAGS INTERFACE
diff --git a/pcsx2/GS/GSDump.cpp b/pcsx2/GS/GSDump.cpp
index ac4cb35..77db9f9 100644
--- a/pcsx2/GS/GSDump.cpp
+++ b/pcsx2/GS/GSDump.cpp
@@ -16,6 +16,10 @@
 #include <XzEnc.h>
 #include <zstd.h>
 
+#if defined(_SYSTEM_LZMA)
+#define CONTAINER_FROM_VTBL Z7_CONTAINER_FROM_VTBL
+#endif
+
 GSDumpBase::GSDumpBase(std::string fn)
 	: m_filename(std::move(fn))
 	, m_frames(0)
diff --git a/pcsx2/GS/GSLzma.cpp b/pcsx2/GS/GSLzma.cpp
index 01ea3f5..6f301a8 100644
--- a/pcsx2/GS/GSLzma.cpp
+++ b/pcsx2/GS/GSLzma.cpp
@@ -21,6 +21,12 @@
 
 #include <mutex>
 
+#if defined(_SYSTEM_LZMA)
+#define CONTAINER_FROM_VTBL Z7_CONTAINER_FROM_VTBL
+#define LookToRead2_Init LookToRead2_INIT
+#define False False7z
+#endif
+
 using namespace GSDumpTypes;
 
 GSDumpFile::GSDumpFile() = default;
diff --git a/pcsx2/GS/Renderers/SW/GSNewCodeGenerator.h b/pcsx2/GS/Renderers/SW/GSNewCodeGenerator.h
index b1f4d13..2e46f6b 100644
--- a/pcsx2/GS/Renderers/SW/GSNewCodeGenerator.h
+++ b/pcsx2/GS/Renderers/SW/GSNewCodeGenerator.h
@@ -14,8 +14,8 @@
 #define XBYAK_NO_OP_NAMES
 #define XBYAK_ENABLE_OMITTED_OPERAND
 
-#include "xbyak/xbyak.h"
-#include "xbyak/xbyak_util.h"
+#include "xbyak.h"
+#include "xbyak_util.h"
 
 /// Code generator that automatically selects between SSE and AVX, x86 and x64 so you don't have to
 /// Should make combined SSE and AVX codegen much easier
-- 
2.51.0

