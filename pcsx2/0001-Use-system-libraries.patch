From 61062f926f718f51d6db5ab3128e591faf74ac53 Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Sun, 22 May 2022 20:12:38 -0300
Subject: [PATCH] Use system libraries

---
 cmake/SearchForStuff.cmake                 | 77 ++++++++++++++++++++++
 pcsx2/CMakeLists.txt                       | 12 +++-
 pcsx2/GS/GSDump.cpp                        |  4 ++
 pcsx2/GS/GSLzma.cpp                        |  6 ++
 pcsx2/GS/MultiISA.cpp                      |  2 +-
 pcsx2/GS/Renderers/SW/GSNewCodeGenerator.h |  4 +-
 6 files changed, 100 insertions(+), 5 deletions(-)

diff --git a/cmake/SearchForStuff.cmake b/cmake/SearchForStuff.cmake
index e760556..6574072 100644
--- a/cmake/SearchForStuff.cmake
+++ b/cmake/SearchForStuff.cmake
@@ -86,28 +86,88 @@ if(ENABLE_TESTS)
 	endif()
 endif()
 
+find_package(ryml)
+if(ryml_FOUND)
+	message(STATUS "Using the system rapidyml")
+	alias_library(ryml ryml::ryml)
+else()
 add_subdirectory(3rdparty/rapidyaml/rapidyaml EXCLUDE_FROM_ALL)
+endif()
+check_lib(LZMA lzmasdk-c)
+if(LZMA_FOUND)
+	alias_library(LZMA PkgConfig::LZMA)
+	add_library(LZMA::LZMA ALIAS PkgConfig::LZMA)
+	add_definitions("-D_SYSTEM_LZMA")
+else()
 add_subdirectory(3rdparty/lzma EXCLUDE_FROM_ALL)
+endif()
+check_lib(CHDR libchdr)
+if(CHDR_FOUND)
+	alias_library(libchdr PkgConfig::CHDR)
+else()
 add_subdirectory(3rdparty/libchdr EXCLUDE_FROM_ALL)
 disable_compiler_warnings_for_target(libchdr)
+endif()
+find_package(SoundTouch)
+if(SoundTouch_FOUND)
+	message(STATUS "Using the system soundtouch")
+	alias_library(soundtouch SoundTouch::SoundTouch)
+else()
 add_subdirectory(3rdparty/soundtouch EXCLUDE_FROM_ALL)
+endif()
 
 # rapidyaml includes fast_float as a submodule, saves us pulling it in directly.
 # Normally, we'd just pull in the cmake project, and link to it, but... it seems to enable
 # permissive mode, which breaks other parts of PCSX2. So, we'll just create a target here
 # for now.
 #add_subdirectory(3rdparty/rapidyaml/rapidyaml/ext/c4core/src/c4/ext/fast_float EXCLUDE_FROM_ALL)
+find_package(FastFloat)
+if(FastFloat_FOUND)
+	message(STATUS "Using the system fast_float")
+	alias_library(fast_float FastFloat::fast_float)
+else()
 add_library(fast_float INTERFACE)
 target_include_directories(fast_float INTERFACE 3rdparty/rapidyaml/rapidyaml/ext/c4core/src/c4/ext/fast_float/include)
+endif()
+
+find_package(xbyak)
+if(xbyak_FOUND)
+	message(STATUS "Using the system xbyak")
+	alias_library(xbyak xbyak::xbyak)
+endif()
 
 add_subdirectory(3rdparty/simpleini EXCLUDE_FROM_ALL)
 add_subdirectory(3rdparty/imgui EXCLUDE_FROM_ALL)
+check_lib(CPUINFO libcpuinfo)
+if(CPUINFO_FOUND)
+	alias_library(cpuinfo PkgConfig::CPUINFO)
+else()
 add_subdirectory(3rdparty/cpuinfo EXCLUDE_FROM_ALL)
 disable_compiler_warnings_for_target(cpuinfo)
+endif()
+if(DUMP_BLOCKS)
+find_package(zydis)
+if(zydis_FOUND)
+	message(STATUS "Using the system Zydis")
+	alias_library(zydis Zydis::Zydis)
+else()
 add_subdirectory(3rdparty/zydis EXCLUDE_FROM_ALL)
+endif()
+endif()
+find_package(libzip)
+if(libzip_FOUND)
+	message(STATUS "Using the system libzip")
+else()
 add_subdirectory(3rdparty/libzip EXCLUDE_FROM_ALL)
+endif()
 add_subdirectory(3rdparty/rcheevos EXCLUDE_FROM_ALL)
+pkg_search_module(rapidjson IMPORTED_TARGET RapidJSON)
+if(rapidjson_FOUND)
+	message(STATUS "Using the system rapidjson")
+	alias_library(rapidjson PkgConfig::rapidjson)
+else()
 add_subdirectory(3rdparty/rapidjson EXCLUDE_FROM_ALL)
+endif()
 add_subdirectory(3rdparty/discord-rpc EXCLUDE_FROM_ALL)
 
 if(USE_OPENGL)
@@ -115,12 +175,24 @@ if(USE_OPENGL)
 endif()
 
 if(USE_VULKAN)
+	find_package(VulkanHeaders)
+	if(VulkanHeaders_FOUND)
+		message(STATUS "Using the system vulkan-headers")
+		alias_library(Vulkan-Headers Vulkan::Headers)
+	else()
 	add_subdirectory(3rdparty/vulkan-headers EXCLUDE_FROM_ALL)
+	endif()
 endif()
 
+find_package(cubeb)
+if(cubeb_FOUND)
+	message(STATUS "Using the system cubeb")
+	alias_library(cubeb cubeb::cubeb)
+else()
 add_subdirectory(3rdparty/cubeb EXCLUDE_FROM_ALL)
 disable_compiler_warnings_for_target(cubeb)
 disable_compiler_warnings_for_target(speex)
+endif()
 
 # Find the Qt components that we need.
 find_package(Qt6 6.6.2 COMPONENTS CoreTools Core GuiTools Gui WidgetsTools Widgets LinguistTools REQUIRED)
@@ -134,7 +206,12 @@ add_subdirectory(3rdparty/demangler EXCLUDE_FROM_ALL)
 
 # Prevent fmt from being built with exceptions, or being thrown at call sites.
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DFMT_EXCEPTIONS=0")
+find_package(fmt 9)
+if(fmt_FOUND)
+	message(STATUS "Using the system fmt")
+else()
 add_subdirectory(3rdparty/fmt/fmt EXCLUDE_FROM_ALL)
+endif()
 
 # Deliberately at the end. We don't want to set the flag on third-party projects.
 if(MSVC)
diff --git a/pcsx2/CMakeLists.txt b/pcsx2/CMakeLists.txt
index 8094db3..21804e6 100644
--- a/pcsx2/CMakeLists.txt
+++ b/pcsx2/CMakeLists.txt
@@ -1101,7 +1101,6 @@ target_link_libraries(PCSX2_FLAGS INTERFACE
 	libchdr
 	libzip::zip
 	cpuinfo
-	zydis
 	cubeb
 	rcheevos
 	discord-rpc
@@ -1154,13 +1153,22 @@ target_include_directories(PCSX2_FLAGS INTERFACE
 	"${CMAKE_CURRENT_SOURCE_DIR}"
 	"${CMAKE_BINARY_DIR}/pcsx2"
 	"${CMAKE_BINARY_DIR}/common/include"
-	"${CMAKE_SOURCE_DIR}/3rdparty/xbyak"
 	"${FFMPEG_INCLUDE_DIRS}"
 )
+
+if(TARGET xbyak::xbyak)
+	target_link_libraries(PCSX2_FLAGS INTERFACE xbyak::xbyak)
+else()
+	target_include_directories(PCSX2_FLAGS INTERFACE "${CMAKE_SOURCE_DIR}/3rdparty/xbyak")
+endif()
 target_compile_definitions(PCSX2_FLAGS INTERFACE
 	XBYAK_NO_EXCEPTION
 )
 
+if(DUMP_BLOCKS)
+	target_link_libraries(PCSX2_FLAGS INTERFACE zydis)
+endif()
+
 set_source_files_properties(PrecompiledHeader.cpp PROPERTIES HEADER_FILE_ONLY TRUE)
 if(COMMAND target_precompile_headers)
 	message("Using precompiled headers.")
diff --git a/pcsx2/GS/GSDump.cpp b/pcsx2/GS/GSDump.cpp
index 7c17d9e..d2e13b4 100644
--- a/pcsx2/GS/GSDump.cpp
+++ b/pcsx2/GS/GSDump.cpp
@@ -16,6 +16,10 @@
 #include <XzEnc.h>
 #include <zstd.h>
 
+#if defined(_SYSTEM_LZMA)
+#define CONTAINER_FROM_VTBL Z7_CONTAINER_FROM_VTBL
+#endif
+
 GSDumpBase::GSDumpBase(std::string fn)
 	: m_filename(std::move(fn))
 	, m_frames(0)
diff --git a/pcsx2/GS/GSLzma.cpp b/pcsx2/GS/GSLzma.cpp
index ccf737b..b00af7b 100644
--- a/pcsx2/GS/GSLzma.cpp
+++ b/pcsx2/GS/GSLzma.cpp
@@ -22,6 +22,12 @@
 
 #include <mutex>
 
+#if defined(_SYSTEM_LZMA)
+#define CONTAINER_FROM_VTBL Z7_CONTAINER_FROM_VTBL
+#define LookToRead2_Init LookToRead2_INIT
+#define False False7z
+#endif
+
 using namespace GSDumpTypes;
 
 GSDumpFile::GSDumpFile() = default;
diff --git a/pcsx2/GS/MultiISA.cpp b/pcsx2/GS/MultiISA.cpp
index d9f99aa..b88c94f 100644
--- a/pcsx2/GS/MultiISA.cpp
+++ b/pcsx2/GS/MultiISA.cpp
@@ -2,7 +2,7 @@
 // SPDX-License-Identifier: LGPL-3.0+
 
 #include "MultiISA.h"
-#include <xbyak/xbyak_util.h>
+#include <xbyak_util.h>
 
 #ifdef _WIN32
 #define strcasecmp _stricmp
diff --git a/pcsx2/GS/Renderers/SW/GSNewCodeGenerator.h b/pcsx2/GS/Renderers/SW/GSNewCodeGenerator.h
index 66a1f03..fa96247 100644
--- a/pcsx2/GS/Renderers/SW/GSNewCodeGenerator.h
+++ b/pcsx2/GS/Renderers/SW/GSNewCodeGenerator.h
@@ -11,8 +11,8 @@
 #define XBYAK_NO_OP_NAMES
 #define XBYAK_ENABLE_OMITTED_OPERAND
 
-#include "xbyak/xbyak.h"
-#include "xbyak/xbyak_util.h"
+#include "xbyak.h"
+#include "xbyak_util.h"
 #include "GS/MultiISA.h"
 #include "common/Assertions.h"
 
-- 
2.44.0

