From 6985f7d20fe58479cce73e566411517bbefab331 Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Wed, 17 Apr 2024 00:06:49 -0300
Subject: [PATCH] Fix build with Qt 6.6

---
 pcsx2-qt/QtKeyCodes.cpp                       |  4 ++
 pcsx2-qt/SettingWidgetBinder.h                |  4 ++
 .../Settings/AchievementSettingsWidget.cpp    |  4 ++
 pcsx2-qt/Settings/AudioSettingsWidget.cpp     |  4 ++
 pcsx2-qt/Settings/BIOSSettingsWidget.cpp      |  4 ++
 .../ControllerGlobalSettingsWidget.cpp        |  4 ++
 pcsx2-qt/Settings/DEV9SettingsWidget.cpp      | 59 +++++++++++++++++++
 pcsx2-qt/Settings/DEV9SettingsWidget.h        | 20 +++++++
 pcsx2-qt/Settings/DebugSettingsWidget.cpp     |  4 ++
 pcsx2-qt/Settings/EmulationSettingsWidget.cpp |  4 ++
 pcsx2-qt/Settings/GameCheatSettingsWidget.cpp |  4 ++
 pcsx2-qt/Settings/GameListSettingsWidget.cpp  |  8 +++
 pcsx2-qt/Settings/GamePatchSettingsWidget.cpp |  4 ++
 pcsx2-qt/Settings/GraphicsSettingsWidget.cpp  |  4 ++
 pcsx2-qt/Settings/InterfaceSettingsWidget.cpp |  4 ++
 .../Settings/MemoryCardSettingsWidget.cpp     |  4 ++
 pcsx2-qt/SetupWizardDialog.cpp                |  8 +++
 17 files changed, 147 insertions(+)

diff --git a/pcsx2-qt/QtKeyCodes.cpp b/pcsx2-qt/QtKeyCodes.cpp
index e8c0173..56febd1 100644
--- a/pcsx2-qt/QtKeyCodes.cpp
+++ b/pcsx2-qt/QtKeyCodes.cpp
@@ -182,7 +182,11 @@ static constexpr const KeyCodeName s_qt_key_names[] = {
 	{Qt::Key_twosuperior, "twosuperior", nullptr},
 	{Qt::Key_threesuperior, "threesuperior", nullptr},
 	{Qt::Key_acute, "acute", nullptr},
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 7, 0))
 	{Qt::Key_micro, "micro", nullptr},
+#else
+	{Qt::Key_mu, "mu", nullptr},
+#endif
 	{Qt::Key_paragraph, "paragraph", nullptr},
 	{Qt::Key_periodcentered, "periodcentered", nullptr},
 	{Qt::Key_cedilla, "cedilla", nullptr},
diff --git a/pcsx2-qt/SettingWidgetBinder.h b/pcsx2-qt/SettingWidgetBinder.h
index 92f7fcf..8261303 100644
--- a/pcsx2-qt/SettingWidgetBinder.h
+++ b/pcsx2-qt/SettingWidgetBinder.h
@@ -31,6 +31,10 @@
 #include "QtUtils.h"
 #include "Settings/SettingsWindow.h"
 
+#if (QT_VERSION < QT_VERSION_CHECK(6, 7, 0))
+#define checkStateChanged stateChanged
+#endif
+
 namespace SettingWidgetBinder
 {
 	static constexpr const char* NULLABLE_PROPERTY = "SettingWidgetBinder_isNullable";
diff --git a/pcsx2-qt/Settings/AchievementSettingsWidget.cpp b/pcsx2-qt/Settings/AchievementSettingsWidget.cpp
index 1648011..13b40e2 100644
--- a/pcsx2-qt/Settings/AchievementSettingsWidget.cpp
+++ b/pcsx2-qt/Settings/AchievementSettingsWidget.cpp
@@ -16,6 +16,10 @@
 #include <QtCore/QDateTime>
 #include <QtWidgets/QMessageBox>
 
+#if (QT_VERSION < QT_VERSION_CHECK(6, 7, 0))
+#define checkStateChanged stateChanged
+#endif
+
 AchievementSettingsWidget::AchievementSettingsWidget(SettingsWindow* dialog, QWidget* parent)
 	: QWidget(parent)
 	, m_dialog(dialog)
diff --git a/pcsx2-qt/Settings/AudioSettingsWidget.cpp b/pcsx2-qt/Settings/AudioSettingsWidget.cpp
index 1f028ba..da6b124 100644
--- a/pcsx2-qt/Settings/AudioSettingsWidget.cpp
+++ b/pcsx2-qt/Settings/AudioSettingsWidget.cpp
@@ -14,6 +14,10 @@
 #include "SettingWidgetBinder.h"
 #include "SettingsWindow.h"
 
+#if (QT_VERSION < QT_VERSION_CHECK(6, 7, 0))
+#define checkStateChanged stateChanged
+#endif
+
 static constexpr s32 DEFAULT_SYNCHRONIZATION_MODE = 0;
 static constexpr s32 DEFAULT_EXPANSION_MODE = 0;
 static constexpr s32 DEFAULT_DPL_DECODING_LEVEL = 0;
diff --git a/pcsx2-qt/Settings/BIOSSettingsWidget.cpp b/pcsx2-qt/Settings/BIOSSettingsWidget.cpp
index 4e36e39..7b5d4ae 100644
--- a/pcsx2-qt/Settings/BIOSSettingsWidget.cpp
+++ b/pcsx2-qt/Settings/BIOSSettingsWidget.cpp
@@ -16,6 +16,10 @@
 #include <QtWidgets/QFileDialog>
 #include <algorithm>
 
+#if (QT_VERSION < QT_VERSION_CHECK(6, 7, 0))
+#define checkStateChanged stateChanged
+#endif
+
 BIOSSettingsWidget::BIOSSettingsWidget(SettingsWindow* dialog, QWidget* parent)
 	: QWidget(parent)
 	, m_dialog(dialog)
diff --git a/pcsx2-qt/Settings/ControllerGlobalSettingsWidget.cpp b/pcsx2-qt/Settings/ControllerGlobalSettingsWidget.cpp
index 2dbc357..be2d872 100644
--- a/pcsx2-qt/Settings/ControllerGlobalSettingsWidget.cpp
+++ b/pcsx2-qt/Settings/ControllerGlobalSettingsWidget.cpp
@@ -10,6 +10,10 @@
 #include "pcsx2/Input/InputManager.h"
 #include "pcsx2/Input/SDLInputSource.h"
 
+#if (QT_VERSION < QT_VERSION_CHECK(6, 7, 0))
+#define checkStateChanged stateChanged
+#endif
+
 ControllerGlobalSettingsWidget::ControllerGlobalSettingsWidget(QWidget* parent, ControllerSettingsWindow* dialog)
 	: QWidget(parent)
 	, m_dialog(dialog)
diff --git a/pcsx2-qt/Settings/DEV9SettingsWidget.cpp b/pcsx2-qt/Settings/DEV9SettingsWidget.cpp
index 3198f1b..d6a7931 100644
--- a/pcsx2-qt/Settings/DEV9SettingsWidget.cpp
+++ b/pcsx2-qt/Settings/DEV9SettingsWidget.cpp
@@ -26,6 +26,10 @@
 #endif
 #include "DEV9/sockets.h"
 
+#if (QT_VERSION < QT_VERSION_CHECK(6, 7, 0))
+#define checkStateChanged stateChanged
+#endif
+
 static const char* s_api_name[] = {
 	" ",
 	QT_TRANSLATE_NOOP("DEV9SettingsWidget", "PCAP Bridged"),
@@ -59,7 +63,11 @@ DEV9SettingsWidget::DEV9SettingsWidget(SettingsWindow* dialog, QWidget* parent)
 	//but we then need to manually call onEthAutoChanged to update the UI on fist load
 	SettingWidgetBinder::BindWidgetToBoolSetting(sif, m_ui.ethEnabled, "DEV9/Eth", "EthEnable", false);
 	onEthEnabledChanged(m_ui.ethEnabled->checkState());
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 7, 0))
 	connect(m_ui.ethEnabled, &QCheckBox::checkStateChanged, this, &DEV9SettingsWidget::onEthEnabledChanged);
+#else
+	connect(m_ui.ethEnabled, QOverload<int>::of(&QCheckBox::stateChanged), this, &DEV9SettingsWidget::onEthEnabledChanged);
+#endif
 
 	//////////////////////////////////////////////////////////////////////////
 	// Eth Device Settings
@@ -146,7 +154,11 @@ DEV9SettingsWidget::DEV9SettingsWidget(SettingsWindow* dialog, QWidget* parent)
 	//////////////////////////////////////////////////////////////////////////
 	SettingWidgetBinder::BindWidgetToBoolSetting(sif, m_ui.ethInterceptDHCP, "DEV9/Eth", "InterceptDHCP", false);
 	onEthDHCPInterceptChanged(m_ui.ethInterceptDHCP->checkState());
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 7, 0))
 	connect(m_ui.ethInterceptDHCP, &QCheckBox::checkStateChanged, this, &DEV9SettingsWidget::onEthDHCPInterceptChanged);
+#else
+	connect(m_ui.ethInterceptDHCP, QOverload<int>::of(&QCheckBox::stateChanged), this, &DEV9SettingsWidget::onEthDHCPInterceptChanged);
+#endif
 
 	//IP settings
 	const IPValidator* ipValidator = new IPValidator(this, m_dialog->isPerGameSettings());
@@ -191,11 +203,19 @@ DEV9SettingsWidget::DEV9SettingsWidget(SettingsWindow* dialog, QWidget* parent)
 	//Auto
 	SettingWidgetBinder::BindWidgetToBoolSetting(sif, m_ui.ethNetMaskAuto, "DEV9/Eth", "AutoMask", true);
 	onEthAutoChanged(m_ui.ethNetMaskAuto, m_ui.ethNetMaskAuto->checkState(), m_ui.ethNetMask, "DEV9/Eth", "AutoMask");
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 7, 0))
 	connect(m_ui.ethNetMaskAuto, &QCheckBox::checkStateChanged, this, [&](Qt::CheckState state) { onEthAutoChanged(m_ui.ethNetMaskAuto, state, m_ui.ethNetMask, "DEV9/Eth", "AutoMask"); });
+#else
+	connect(m_ui.ethNetMaskAuto, QOverload<int>::of(&QCheckBox::stateChanged), this, [&](int state) { onEthAutoChanged(m_ui.ethNetMaskAuto, state, m_ui.ethNetMask, "DEV9/Eth", "AutoMask"); });
+#endif
 
 	SettingWidgetBinder::BindWidgetToBoolSetting(sif, m_ui.ethGatewayAuto, "DEV9/Eth", "AutoGateway", true);
 	onEthAutoChanged(m_ui.ethGatewayAuto, m_ui.ethGatewayAuto->checkState(), m_ui.ethGatewayAddr, "DEV9/Eth", "AutoGateway");
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 7, 0))
 	connect(m_ui.ethGatewayAuto, &QCheckBox::checkStateChanged, this, [&](Qt::CheckState state) { onEthAutoChanged(m_ui.ethGatewayAuto, state, m_ui.ethGatewayAddr, "DEV9/Eth", "AutoGateway"); });
+#else
+	connect(m_ui.ethGatewayAuto, QOverload<int>::of(&QCheckBox::stateChanged), this, [&](int state) { onEthAutoChanged(m_ui.ethGatewayAuto, state, m_ui.ethGatewayAddr, "DEV9/Eth", "AutoGateway"); });
+#endif
 
 	SettingWidgetBinder::BindWidgetToEnumSetting(sif, m_ui.ethDNS1Mode, "DEV9/Eth", "ModeDNS1",
 		s_dns_name, Pcsx2Config::DEV9Options::DnsModeNames, Pcsx2Config::DEV9Options::DnsModeNames[static_cast<int>(Pcsx2Config::DEV9Options::DnsMode::Auto)], "DEV9SettingsWidget");
@@ -242,7 +262,11 @@ DEV9SettingsWidget::DEV9SettingsWidget(SettingsWindow* dialog, QWidget* parent)
 	//////////////////////////////////////////////////////////////////////////
 	// HDD Settings
 	//////////////////////////////////////////////////////////////////////////
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 7, 0))
 	connect(m_ui.hddEnabled, &QCheckBox::checkStateChanged, this, &DEV9SettingsWidget::onHddEnabledChanged);
+#else
+	connect(m_ui.hddEnabled, QOverload<int>::of(&QCheckBox::stateChanged), this, &DEV9SettingsWidget::onHddEnabledChanged);
+#endif
 	SettingWidgetBinder::BindWidgetToBoolSetting(sif, m_ui.hddEnabled, "DEV9/Hdd", "HddEnable", false);
 
 	if (m_dialog->isPerGameSettings())
@@ -253,7 +277,11 @@ DEV9SettingsWidget::DEV9SettingsWidget(SettingsWindow* dialog, QWidget* parent)
 	else
 		m_ui.hddFile->setText(QString::fromUtf8(m_dialog->getStringValue("DEV9/Hdd", "HddFile", "DEV9hdd.raw").value().c_str()));
 
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 7, 0))
 	connect(m_ui.hddLBA48, &QCheckBox::checkStateChanged, this, &DEV9SettingsWidget::onHddLBA48Changed);
+#else
+	connect(m_ui.hddLBA48, QOverload<int>::of(&QCheckBox::stateChanged), this, &DEV9SettingsWidget::onHddLBA48Changed);
+#endif
 
 	UpdateHddSizeUIValues();
 
@@ -267,7 +295,11 @@ DEV9SettingsWidget::DEV9SettingsWidget(SettingsWindow* dialog, QWidget* parent)
 	connect(m_ui.hddCreate, &QPushButton::clicked, this, &DEV9SettingsWidget::onHddCreateClicked);
 }
 
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 7, 0))
 void DEV9SettingsWidget::onEthEnabledChanged(Qt::CheckState state)
+#else
+void DEV9SettingsWidget::onEthEnabledChanged(int state)
+#endif
 {
 	const bool enabled = state == Qt::CheckState::PartiallyChecked ? Host::GetBaseBoolSettingValue("DEV9/Eth", "EthEnable", false) : state;
 
@@ -356,7 +388,11 @@ void DEV9SettingsWidget::onEthDeviceChanged(int index)
 	}
 }
 
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 7, 0))
 void DEV9SettingsWidget::onEthDHCPInterceptChanged(Qt::CheckState state)
+#else
+void DEV9SettingsWidget::onEthDHCPInterceptChanged(int state)
+#endif
 {
 	const bool enabled = (state == Qt::CheckState::PartiallyChecked ? Host::GetBaseBoolSettingValue("DEV9/Eth", "InterceptDHCP", false) : state) ||
 						 ((m_adapter_options & AdapterOptions::DHCP_ForcedOn) == AdapterOptions::DHCP_ForcedOn);
@@ -411,7 +447,11 @@ void DEV9SettingsWidget::onEthIPChanged(QLineEdit* sender, const char* section,
 		m_dialog->setStringSettingValue(section, key, neatStr.c_str());
 }
 
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 7, 0))
 void DEV9SettingsWidget::onEthAutoChanged(QCheckBox* sender, Qt::CheckState state, QLineEdit* input, const char* section, const char* key)
+#else
+void DEV9SettingsWidget::onEthAutoChanged(QCheckBox* sender, int state, QLineEdit* input, const char* section, const char* key)
+#endif
 {
 	if (sender->isEnabled())
 	{
@@ -661,7 +701,11 @@ void DEV9SettingsWidget::onEthHostEdit(QStandardItem* item)
 	}
 }
 
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 7, 0))
 void DEV9SettingsWidget::onHddEnabledChanged(Qt::CheckState state)
+#else
+void DEV9SettingsWidget::onHddEnabledChanged(int state)
+#endif
 {
 	const bool enabled = state == Qt::CheckState::PartiallyChecked ? Host::GetBaseBoolSettingValue("DEV9/Hdd", "HddEnable", false) : state;
 
@@ -722,6 +766,7 @@ void DEV9SettingsWidget::onHddSizeAccessorSpin()
 	m_ui.hddSizeSlider->setValue(m_ui.hddSizeSpinBox->value());
 }
 
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 7, 0))
 void DEV9SettingsWidget::onHddLBA48Changed(Qt::CheckState state)
 {
 	m_ui.hddSizeSlider->setMaximum((state != Qt::Unchecked) ? 2000 : 120);
@@ -734,6 +779,20 @@ void DEV9SettingsWidget::onHddLBA48Changed(Qt::CheckState state)
 
 	m_ui.hddSizeSlider->setTickInterval((state != Qt::Unchecked) ? 100 : 5);
 }
+#else
+void DEV9SettingsWidget::onHddLBA48Changed(int state)
+{
+	m_ui.hddSizeSlider->setMaximum(state ? 2000 : 120);
+	m_ui.hddSizeSpinBox->setMaximum(state ? 2000 : 120);
+	m_ui.hddSizeMaxLabel->setText(state ? tr("2000") : tr("120"));;
+	// Bump up min size to have ticks align with 100GiB sizes
+	m_ui.hddSizeSlider->setMinimum(state ? 100 : 40);
+	m_ui.hddSizeSpinBox->setMinimum(state ? 100 : 40);
+	m_ui.hddSizeMinLabel->setText(state ? tr("100") : tr("40"));
+
+	m_ui.hddSizeSlider->setTickInterval(state ? 100 : 5);
+}
+#endif
 
 void DEV9SettingsWidget::onHddCreateClicked()
 {
diff --git a/pcsx2-qt/Settings/DEV9SettingsWidget.h b/pcsx2-qt/Settings/DEV9SettingsWidget.h
index e29e007..b21029e 100644
--- a/pcsx2-qt/Settings/DEV9SettingsWidget.h
+++ b/pcsx2-qt/Settings/DEV9SettingsWidget.h
@@ -19,12 +19,24 @@ class DEV9SettingsWidget : public QWidget
 	Q_OBJECT
 
 private Q_SLOTS:
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 7, 0))
 	void onEthEnabledChanged(Qt::CheckState state);
+#else
+	void onEthEnabledChanged(int state);
+#endif
 	void onEthDeviceTypeChanged(int index);
 	void onEthDeviceChanged(int index);
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 7, 0))
 	void onEthDHCPInterceptChanged(Qt::CheckState state);
+#else
+	void onEthDHCPInterceptChanged(int state);
+#endif
 	void onEthIPChanged(QLineEdit* sender, const char* section, const char* key);
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 7, 0))
 	void onEthAutoChanged(QCheckBox* sender, Qt::CheckState state, QLineEdit* input, const char* section, const char* key);
+#else
+	void onEthAutoChanged(QCheckBox* sender, int state, QLineEdit* input, const char* section, const char* key);
+#endif
 	void onEthDNSModeChanged(QComboBox* sender, int index, QLineEdit* input, const char* section, const char* key);
 	void onEthHostAdd();
 	void onEthHostDel();
@@ -33,13 +45,21 @@ private Q_SLOTS:
 	void onEthHostPerGame();
 	void onEthHostEdit(QStandardItem* item);
 
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 7, 0))
 	void onHddEnabledChanged(Qt::CheckState state);
+#else
+	void onHddEnabledChanged(int state);
+#endif
 	void onHddBrowseFileClicked();
 	void onHddFileTextChange();
 	void onHddFileEdit();
 	void onHddSizeSlide(int i);
 	void onHddSizeAccessorSpin();
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 7, 0))
 	void onHddLBA48Changed(Qt::CheckState state);
+#else
+	void onHddLBA48Changed(int state);
+#endif
 	void onHddCreateClicked();
 
 public:
diff --git a/pcsx2-qt/Settings/DebugSettingsWidget.cpp b/pcsx2-qt/Settings/DebugSettingsWidget.cpp
index 8f184aa..f14419a 100644
--- a/pcsx2-qt/Settings/DebugSettingsWidget.cpp
+++ b/pcsx2-qt/Settings/DebugSettingsWidget.cpp
@@ -10,6 +10,10 @@
 
 #include <QtWidgets/QMessageBox>
 
+#if (QT_VERSION < QT_VERSION_CHECK(6, 7, 0))
+#define checkStateChanged stateChanged
+#endif
+
 DebugSettingsWidget::DebugSettingsWidget(SettingsWindow* dialog, QWidget* parent)
 	: QWidget(parent)
 	, m_dialog(dialog)
diff --git a/pcsx2-qt/Settings/EmulationSettingsWidget.cpp b/pcsx2-qt/Settings/EmulationSettingsWidget.cpp
index f608f63..0750485 100644
--- a/pcsx2-qt/Settings/EmulationSettingsWidget.cpp
+++ b/pcsx2-qt/Settings/EmulationSettingsWidget.cpp
@@ -12,6 +12,10 @@
 #include "SettingWidgetBinder.h"
 #include "SettingsWindow.h"
 
+#if (QT_VERSION < QT_VERSION_CHECK(6, 7, 0))
+#define checkStateChanged stateChanged
+#endif
+
 static constexpr int MINIMUM_EE_CYCLE_RATE = -3;
 static constexpr int MAXIMUM_EE_CYCLE_RATE = 3;
 static constexpr int DEFAULT_EE_CYCLE_RATE = 0;
diff --git a/pcsx2-qt/Settings/GameCheatSettingsWidget.cpp b/pcsx2-qt/Settings/GameCheatSettingsWidget.cpp
index 0c19628..6743e4b 100644
--- a/pcsx2-qt/Settings/GameCheatSettingsWidget.cpp
+++ b/pcsx2-qt/Settings/GameCheatSettingsWidget.cpp
@@ -13,6 +13,10 @@
 
 #include "common/HeterogeneousContainers.h"
 
+#if (QT_VERSION < QT_VERSION_CHECK(6, 7, 0))
+#define checkStateChanged stateChanged
+#endif
+
 GameCheatSettingsWidget::GameCheatSettingsWidget(SettingsWindow* dialog, QWidget* parent)
 	: m_dialog(dialog)
 {
diff --git a/pcsx2-qt/Settings/GameListSettingsWidget.cpp b/pcsx2-qt/Settings/GameListSettingsWidget.cpp
index 04e6903..626ca01 100644
--- a/pcsx2-qt/Settings/GameListSettingsWidget.cpp
+++ b/pcsx2-qt/Settings/GameListSettingsWidget.cpp
@@ -18,6 +18,10 @@
 #include "QtUtils.h"
 #include "SettingWidgetBinder.h"
 
+#if (QT_VERSION < QT_VERSION_CHECK(6, 7, 0))
+#define checkStateChanged stateChanged
+#endif
+
 GameListSettingsWidget::GameListSettingsWidget(SettingsWindow* dialog, QWidget* parent)
 	: QWidget(parent)
 {
@@ -111,7 +115,11 @@ void GameListSettingsWidget::addPathToTable(const std::string& path, bool recurs
 	m_ui.searchDirectoryList->setCellWidget(row, 1, cb);
 	cb->setChecked(recursive);
 
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 7, 0))
 	connect(cb, &QCheckBox::checkStateChanged, this, [item](Qt::CheckState state) {
+#else
+	connect(cb, &QCheckBox::stateChanged, [item](int state) {
+#endif
 		const std::string path(item->text().toStdString());
 		if (state == Qt::Checked)
 		{
diff --git a/pcsx2-qt/Settings/GamePatchSettingsWidget.cpp b/pcsx2-qt/Settings/GamePatchSettingsWidget.cpp
index 3a59da4..038cd85 100644
--- a/pcsx2-qt/Settings/GamePatchSettingsWidget.cpp
+++ b/pcsx2-qt/Settings/GamePatchSettingsWidget.cpp
@@ -15,6 +15,10 @@
 
 #include <algorithm>
 
+#if (QT_VERSION < QT_VERSION_CHECK(6, 7, 0))
+#define checkStateChanged stateChanged
+#endif
+
 GamePatchDetailsWidget::GamePatchDetailsWidget(std::string name, const std::string& author,
 	const std::string& description, bool enabled, SettingsWindow* dialog, QWidget* parent)
 	: QWidget(parent)
diff --git a/pcsx2-qt/Settings/GraphicsSettingsWidget.cpp b/pcsx2-qt/Settings/GraphicsSettingsWidget.cpp
index 271bc1e..a0d749d 100644
--- a/pcsx2-qt/Settings/GraphicsSettingsWidget.cpp
+++ b/pcsx2-qt/Settings/GraphicsSettingsWidget.cpp
@@ -12,6 +12,10 @@
 #include "pcsx2/GS/GSCapture.h"
 #include "pcsx2/GS/GSUtil.h"
 
+#if (QT_VERSION < QT_VERSION_CHECK(6, 7, 0))
+#define checkStateChanged stateChanged
+#endif
+
 struct RendererInfo
 {
 	const char* name;
diff --git a/pcsx2-qt/Settings/InterfaceSettingsWidget.cpp b/pcsx2-qt/Settings/InterfaceSettingsWidget.cpp
index f02b266..63f8480 100644
--- a/pcsx2-qt/Settings/InterfaceSettingsWidget.cpp
+++ b/pcsx2-qt/Settings/InterfaceSettingsWidget.cpp
@@ -8,6 +8,10 @@
 #include "SettingsWindow.h"
 #include "QtHost.h"
 
+#if (QT_VERSION < QT_VERSION_CHECK(6, 7, 0))
+#define checkStateChanged stateChanged
+#endif
+
 const char* InterfaceSettingsWidget::THEME_NAMES[] = {
 	QT_TRANSLATE_NOOP("InterfaceSettingsWidget", "Native"),
 	//: Ignore what Crowdin says in this string about "[Light]/[Dark]" being untouchable here, these are not variables in this case and must be translated.
diff --git a/pcsx2-qt/Settings/MemoryCardSettingsWidget.cpp b/pcsx2-qt/Settings/MemoryCardSettingsWidget.cpp
index 194136e..e16ccb8 100644
--- a/pcsx2-qt/Settings/MemoryCardSettingsWidget.cpp
+++ b/pcsx2-qt/Settings/MemoryCardSettingsWidget.cpp
@@ -20,6 +20,10 @@
 
 #include "pcsx2/SIO/Memcard/MemoryCardFile.h"
 
+#if (QT_VERSION < QT_VERSION_CHECK(6, 7, 0))
+#define checkStateChanged stateChanged
+#endif
+
 static constexpr const char* CONFIG_SECTION = "MemoryCards";
 
 static std::string getSlotFilenameKey(u32 slot)
diff --git a/pcsx2-qt/SetupWizardDialog.cpp b/pcsx2-qt/SetupWizardDialog.cpp
index 8831a00..bf9f355 100644
--- a/pcsx2-qt/SetupWizardDialog.cpp
+++ b/pcsx2-qt/SetupWizardDialog.cpp
@@ -12,6 +12,10 @@
 
 #include <QtWidgets/QMessageBox>
 
+#if (QT_VERSION < QT_VERSION_CHECK(6, 7, 0))
+#define checkStateChanged stateChanged
+#endif
+
 SetupWizardDialog::SetupWizardDialog()
 {
 	setupUi();
@@ -318,7 +322,11 @@ void SetupWizardDialog::addPathToTable(const std::string& path, bool recursive)
 	m_ui.searchDirectoryList->setCellWidget(row, 1, cb);
 	cb->setChecked(recursive);
 
+#if (QT_VERSION >= QT_VERSION_CHECK(6, 7, 0))
 	connect(cb, &QCheckBox::checkStateChanged, this, [item](Qt::CheckState state) {
+#else
+	connect(cb, &QCheckBox::stateChanged, [item](int state) {
+#endif
 		const std::string path(item->text().toStdString());
 		if (state == Qt::Checked)
 		{
-- 
2.44.0

