From 74d572e611b12650b55d400fe2bbf350d392f26c Mon Sep 17 00:00:00 2001
From: Toromino <Dennis.lucas.buchholz@toromino.de>
Date: Fri, 11 May 2018 12:58:25 +0200
Subject: [PATCH 1/3] Update GeckoProfileDirectories.java

---
 .../src/main/java/org/mozilla/gecko/GeckoProfileDirectories.java    | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/mobile/android/geckoview/src/main/java/org/mozilla/gecko/GeckoProfileDirectories.java b/mobile/android/geckoview/src/main/java/org/mozilla/gecko/GeckoProfileDirectories.java
index 2afb54bc4dd2..d7b2aaec7fa2 100644
--- a/mobile/android/geckoview/src/main/java/org/mozilla/gecko/GeckoProfileDirectories.java
+++ b/mobile/android/geckoview/src/main/java/org/mozilla/gecko/GeckoProfileDirectories.java
@@ -53,7 +53,7 @@ public NoSuchProfileException(String detailMessage) {
         public boolean matches(INISection section);
     }
 
-    private static final String MOZILLA_DIR_NAME = "mozilla";
+    private static final String WATERFOX_DIR_NAME = "waterfox";
 
     /**
      * Returns true if the supplied profile entry represents the default profile.
@@ -116,14 +116,14 @@ public static String saltProfileName(final String name) {
      */
     @RobocopTarget
     public static File getMozillaDirectory(Context context) throws NoMozillaDirectoryException {
-        final File mozillaDir = new File(context.getFilesDir(), MOZILLA_DIR_NAME);
+        final File mozillaDir = new File(context.getFilesDir(), WATERFOX_DIR_NAME);
         if (mozillaDir.mkdirs() || mozillaDir.isDirectory()) {
             return mozillaDir;
         }
 
         // Although this leaks a path to the system log, the path is
         // predictable (unlike a profile directory), so this is fine.
-        throw new NoMozillaDirectoryException("Unable to create mozilla directory at " + mozillaDir.getAbsolutePath());
+        throw new NoMozillaDirectoryException("Unable to create waterfox directory at " + mozillaDir.getAbsolutePath());
     }
 
     /**

From 896a0eab58368c0862ef8c06224a287a8694d77a Mon Sep 17 00:00:00 2001
From: Toromino <Dennis.lucas.buchholz@toromino.de>
Date: Fri, 11 May 2018 13:31:20 +0200
Subject: [PATCH 2/3] Update mozcrash.py

---
 testing/mozbase/mozcrash/mozcrash/mozcrash.py | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/testing/mozbase/mozcrash/mozcrash/mozcrash.py b/testing/mozbase/mozcrash/mozcrash/mozcrash.py
index 2d778175bc43..8d2a4c4196fb 100644
--- a/testing/mozbase/mozcrash/mozcrash/mozcrash.py
+++ b/testing/mozbase/mozcrash/mozcrash/mozcrash.py
@@ -521,18 +521,18 @@ def cleanup_pending_crash_reports():
     affecting test results; it is best to ensure that these are removed
     before starting any browser tests.
 
-    Firefox stores pending crash reports in "<UAppData>/Crash Reports".
+    Waterfox stores pending crash reports in "<UAppData>/Crash Reports".
     If the browser is not running, it cannot provide <UAppData>, so this
     code tries to anticipate its value.
 
     See dom/system/OSFileConstants.cpp for platform variations of <UAppData>.
     """
     if mozinfo.isWin:
-        location = os.path.expanduser("~\\AppData\\Roaming\\Mozilla\\Firefox\\Crash Reports")
+        location = os.path.expanduser("~\\AppData\\Roaming\\Waterfox\\Crash Reports")
     elif mozinfo.isMac:
-        location = os.path.expanduser("~/Library/Application Support/firefox/Crash Reports")
+        location = os.path.expanduser("~/Library/Application Support/waterfox/Crash Reports")
     else:
-        location = os.path.expanduser("~/.mozilla/firefox/Crash Reports")
+        location = os.path.expanduser("~/.waterfox/Crash Reports")
     logger = get_logger()
     if os.path.exists(location):
         try:

From 17abfbf2f3fdab752dd0a4da125b227fbea6ed43 Mon Sep 17 00:00:00 2001
From: Toromino <Dennis.lucas.buchholz@toromino.de>
Date: Fri, 11 May 2018 13:53:08 +0200
Subject: [PATCH 3/3] Update nsXREDirProvider.cpp

---
 toolkit/xre/nsXREDirProvider.cpp | 22 +++++++++++-----------
 1 file changed, 11 insertions(+), 11 deletions(-)

diff --git a/toolkit/xre/nsXREDirProvider.cpp b/toolkit/xre/nsXREDirProvider.cpp
index d17632c375f0..282ff041b6b7 100644
--- a/toolkit/xre/nsXREDirProvider.cpp
+++ b/toolkit/xre/nsXREDirProvider.cpp
@@ -294,16 +294,16 @@ GetSystemParentDirectory(nsIFile** aFile)
 #if defined(XP_MACOSX)
   rv = GetOSXFolderType(kOnSystemDisk, kApplicationSupportFolderType, getter_AddRefs(localDir));
   if (NS_SUCCEEDED(rv)) {
-    rv = localDir->AppendNative(NS_LITERAL_CSTRING("Mozilla"));
+    rv = localDir->AppendNative(NS_LITERAL_CSTRING("Waterfox"));
   }
 #else
   NS_NAMED_LITERAL_CSTRING(dirname,
 #ifdef HAVE_USR_LIB64_DIR
-                           "/usr/lib64/mozilla"
+                           "/usr/lib64/waterfox"
 #elif defined(__OpenBSD__) || defined(__FreeBSD__)
-                           "/usr/local/lib/mozilla"
+                           "/usr/local/lib/waterfox"
 #else
-                           "/usr/lib/mozilla"
+                           "/usr/lib/waterfox"
 #endif
                            );
   rv = NS_NewNativeLocalFile(dirname, false, getter_AddRefs(localDir));
@@ -415,7 +415,7 @@ nsXREDirProvider::GetFile(const char* aProperty, bool* aPersistent,
     rv = GetUserDataDirectoryHome(getter_AddRefs(localDir), false);
     if (NS_SUCCEEDED(rv)) {
 #if defined(XP_MACOSX)
-      rv = localDir->AppendNative(NS_LITERAL_CSTRING("Mozilla"));
+      rv = localDir->AppendNative(NS_LITERAL_CSTRING("Waterfox"));
       if (NS_SUCCEEDED(rv)) {
         rv = localDir->AppendNative(NS_LITERAL_CSTRING("NativeMessagingHosts"));
       }
@@ -479,9 +479,9 @@ nsXREDirProvider::GetFile(const char* aProperty, bool* aPersistent,
   else if (!strcmp(aProperty, XRE_SYS_SHARE_EXTENSION_PARENT_DIR)) {
 #ifdef ENABLE_SYSTEM_EXTENSION_DIRS
 #if defined(__OpenBSD__) || defined(__FreeBSD__)
-    static const char *const sysLExtDir = "/usr/local/share/mozilla/extensions";
+    static const char *const sysLExtDir = "/usr/local/share/waterfox/extensions";
 #else
-    static const char *const sysLExtDir = "/usr/share/mozilla/extensions";
+    static const char *const sysLExtDir = "/usr/share/waterfox/extensions";
 #endif
     return NS_NewNativeLocalFile(nsDependentCString(sysLExtDir),
                                  false, aFile);
@@ -1289,7 +1289,7 @@ nsXREDirProvider::GetUpdateRootDir(nsIFile* *aResult)
                                            gAppData->name)))) {
       return NS_ERROR_FAILURE;
     }
-  } else if (NS_FAILED(localDir->AppendNative(NS_LITERAL_CSTRING("Mozilla")))) {
+  } else if (NS_FAILED(localDir->AppendNative(NS_LITERAL_CSTRING("Waterfox")))) {
     return NS_ERROR_FAILURE;
   }
 
@@ -1314,7 +1314,7 @@ nsXREDirProvider::GetUpdateRootDir(nsIFile* *aResult)
     // under SOFTWARE\Mozilla.
     wchar_t regPath[1024] = { L'\0' };
     swprintf_s(regPath, mozilla::ArrayLength(regPath), L"SOFTWARE\\%S\\%S\\TaskBarIDs",
-               (hasVendor ? gAppData->vendor : "Mozilla"), MOZ_APP_BASENAME);
+               (hasVendor ? gAppData->vendor : "Waterfox"), MOZ_APP_BASENAME);
 
     // If we pre-computed the hash, grab it from the registry.
     pathHashResult = GetCachedHash(HKEY_LOCAL_MACHINE,
@@ -1640,7 +1640,7 @@ nsXREDirProvider::AppendSysUserExtensionPath(nsIFile* aFile)
 
 #if defined (XP_MACOSX) || defined(XP_WIN)
 
-  static const char* const sXR = "Mozilla";
+  static const char* const sXR = "Waterfox";
   rv = aFile->AppendNative(nsDependentCString(sXR));
   NS_ENSURE_SUCCESS(rv, rv);
 
@@ -1729,7 +1729,7 @@ nsXREDirProvider::AppendProfilePath(nsIFile* aFile,
   // XXXsmaug ...and the rest of the profile creation!
   MOZ_ASSERT(!aAppName,
              "Profile creation for external applications is not implemented!");
-  rv = aFile->AppendNative(nsDependentCString("mozilla"));
+  rv = aFile->AppendNative(nsDependentCString("waterfox"));
   NS_ENSURE_SUCCESS(rv, rv);
 #elif defined(XP_UNIX)
   nsAutoCString folder;
