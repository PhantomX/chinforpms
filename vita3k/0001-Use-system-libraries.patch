From ef6f727390741ce6bcabd099e07aa3fc854e1d00 Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Sun, 12 Nov 2023 10:41:37 -0300
Subject: [PATCH] Use system libraries

---
 external/CMakeLists.txt | 99 ++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 98 insertions(+), 1 deletion(-)

diff --git a/external/CMakeLists.txt b/external/CMakeLists.txt
index 12e72a9..521c312 100644
--- a/external/CMakeLists.txt
+++ b/external/CMakeLists.txt
@@ -28,15 +28,24 @@ function(check_submodules_present)
 	endforeach()
 endfunction()
 
-check_submodules_present()
+#check_submodules_present()
+
+find_package(PkgConfig REQUIRED)
 
 # Set folder for external projects (for project tree in IDE)
 set(CMAKE_FOLDER externals)
 
+pkg_search_module(capstone IMPORTED_TARGET capstone)
+if(capstone_FOUND)
+	message(STATUS "Using the system capstone")
+	add_library(capstone INTERFACE)
+	target_link_libraries(capstone INTERFACE PkgConfig::capstone)
+else()
 option(BUILD_SHARED_LIBS "Build shared library" OFF)
 option(CAPSTONE_ARCHITECTURE_DEFAULT "Whether architectures are enabled by default" OFF)
 option(CAPSTONE_ARM_SUPPORT "ARM support" ON)
 add_subdirectory(capstone EXCLUDE_FROM_ALL)
+endif()
 
 add_library(dirent INTERFACE)
 
@@ -47,14 +56,28 @@ endif()
 add_library(printf INTERFACE)
 target_include_directories(printf INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/printf")
 
+find_package(fmt 10.1)
+if(fmt_FOUND)
+	message(STATUS "Using the system fmt")
+	add_library(fmt INTERFACE)
+	target_link_libraries(fmt INTERFACE fmt::fmt)
+else()
 set(FMT_INSTALL ON)
 add_subdirectory(fmt)
 set(fmt_DIR fmt)
+endif()
 
+find_package(spdlog)
+if(spdlog_FOUND)
+	message(STATUS "Using the system spdlog")
+	add_library(spdlog INTERFACE)
+	target_link_libraries(spdlog INTERFACE spdlog::spdlog)
+else()
 set(SPDLOG_WCHAR_FILENAMES ON CACHE BOOL "")
 set(SPDLOG_NO_THREAD_ID ON CACHE BOOL "")
 set(SPDLOG_FMT_EXTERNAL ON CACHE BOOL "")
 add_subdirectory(spdlog EXCLUDE_FROM_ALL)
+endif()
 
 add_library(stb INTERFACE)
 target_include_directories(stb INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/stb")
@@ -91,8 +114,19 @@ target_include_directories(imgui PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/imgui"
 add_library(miniz STATIC miniz/miniz.c miniz/miniz.h)
 target_include_directories(miniz PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/miniz")
 
+find_package(SDL3 GLOBAL)
+if(SDL3_FOUND)
+	message(STATUS "Using the system sdl3")
+else()
 add_subdirectory(sdl)
+endif()
 
+find_package(cubeb)
+if(cubeb_FOUND)
+	message(STATUS "Using the system cubeb")
+	add_library(cubeb INTERFACE)
+	target_link_libraries(cubeb INTERFACE cubeb::cubeb)
+else()
 # Cubeb setup, from https://github.com/RPCS3/rpcs3/blob/master/3rdparty/cubeb/CMakeLists.txt
 set(BUILD_SHARED_LIBS FALSE CACHE BOOL "Don't build shared libs")
 set(BUILD_TESTS FALSE CACHE BOOL "Don't build tests")
@@ -114,6 +148,7 @@ elseif (ARCHITECTURE STREQUAL "x86_64")
 		_USE_SSE2
 	)
 endif ()
+endif()
 
 if(WIN32)
 	add_library(winsock INTERFACE)
@@ -142,9 +177,16 @@ add_subdirectory(unicorn EXCLUDE_FROM_ALL)
 add_library(vita-toolchain INTERFACE)
 target_include_directories(vita-toolchain INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/vita-toolchain/src")
 
+find_package(yaml-cpp)
+if(yaml-cpp_FOUND)
+	message(STATUS "Using the system yaml-cpp")
+	add_library(yaml-cpp INTERFACE)
+	target_link_libraries(yaml-cpp INTERFACE yaml-cpp)
+else()
 option(YAML_CPP_BUILD_TOOLS "Enable parse tools" OFF)
 option(YAML_CPP_BUILD_CONTRIB "Enable contrib stuff in library" OFF)
 add_subdirectory(yaml-cpp EXCLUDE_FROM_ALL)
+endif()
 
 if(USE_DISCORD_RICH_PRESENCE)
 	if(NOT EXISTS "${CMAKE_BINARY_DIR}/external/discord_game_sdk.zip")
@@ -218,12 +260,25 @@ target_include_directories(dlmalloc PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/dlmalloc
 target_compile_definitions(dlmalloc PUBLIC ONLY_MSPACES=1)
 target_compile_definitions(dlmalloc PUBLIC USE_LOCK=0)
 
+find_package(pugixml)
+if(pugixml_FOUND)
+	message(STATUS "Using the system pugixml")
+	add_library(pugixml-shared INTERFACE)
+	target_link_libraries(pugixml-shared INTERFACE pugixml)
+	add_library(pugixml::pugixml ALIAS pugixml-shared)
+else()
 add_subdirectory(pugixml)
+endif()
 
 add_library(CLI11 INTERFACE)
 target_include_directories(CLI11 INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/cli11")
 
 add_library(vulkan INTERFACE)
+find_package(VulkanHeaders)
+if(VulkanHeaders_FOUND)
+	message(STATUS "Using the system vulkan-headers")
+	target_link_libraries(vulkan INTERFACE Vulkan::Headers)
+else()
 target_include_directories(vulkan INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/VulkanMemoryAllocator-Hpp/Vulkan-Headers/include")
 if(APPLE)
 	if(NOT EXISTS "${CMAKE_BINARY_DIR}/external/MoltenVK-macos.tar")
@@ -238,13 +293,40 @@ if(APPLE)
 	target_include_directories(vulkan INTERFACE "${CMAKE_BINARY_DIR}/external/MoltenVK/include")
 	set(MOLTENVK_DYLIB "${CMAKE_BINARY_DIR}/external/MoltenVK/dylib/macOS/libMoltenVK.dylib" PARENT_SCOPE)
 endif()
+endif()
 
 add_library(vma INTERFACE)
+find_package(VulkanMemoryAllocator CONFIG)
+find_package(VulkanMemoryAllocator-Hpp CONFIG)
+if(VulkanMemoryAllocator_FOUND AND VulkanMemoryAllocator-Hpp_FOUND)
+	message(STATUS "Using the system vma")
+	target_link_libraries(vma INTERFACE Vulkan::Headers GPUOpen::VulkanMemoryAllocator VulkanMemoryAllocator-Hpp::VulkanMemoryAllocator-Hpp)
+else()
 target_include_directories(vma INTERFACE
 	"${CMAKE_CURRENT_SOURCE_DIR}/VulkanMemoryAllocator-Hpp/include"
 	"${CMAKE_CURRENT_SOURCE_DIR}/VulkanMemoryAllocator-Hpp/VulkanMemoryAllocator/include")
+endif()
 
+if (VITA3K_FORCE_SYSTEM_FFMPEG)
+	pkg_search_module(avformat IMPORTED_TARGET libavformat)
+	pkg_search_module(avcodec IMPORTED_TARGET libavcodec)
+	pkg_search_module(swscale IMPORTED_TARGET libswscale)
+	pkg_search_module(avutil IMPORTED_TARGET libavutil)
+	pkg_search_module(avfilter IMPORTED_TARGET libavfilter)
+	pkg_search_module(swresample IMPORTED_TARGET libswresample)
+	message(STATUS "Using the system ffmpeg")
+	add_library(ffmpeg INTERFACE)
+	target_link_libraries(ffmpeg INTERFACE
+		PkgConfig::avformat
+		PkgConfig::avcodec
+		PkgConfig::swscale
+		PkgConfig::avutil
+		PkgConfig::avfilter
+		PkgConfig::swresample
+	)
+else()
 add_subdirectory(ffmpeg)
+endif()
 
 if(APPLE OR NOT FORCE_BUILD_OPENSSL_MAC)
 	execute_process(
@@ -366,6 +448,13 @@ add_library(libatrac9 STATIC ${LIBATRAC9_SOURCES})
 
 target_include_directories(libatrac9 PUBLIC LibAtrac9/C/src)
 
+pkg_search_module(xxhash IMPORTED_TARGET libxxhash)
+if(xxhash_FOUND)
+  message(STATUS "Using the system xxhash")
+  add_library(xxhash INTERFACE)
+  target_link_libraries(xxhash INTERFACE PkgConfig::xxhash)
+  add_library(xxHash::xxhash ALIAS xxhash)
+else()
 option(BUILD_SHARED_LIBS "Build shared library" OFF)
 option(XXHASH_BUILD_XXHSUM "Build the xxhsum binary" OFF)
 option(XXH_X86DISPATCH_ALLOW_AVX "Allow building XXH3 with AVX even if it crashes on SSE2-Only CPUs" OFF)
@@ -376,6 +465,7 @@ add_subdirectory(xxHash/cmake_unofficial EXCLUDE_FROM_ALL)
 if(XXH_X86DISPATCH_ALLOW_AVX)
 	target_compile_definitions(xxhash PRIVATE XXH_X86DISPATCH_ALLOW_AVX)
 endif()
+endif()
 
 # Tracy
 option(TRACY_ENABLE_ON_CORE_COMPONENTS
@@ -424,11 +514,18 @@ target_compile_definitions(tracy PUBLIC $<$<CONFIG:Debug,RelWithDebInfo>:TRACY_E
 #
 # target_compile_definitions(tracy PUBLIC TRACY_ENABLE)
 
+find_package(nfd)
+if(nfd_FOUND)
+	message(STATUS "Using the system nfd")
+	add_library(nfd INTERFACE)
+	target_link_libraries(nfd INTERFACE nfd::nfd)
+else()
 # Use XDG desktop portals on Linux
 set(NFD_PORTAL ON)
 
 # nativefiledialog-extended
 add_subdirectory(nativefiledialog-extended)
+endif()
 
 # Create alias to prevent the need of multiple changes in case the target name changes
 add_library(NFDe::NFDe ALIAS nfd)
-- 
2.50.1

