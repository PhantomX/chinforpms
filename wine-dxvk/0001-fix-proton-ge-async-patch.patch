From 279cfb38eb8865c2f61c5e311ca1f08f2b660e2a Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Fri, 27 Sep 2019 20:31:54 -0300
Subject: [PATCH] fix proton-ge async patch

---
 dxvk-async.patch | 45 +++++++++++++++++++++++----------------------
 1 file changed, 23 insertions(+), 22 deletions(-)

diff --git a/dxvk-async.patch b/dxvk-async.patch
index 5d924a4..fcb9d87 100644
--- a/dxvk-async.patch
+++ b/dxvk-async.patch
@@ -33,37 +33,37 @@ index 96d29375..8fe29c49 100644
  
      // Find out if the render target view is currently bound,
      // so that we can avoid spilling the render pass if it is.
-@@ -3499,7 +3499,8 @@ namespace dxvk {
-       // Retrieve and bind actual Vulkan pipeline handle
-       m_gpActivePipeline = m_state.gp.pipeline != nullptr && m_state.om.framebuffer != nullptr
-         ? m_state.gp.pipeline->getPipelineHandle(m_state.gp.state,
--            m_state.om.framebuffer->getRenderPass())
-+            m_state.om.framebuffer->getRenderPass(),
-+            this->checkAsyncCompilationCompat())
-         : VK_NULL_HANDLE;
-       
-       if (m_gpActivePipeline != VK_NULL_HANDLE) {
-@@ -3766,7 +3767,7 @@ namespace dxvk {
+@@ -3652,7 +3652,8 @@ namespace dxvk {
+     
+     // Retrieve and bind actual Vulkan pipeline handle
+     m_gpActivePipeline = m_state.gp.pipeline != nullptr && m_state.om.framebuffer != nullptr
+-      ? m_state.gp.pipeline->getPipelineHandle(m_state.gp.state, m_state.om.framebuffer->getRenderPass())
++      ? m_state.gp.pipeline->getPipelineHandle(m_state.gp.state, m_state.om.framebuffer->getRenderPass(),
++      this->checkAsyncCompilationCompat())
+       : VK_NULL_HANDLE;
+     
+     if (m_gpActivePipeline != VK_NULL_HANDLE) {
+@@ -3969,7 +3970,7 @@ namespace dxvk {
    }
    
    
 -  void DxvkContext::updateFramebuffer() {
 +  void DxvkContext::updateFramebuffer(bool isDraw) {
-     if (m_flags.test(DxvkContextFlag::GpDirtyFramebuffer)) {
-       m_flags.clr(DxvkContextFlag::GpDirtyFramebuffer);
-       
-@@ -3785,6 +3786,11 @@ namespace dxvk {
-           : VkComponentMapping();
-       }
+     m_flags.clr(DxvkContextFlag::GpDirtyFramebuffer);
+     
+     this->spillRenderPass();
+@@ -3987,6 +3988,11 @@ namespace dxvk {
+         : VkComponentMapping();
+     }
  
 +      if (isDraw) {
 +        for (uint32_t i = 0; i < fb->numAttachments(); i++)
 +          fb->getAttachment(i).view->setRtBindingFrameId(m_device->getCurrentFrameId());
 +      }
 +
-       m_flags.set(DxvkContextFlag::GpDirtyPipelineState);
-     }
+     m_flags.set(DxvkContextFlag::GpDirtyPipelineState);
    }
+   
 @@ -4012,7 +4018,7 @@ namespace dxvk {
    template<bool Indexed>
    void DxvkContext::commitGraphicsState() {
@@ -102,15 +102,16 @@ index bb5b8a6f..ec456c78 100644
      
      void updateIndexBufferBinding();
      void updateVertexBufferBindings();
-@@ -1151,6 +1151,7 @@ namespace dxvk {
+@@ -1180,6 +1180,7 @@ namespace dxvk {
  
      void trackDrawBuffer();
-     
+ 
 +    bool checkAsyncCompilationCompat();
    };
    
- }
+-}
 \ No newline at end of file
++}
 diff --git a/src/dxvk/dxvk_framebuffer.h b/src/dxvk/dxvk_framebuffer.h
 index 5e4038b0..cba2d274 100644
 --- a/src/dxvk/dxvk_framebuffer.h
-- 
2.23.0

