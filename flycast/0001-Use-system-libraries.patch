From b1ac90fb3ae5bc0cb10eb79b49b2b8ec72d1dc08 Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Fri, 24 Dec 2021 00:54:39 -0300
Subject: [PATCH] Use system libraries

---
 CMakeLists.txt              | 51 +++++++++++++++++++++++++++++++++++--
 core/archive/7zArchive.cpp  |  7 +++++
 core/archive/7zArchive.h    |  5 ++++
 core/archive/CMakeLists.txt |  6 ++++-
 core/archive/archive.cpp    |  4 +++
 5 files changed, 70 insertions(+), 3 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 679350d..29bb89e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -84,6 +84,8 @@ option(ENABLE_DC_PROFILER "Build with support for target machine (SH4) profiler"
 option(ENABLE_FC_PROFILER "Build with support for host app (Flycast) profiler" OFF)
 option(USE_DISCORD "Use Discord Presence API" OFF)
 option(USE_LIBCDIO "Use libcdio for CDROM access" OFF)
+option(USE_HOST_LZMA "Use host lzma-sdk" OFF)
+option(USE_HOST_SPIRV "Use host glslang/spirv" OFF)
 
 if(IOS AND NOT LIBRETRO)
 	set(USE_VULKAN OFF CACHE BOOL "Force vulkan off" FORCE)
@@ -421,13 +423,26 @@ if(USE_OPENMP)
 	endif()
 endif()
 
+find_package(PkgConfig)
+
+pkg_search_module(XXHASH IMPORTED_TARGET GLOBAL libxxhash)
+if(XXHASH_FOUND)
+    message(STATUS "Using system xxhash")
+    add_library(xxhash-shared INTERFACE)
+    target_link_libraries(xxhash-shared INTERFACE PkgConfig::XXHASH)
+    add_library(xxHash::xxhash ALIAS xxhash-shared)
+else()
 option(BUILD_SHARED_LIBS "Build shared library" OFF)
 set(XXHASH_BUILD_XXHSUM OFF CACHE BOOL "Build the xxhsum binary")
 add_subdirectory(core/deps/xxHash/cmake_unofficial)
+endif()
 target_link_libraries(${PROJECT_NAME} PRIVATE xxHash::xxhash)
 
+find_package(glm)
+if(NOT glm_FOUND)
 option(BUILD_SHARED_LIBS "Build shared library" OFF)
 add_subdirectory(core/deps/glm)
+endif()
 target_link_libraries(${PROJECT_NAME} PRIVATE glm::glm)
 
 if(USE_VULKAN)
@@ -514,8 +529,6 @@ if(NOT LIBRETRO)
 	endif()
 endif()
 
-find_package(PkgConfig)
-
 if(NOT WITH_SYSTEM_ZLIB)
     option(ZLIB_BUILD_EXAMPLES "Enable Zlib Examples" OFF)
     add_subdirectory("core/deps/libchdr/deps/zlib-1.3.1" EXCLUDE_FROM_ALL)
@@ -529,6 +542,7 @@ endif()
 if(PKG_CONFIG_FOUND AND USE_HOST_LIBCHDR)
 	pkg_check_modules(LIBCHDR IMPORTED_TARGET libchdr)
 	target_link_libraries(${PROJECT_NAME} PRIVATE PkgConfig::LIBCHDR)
+	target_compile_definitions(${PROJECT_NAME} INTERFACE USE_HOST_LIBCHDR)
 else()
 	option(ZSTD_BUILD_SHARED "BUILD SHARED LIBRARIES" OFF)
 	option(ZSTD_BUILD_PROGRAMS "BUILD PROGRAMS" OFF)
@@ -815,8 +829,26 @@ target_sources(${PROJECT_NAME} PRIVATE
 		core/deps/picotcp/stack/pico_stack.c
 		core/deps/picotcp/stack/pico_tree.c)
 
+if(USE_HOST_LIBCHDR AND NOT USE_HOST_LZMA)
+  message(STATUS "Host chdr enabled without shared lzma, disabling 7zip support")
+  set_property(GLOBAL PROPERTY DISABLE_7ZIP 1)
+  target_compile_definitions(${PROJECT_NAME} PRIVATE DISABLE_7ZIP)
+endif()
+
+if (USE_HOST_LZMA)
+  pkg_search_module(LZMA REQUIRED IMPORTED_TARGET GLOBAL lzmasdk-c)
+  if(LZMA_FOUND)
+    message(STATUS "Using host lzmasdk")
+    target_compile_definitions(${PROJECT_NAME} PRIVATE USE_HOST_LZMA)
+    target_link_libraries(${PROJECT_NAME} PRIVATE PkgConfig::LZMA)
+  endif()
+else()
+if(NOT DISABLE_7ZIP)
+target_compile_definitions(${PROJECT_NAME} PRIVATE Z7_ST)
 target_compile_definitions(${PROJECT_NAME} PRIVATE _7ZIP_ST)
 target_sources(${PROJECT_NAME} PRIVATE core/deps/lzma/7zArcIn.c core/deps/lzma/7zBuf.c core/deps/lzma/7zCrc.c core/deps/lzma/7zCrcOpt.c core/deps/lzma/7zDec.c core/deps/lzma/7zFile.c core/deps/lzma/7zStream.c core/deps/lzma/Alloc.c core/deps/lzma/Bcj2.c core/deps/lzma/Bra86.c core/deps/lzma/Bra.c core/deps/lzma/BraIA64.c core/deps/lzma/CpuArch.c core/deps/lzma/Delta.c core/deps/lzma/LzFind.c core/deps/lzma/Lzma2Dec.c core/deps/lzma/Lzma86Dec.c core/deps/lzma/Lzma86Enc.c core/deps/lzma/LzmaDec.c core/deps/lzma/LzmaEnc.c core/deps/lzma/LzmaLib.c core/deps/lzma/Sort.c)
+endif()
+endif()
 add_subdirectory(core/deps/libelf)
 target_link_libraries(${PROJECT_NAME} PRIVATE elf)
 if(NOT LIBRETRO)
@@ -1056,11 +1088,21 @@ if(USE_VULKAN)
 		target_compile_definitions(${PROJECT_NAME} PUBLIC VK_USE_PLATFORM_METAL_EXT)
 	endif()
 
+	find_package(VulkanHeaders)
+	if(VulkanHeaders_FOUND)
+		message(STATUS "Using the system vulkan-headers")
+	else()
 	add_subdirectory(core/deps/Vulkan-Headers)
+	endif()
 	target_link_libraries(${PROJECT_NAME} PRIVATE Vulkan::Headers)
 
+	find_package(VulkanMemoryAllocator)
+	if(VulkanMemoryAllocator_FOUND)
+		message(STATUS "Using the system VulkanMemoryAllocator")
+	else()
 	add_subdirectory(core/deps/VulkanMemoryAllocator)
 	target_compile_options(VulkanMemoryAllocator INTERFACE $<$<AND:$<COMPILE_LANGUAGE:CXX>,$<CXX_COMPILER_ID:AppleClang,Clang>>:-Wno-nullability-completeness>)
+	endif()
 	target_link_libraries(${PROJECT_NAME} PRIVATE GPUOpen::VulkanMemoryAllocator)
 
 	if(ANDROID AND NOT LIBRETRO AND "arm64" IN_LIST ARCHITECTURE)
@@ -1264,7 +1306,12 @@ if("arm64" IN_LIST ARCHITECTURE)
 	target_sources(${PROJECT_NAME} PRIVATE core/rec-ARM64/rec_arm64.cpp core/rec-ARM64/arm64_regalloc.h)
 endif()
 if("x86" IN_LIST ARCHITECTURE OR "x86_64" IN_LIST ARCHITECTURE)
+	find_package(xbyak 7)
+	if(xbyak_FOUND)
+		message(STATUS "Using the system xbyak")
+	else()
 	add_subdirectory(core/deps/xbyak EXCLUDE_FROM_ALL)
+	endif()
 	target_link_libraries(${PROJECT_NAME} PRIVATE xbyak::xbyak)
 	if(CMAKE_SIZEOF_VOID_P EQUAL 4)
 		target_sources(${PROJECT_NAME} PRIVATE
diff --git a/core/archive/7zArchive.cpp b/core/archive/7zArchive.cpp
index 98e2665..8ca9a3e 100644
--- a/core/archive/7zArchive.cpp
+++ b/core/archive/7zArchive.cpp
@@ -19,9 +19,16 @@
     along with reicast.  If not, see <https://www.gnu.org/licenses/>.
  */
 #include "7zArchive.h"
+
+#ifdef USE_HOST_LZMA
+#include <7z.h>
+#include <7zCrc.h>
+#include <Alloc.h>
+#else
 #include "deps/lzma/7z.h"
 #include "deps/lzma/7zCrc.h"
 #include "deps/lzma/Alloc.h"
+#endif
 
 #include <cstring>
 
diff --git a/core/archive/7zArchive.h b/core/archive/7zArchive.h
index cade6de..e9b7f5b 100644
--- a/core/archive/7zArchive.h
+++ b/core/archive/7zArchive.h
@@ -21,8 +21,13 @@
 #pragma once
 
 #include "archive.h"
+#ifdef USE_HOST_LZMA
+#include <7z.h>
+#include <7zFile.h>
+#else
 #include "deps/lzma/7z.h"
 #include "deps/lzma/7zFile.h"
+#endif
 
 #include <algorithm>
 #include <cstring>
diff --git a/core/archive/CMakeLists.txt b/core/archive/CMakeLists.txt
index ceff99d..12e57fb 100644
--- a/core/archive/CMakeLists.txt
+++ b/core/archive/CMakeLists.txt
@@ -1,6 +1,10 @@
+if(NOT DISABLE_7ZIP)
 target_sources(${PROJECT_NAME} PRIVATE
         7zArchive.cpp
-        7zArchive.h
+        7zArchive.h)
+endif()
+
+target_sources(${PROJECT_NAME} PRIVATE
         archive.cpp
         archive.h
         rzip.cpp
diff --git a/core/archive/archive.cpp b/core/archive/archive.cpp
index 53db47f..c475681 100644
--- a/core/archive/archive.cpp
+++ b/core/archive/archive.cpp
@@ -20,7 +20,9 @@
  */
 
 #include "archive.h"
+#ifndef DISABLE_7ZIP
 #include "7zArchive.h"
+#endif
 #include "ZipArchive.h"
 #include "oslib/storage.h"
 
@@ -34,12 +36,14 @@ Archive *OpenArchive(const std::string& path)
 			file = hostfs::storage().openFile(path, "rb");
 	} catch (const hostfs::StorageException& e) {
 	}
+#ifndef DISABLE_7ZIP
 	if (file == nullptr)
 	{
 		file = hostfs::storage().openFile(path + ".7z", "rb");
 		if (file == nullptr)
 			file = hostfs::storage().openFile(path + ".7Z", "rb");
 	}
+#endif
 	if (file != nullptr)
 	{
 		Archive *sz_archive = new SzArchive();
-- 
2.51.1

