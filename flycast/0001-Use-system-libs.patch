From 5f6e05db0ae397a7ffacc6f7664122d404cd3261 Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Fri, 24 Dec 2021 00:54:39 -0300
Subject: [PATCH] Use system libs

---
 CMakeLists.txt                | 82 ++++++++++++++++++++++++++++++++---
 core/archive/7zArchive.cpp    |  7 +++
 core/archive/7zArchive.h      |  5 +++
 core/archive/archive.cpp      |  4 ++
 core/rend/vulkan/compiler.cpp |  4 ++
 core/rend/vulkan/shaders.h    |  4 ++
 6 files changed, 100 insertions(+), 6 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 87bc605..10c635d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -20,6 +20,9 @@ option(LIBRETRO "Build libretro core" OFF)
 option(USE_OPENGL "Use OpenGL API" ON)
 option(USE_VIDEOCORE "RPI: use the legacy Broadcom GLES libraries" OFF)
 option(APPLE_BREAKPAD "macOS: Build breakpad client and dump symbols" OFF)
+option(USE_HOST_CHDR "Use host libchdr" OFF)
+option(USE_HOST_LZMA "Use host lzma-sdk" OFF)
+option(USE_HOST_SPIRV "Use host glslang/spirv" OFF)
 
 set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/shell/cmake")
 
@@ -319,16 +322,40 @@ if(USE_OPENMP)
 	endif()
 endif()
 
+find_package(PkgConfig)
+
+pkg_search_module(XXHASH IMPORTED_TARGET GLOBAL libxxhash)
+if(XXHASH_FOUND)
+    message(STATUS "Using system xxhash")
+    add_library(xxhash-shared INTERFACE)
+    target_link_libraries(xxhash-shared INTERFACE PkgConfig::XXHASH)
+    add_library(xxHash::xxhash ALIAS xxhash-shared)
+else()
 option(BUILD_SHARED_LIBS "Build shared library" OFF)
 set(XXHASH_BUILD_XXHSUM OFF CACHE BOOL "Build the xxhsum binary")
 add_subdirectory(core/deps/xxHash/cmake_unofficial)
+endif()
 target_link_libraries(${PROJECT_NAME} PRIVATE xxHash::xxhash)
 
+find_package(glm)
+if(NOT glm_FOUND)
 option(BUILD_SHARED_LIBS "Build shared library" OFF)
 add_subdirectory(core/deps/glm)
+endif()
 target_link_libraries(${PROJECT_NAME} PRIVATE glm::glm)
 
-if(USE_VULKAN)
+if(USE_HOST_SPIRV)
+    pkg_search_module(GLSLANG REQUIRED IMPORTED_TARGET GLOBAL glslang)
+    pkg_search_module(SPIRV REQUIRED IMPORTED_TARGET GLOBAL spirv)
+    message(STATUS "Using host glslang/spirv")
+    target_compile_definitions(${PROJECT_NAME} PRIVATE USE_HOST_SPIRV)
+    add_library(glslang-shared INTERFACE)
+    target_link_libraries(glslang-shared INTERFACE PkgConfig::glslang)
+    add_library(SPIRV-shared INTERFACE)
+    target_link_libraries(SPIRV-shared INTERFACE PkgConfig::SPIRV)
+    add_library(SPIRV ALIAS SPIRV-shared)
+    target_link_libraries(${PROJECT_NAME} PRIVATE glslang-shared)
+else()
 	option(BUILD_EXTERNAL "Build external dependencies in /External" OFF)
 	option(SKIP_GLSLANG_INSTALL "Skip installation" ON)
 	option(ENABLE_SPVREMAPPER "Enables building of SPVRemapper" OFF)
@@ -336,8 +363,8 @@ if(USE_VULKAN)
 	option(ENABLE_HLSL "Enables HLSL input support" OFF)
 	option(ENABLE_PCH "Enables Precompiled header" OFF)
 	add_subdirectory(core/deps/glslang EXCLUDE_FROM_ALL)
-	target_link_libraries(${PROJECT_NAME} PRIVATE SPIRV)
 endif()
+target_link_libraries(${PROJECT_NAME} PRIVATE SPIRV)
 
 if(NOT LIBRETRO)
 	find_package(ALSA)
@@ -393,9 +420,17 @@ if(NOT LIBRETRO)
 	endif()
 endif()
 
+if(USE_HOST_CHDR)
+    pkg_search_module(CHDR REQUIRED IMPORTED_TARGET GLOBAL libchdr)
+    message(STATUS "Using host libchdr")
+    add_library(chdr-static INTERFACE)
+    target_compile_definitions(chdr-static INTERFACE USE_HOST_CHDR)
+    target_link_libraries(chdr-static INTERFACE PkgConfig::CHDR)
+else()
 add_subdirectory(core/deps/libchdr EXCLUDE_FROM_ALL)
-target_link_libraries(${PROJECT_NAME} PRIVATE chdr-static)
 target_include_directories(${PROJECT_NAME} PRIVATE core/deps/libchdr/include)
+endif()
+target_link_libraries(${PROJECT_NAME} PRIVATE chdr-static)
 
 if(NOT WITH_SYSTEM_ZLIB)
 	target_include_directories(${PROJECT_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/core/deps/libchdr/deps/zlib-1.2.11")
@@ -407,7 +442,6 @@ if(NOT WITH_SYSTEM_ZLIB)
 	get_target_property(ZLIB_LIBRARY zlib LOCATION)
 endif()
 
-find_package(PkgConfig)
 if(PKG_CONFIG_FOUND AND NOT ANDROID AND NOT APPLE AND NOT LIBRETRO)
 	pkg_check_modules(AO IMPORTED_TARGET ao)
 	if(AO_FOUND)
@@ -634,8 +668,25 @@ target_sources(${PROJECT_NAME} PRIVATE
 		core/deps/picotcp/stack/pico_stack.c
 		core/deps/picotcp/stack/pico_tree.c)
 
+if(USE_HOST_CHDR AND NOT USE_HOST_LZMA)
+  message(STATUS "Host chdr enabled without shared lzma, disabling 7zip support")
+  set_property(GLOBAL PROPERTY DISABLE_7ZIP 1)
+  target_compile_definitions(${PROJECT_NAME} PRIVATE DISABLE_7ZIP)
+endif()
+
+if (USE_HOST_LZMA)
+  pkg_search_module(LZMA REQUIRED IMPORTED_TARGET GLOBAL lzmasdk-c)
+  if(LZMA_FOUND)
+    message(STATUS "Using host lzmasdk")
+    target_compile_definitions(${PROJECT_NAME} PRIVATE USE_HOST_LZMA)
+    target_link_libraries(${PROJECT_NAME} PRIVATE PkgConfig::LZMA)
+  endif()
+else()
+if(NOT DISABLE_7ZIP)
 target_compile_definitions(${PROJECT_NAME} PRIVATE _7ZIP_ST)
 target_sources(${PROJECT_NAME} PRIVATE core/deps/lzma/7zArcIn.c core/deps/lzma/7zBuf.c core/deps/lzma/7zCrc.c core/deps/lzma/7zCrcOpt.c core/deps/lzma/7zDec.c core/deps/lzma/7zFile.c core/deps/lzma/7zStream.c core/deps/lzma/Alloc.c core/deps/lzma/Bcj2.c core/deps/lzma/Bra86.c core/deps/lzma/Bra.c core/deps/lzma/BraIA64.c core/deps/lzma/CpuArch.c core/deps/lzma/Delta.c core/deps/lzma/LzFind.c core/deps/lzma/Lzma2Dec.c core/deps/lzma/Lzma86Dec.c core/deps/lzma/Lzma86Enc.c core/deps/lzma/LzmaDec.c core/deps/lzma/LzmaEnc.c core/deps/lzma/LzmaLib.c core/deps/lzma/Sort.c)
+endif()
+endif()
 target_sources(${PROJECT_NAME} PRIVATE core/deps/libelf/elf32.cpp core/deps/libelf/elf64.cpp core/deps/libelf/elf.cpp)
 if(NOT LIBRETRO)
 	target_sources(${PROJECT_NAME} PRIVATE core/deps/imgui/imgui.cpp core/deps/imgui/imgui_demo.cpp core/deps/imgui/imgui_draw.cpp core/deps/imgui/imgui_widgets.cpp)
@@ -681,9 +732,13 @@ if(LIBRETRO)
 		shell/libretro/vmu_xhair.cpp)
 endif()
 
-target_sources(${PROJECT_NAME} PRIVATE
+if(NOT DISABLE_7ZIP)
+  target_sources(${PROJECT_NAME} PRIVATE
 		core/archive/7zArchive.cpp
-		core/archive/7zArchive.h
+		core/archive/7zArchive.h)
+endif()
+
+target_sources(${PROJECT_NAME} PRIVATE
 		core/archive/archive.cpp
 		core/archive/archive.h
 		core/archive/rzip.cpp
@@ -1116,7 +1171,14 @@ if(USE_VULKAN)
 		target_compile_definitions(${PROJECT_NAME} PUBLIC VK_USE_PLATFORM_MACOS_MVK)
 	endif()
 
+	find_path(vulkan_INCLUDE_DIRS vulkan/vulkan.h)
+	if(vulkan_INCLUDE_DIRS)
+		message(STATUS "Using the system vulkan-headers")
+		add_library(vulkan-shared INTERFACE)
+		add_library(Vulkan::Headers ALIAS vulkan-shared)
+	else()
 	add_subdirectory(core/deps/Vulkan-Headers)
+	endif()
 	target_link_libraries(${PROJECT_NAME} PRIVATE Vulkan::Headers)
 
 	add_library(VulkanMemoryAllocator INTERFACE)
@@ -1322,7 +1384,15 @@ if(CMAKE_SYSTEM_PROCESSOR MATCHES "^(aarch64.*|AARCH64.*|arm64.*)" OR CMAKE_OSX_
 	set(KNOWN_ARCHITECTURE_DETECTED ON)
 endif()
 if(CMAKE_SYSTEM_PROCESSOR MATCHES "i686.*|i386.*|x86.*|amd64.*|x86_64.*|AMD64.*" OR CMAKE_OSX_ARCHITECTURES MATCHES "x86_64")
+	find_package(xbyak 6)
+	if(xbyak_FOUND)
+		message(STATUS "Using the system xbyak")
+		add_library(xbyak-shared INTERFACE)
+		target_link_libraries(xbyak-shared INTERFACE xbyak::xbyak)
+		add_library(xbyak::xbyak ALIAS xbyak-shared)
+	else()
 	add_subdirectory(core/deps/xbyak EXCLUDE_FROM_ALL)
+	endif()
 	target_link_libraries(${PROJECT_NAME} PRIVATE xbyak::xbyak)
 	if(CMAKE_SIZEOF_VOID_P EQUAL 4)
 		target_sources(${PROJECT_NAME} PRIVATE
diff --git a/core/archive/7zArchive.cpp b/core/archive/7zArchive.cpp
index 9a74502..d743695 100644
--- a/core/archive/7zArchive.cpp
+++ b/core/archive/7zArchive.cpp
@@ -19,9 +19,16 @@
     along with reicast.  If not, see <https://www.gnu.org/licenses/>.
  */
 #include "7zArchive.h"
+
+#ifdef USE_HOST_LZMA
+#include <7z.h>
+#include <7zCrc.h>
+#include <Alloc.h>
+#else
 #include "deps/lzma/7z.h"
 #include "deps/lzma/7zCrc.h"
 #include "deps/lzma/Alloc.h"
+#endif
 
 #define kInputBufSize ((size_t)1 << 18)
 
diff --git a/core/archive/7zArchive.h b/core/archive/7zArchive.h
index 797f1bb..ef79635 100644
--- a/core/archive/7zArchive.h
+++ b/core/archive/7zArchive.h
@@ -21,8 +21,13 @@
 #pragma once
 
 #include "archive.h"
+#ifdef USE_HOST_LZMA
+#include <7z.h>
+#include <7zFile.h>
+#else
 #include "deps/lzma/7z.h"
 #include "deps/lzma/7zFile.h"
+#endif
 
 #include <algorithm>
 
diff --git a/core/archive/archive.cpp b/core/archive/archive.cpp
index 904839a..615011d 100644
--- a/core/archive/archive.cpp
+++ b/core/archive/archive.cpp
@@ -20,17 +20,21 @@
  */
 
 #include "archive.h"
+#ifndef DISABLE_7ZIP
 #include "7zArchive.h"
+#endif
 #include "ZipArchive.h"
 
 Archive *OpenArchive(const char *path)
 {
 	std::string base_path(path);
 
+#ifndef DISABLE_7ZIP
 	Archive *sz_archive = new SzArchive();
 	if (sz_archive->Open(base_path.c_str()) || sz_archive->Open((base_path + ".7z").c_str()) || sz_archive->Open((base_path + ".7Z").c_str()))
 		return sz_archive;
 	delete sz_archive;
+#endif
 
 	Archive *zip_archive = new ZipArchive();
 	if (zip_archive->Open(base_path.c_str()) || zip_archive->Open((base_path + ".zip").c_str()) || zip_archive->Open((base_path + ".ZIP").c_str()))
diff --git a/core/rend/vulkan/compiler.cpp b/core/rend/vulkan/compiler.cpp
index 8c017b3..1485a13 100644
--- a/core/rend/vulkan/compiler.cpp
+++ b/core/rend/vulkan/compiler.cpp
@@ -19,7 +19,11 @@
     along with Flycast.  If not, see <https://www.gnu.org/licenses/>.
 */
 #include "compiler.h"
+#ifdef USE_HOST_SPIRV
+#include <glslang/SPIRV/GlslangToSpv.h>
+#else
 #include "SPIRV/GlslangToSpv.h"
+#endif
 #include "vulkan_context.h"
 
 static const TBuiltInResource DefaultTBuiltInResource = {
diff --git a/core/rend/vulkan/shaders.h b/core/rend/vulkan/shaders.h
index f58ac0d..2ef9b1f 100644
--- a/core/rend/vulkan/shaders.h
+++ b/core/rend/vulkan/shaders.h
@@ -20,7 +20,11 @@
 */
 #pragma once
 #include "vulkan.h"
+#ifdef USE_HOST_SPIRV
+#include <glslang/SPIRV/GlslangToSpv.h>
+#else
 #include "SPIRV/GlslangToSpv.h"
+#endif
 
 #include <glm/glm.hpp>
 #include <map>
-- 
2.39.0

