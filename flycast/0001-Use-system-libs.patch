From 9ad6addb403dcc14c2b790e8a137038da5c15bbe Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Fri, 7 Aug 2020 09:01:42 -0300
Subject: [PATCH] Use system libs

---
 CMakeLists.txt                | 47 ++++++++++++++++++++++++++++++++---
 core/archive/archive.cpp      |  4 +++
 core/imgread/chd.cpp          |  4 +++
 core/rend/vulkan/compiler.cpp |  4 +++
 core/rend/vulkan/shaders.h    |  4 +++
 5 files changed, 60 insertions(+), 3 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index bbbee4c..f9be505 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -11,6 +11,8 @@ option(ENABLE_OPROFILE "Enable OProfile" OFF)
 option(TEST_AUTOMATION "Enable test automation" OFF)
 option(ENABLE_LOG "Enable full logging" OFF)
 option(ASAN "Enable address sanitizer" OFF)
+OPTION(USE_SYSTEM_CHDR "Dynamically link against system libchdr" OFF)
+OPTION(USE_SYSTEM_SPIRV "Dynamically link against system glslang/spirv" OFF)
 
 project(flycast)
 
@@ -89,17 +91,38 @@ else()
     target_compile_definitions(${PROJECT_NAME} PRIVATE TARGET_NO_OPENMP)
 endif()
 
+find_package(PkgConfig QUIET)
+
+pkg_search_module(XXHASH REQUIRED libxxhash)
+if(XXHASH_FOUND)
+    message(STATUS "Using system xxhash")
+    target_include_directories(${PROJECT_NAME} PRIVATE ${XXHASH_INCLUDE_DIRS})
+    target_link_libraries(${PROJECT_NAME} PRIVATE ${XXHASH_LIBRARIES})
+else()
 option(BUILD_SHARED_LIBS "Build shared library" OFF)
 set(XXHASH_BUILD_XXHSUM OFF CACHE BOOL "Build the xxhsum binary")
 add_subdirectory(core/deps/xxHash/cmake_unofficial)
 target_link_libraries(${PROJECT_NAME} PRIVATE xxHash::xxhash)
+endif()
 
+find_package(glm)
+if(NOT glm_FOUND)
 option(BUILD_SHARED_LIBS "Build shared library" OFF)
 add_subdirectory(core/deps/glm)
 target_link_libraries(${PROJECT_NAME} PRIVATE glm::glm)
+endif()
 
+if(USE_SYSTEM_SPIRV)
+    pkg_search_module(GLSLANG REQUIRED glslang)
+    pkg_search_module(SPIRV REQUIRED spirv)
+    message(STATUS "Using system glslang/spirv")
+    target_compile_definitions(${PROJECT_NAME} PRIVATE USE_SYSTEM_SPIRV)
+    target_include_directories(${PROJECT_NAME} PRIVATE ${GLSLANG_INCLUDE_DIRS} ${SPIRV_INCLUDE_DIRS})
+    target_link_libraries(${PROJECT_NAME} PRIVATE ${GLSLANG_LIBRARIES} ${SPIRV_LIBRARIES})
+else()
 add_subdirectory(core/deps/glslang)
 target_link_libraries(${PROJECT_NAME} PRIVATE SPIRV)
+endif()
 
 find_package(ALSA QUIET)
 if(ALSA_FOUND)
@@ -159,7 +182,6 @@ else()
     target_link_libraries(${PROJECT_NAME} PRIVATE zlibstatic)
 endif()
 
-find_package(PkgConfig QUIET)
 if(PKG_CONFIG_FOUND)
     pkg_search_module(AO ao)
     if(AO_FOUND)
@@ -168,11 +190,13 @@ if(PKG_CONFIG_FOUND)
         target_link_libraries(${PROJECT_NAME} PRIVATE ${AO_LIBRARIES})
     endif()
 
+    if(NOT USE_SYSTEM_CHDR)
     pkg_search_module(FLAC flac)
     if(FLAC_FOUND)
         target_include_directories(${PROJECT_NAME} PRIVATE ${FLAC_INCLUDE_DIRS})
         target_link_libraries(${PROJECT_NAME} PRIVATE ${FLAC_LIBRARIES})
     endif()
+    endif()
 
     pkg_search_module(LIBEVDEV libevdev)
     if(LIBEVDEV_FOUND)
@@ -243,6 +267,14 @@ target_sources(${PROJECT_NAME} PRIVATE
         core/deps/chdpsr/cdipsr.h)
 
 target_compile_definitions(${PROJECT_NAME} PRIVATE CHD5_FLAC CHD5_LZMA)
+
+if(USE_SYSTEM_CHDR)
+    pkg_search_module(CHDR REQUIRED libchdr)
+    message(STATUS "Using shared libchdr")
+    target_compile_definitions(${PROJECT_NAME} PRIVATE USE_SYSTEM_CHDR)
+    target_include_directories(${PROJECT_NAME} PRIVATE ${CHDR_INCLUDE_DIRS})
+    target_link_libraries(${PROJECT_NAME} PRIVATE ${CHDR_LIBRARIES})
+else()
 target_sources(${PROJECT_NAME} PRIVATE
         core/deps/chdr/bitstream.c
         core/deps/chdr/bitstream.h
@@ -255,11 +287,13 @@ target_sources(${PROJECT_NAME} PRIVATE
         core/deps/chdr/flac.h
         core/deps/chdr/huffman.c
         core/deps/chdr/huffman.h)
+endif()
 
 target_sources(${PROJECT_NAME} PRIVATE
         core/deps/coreio/coreio.cpp
         core/deps/coreio/coreio.h)
 
+if(NOT USE_SYSTEM_CHDR)
 target_sources(${PROJECT_NAME} PRIVATE
         core/deps/crypto/md5.cpp
         core/deps/crypto/md5.h
@@ -294,6 +328,7 @@ if(NOT FLAC_FOUND)
             core/deps/flac/src/libFLAC/window.c
             core/deps/flac/src/libFLAC/windows_unicode_filenames.c)
 endif()
+endif()
 
 if(MSVC)
     target_include_directories(${PROJECT_NAME} PRIVATE core/deps/dirent)
@@ -416,15 +451,21 @@ else()
     endif()
 endif()
 
+if(NOT USE_SYSTEM_CHDR)
 target_compile_definitions(${PROJECT_NAME} PRIVATE _7ZIP_ST)
 target_sources(${PROJECT_NAME} PRIVATE core/deps/lzma/7zArcIn.c core/deps/lzma/7zBuf.c core/deps/lzma/7zCrc.c core/deps/lzma/7zCrcOpt.c core/deps/lzma/7zDec.c core/deps/lzma/7zFile.c core/deps/lzma/7zStream.c core/deps/lzma/Alloc.c core/deps/lzma/Bcj2.c core/deps/lzma/Bra86.c core/deps/lzma/Bra.c core/deps/lzma/BraIA64.c core/deps/lzma/CpuArch.c core/deps/lzma/Delta.c core/deps/lzma/LzFind.c core/deps/lzma/Lzma2Dec.c core/deps/lzma/Lzma86Dec.c core/deps/lzma/Lzma86Enc.c core/deps/lzma/LzmaDec.c core/deps/lzma/LzmaEnc.c core/deps/lzma/LzmaLib.c core/deps/lzma/Sort.c)
+endif()
 target_sources(${PROJECT_NAME} PRIVATE core/deps/libelf/elf32.cpp core/deps/libelf/elf64.cpp core/deps/libelf/elf.cpp)
 target_sources(${PROJECT_NAME} PRIVATE core/deps/imgui/imgui.cpp core/deps/imgui/imgui_demo.cpp core/deps/imgui/imgui_draw.cpp core/deps/imgui/imgui_widgets.cpp)
 target_sources(${PROJECT_NAME} PRIVATE core/deps/xbrz/xbrz.cpp)
 
-target_sources(${PROJECT_NAME} PRIVATE
+if(NOT USE_SYSTEM_CHDR)
+  target_sources(${PROJECT_NAME} PRIVATE
         core/archive/7zArchive.cpp
-        core/archive/7zArchive.h
+        core/archive/7zArchive.h)
+endif()
+
+target_sources(${PROJECT_NAME} PRIVATE
         core/archive/archive.cpp
         core/archive/archive.h)
 if(NOT MSVC)
diff --git a/core/archive/archive.cpp b/core/archive/archive.cpp
index 973e320..185d014 100644
--- a/core/archive/archive.cpp
+++ b/core/archive/archive.cpp
@@ -20,7 +20,9 @@
  */
 
 #include "archive.h"
+#ifndef USE_SYSTEM_CHDR
 #include "7zArchive.h"
+#endif
 #ifndef _MSC_VER
 #include "ZipArchive.h"
 #endif
@@ -29,10 +31,12 @@ Archive *OpenArchive(const char *path)
 {
 	std::string base_path(path);
 
+#ifndef USE_SYSTEM_CHDR
 	Archive *sz_archive = new SzArchive();
 	if (sz_archive->Open(base_path.c_str()) || sz_archive->Open((base_path + ".7z").c_str()) || sz_archive->Open((base_path + ".7Z").c_str()))
 		return sz_archive;
 	delete sz_archive;
+#endif
 
 #ifndef _MSC_VER
 	Archive *zip_archive = new ZipArchive();
diff --git a/core/imgread/chd.cpp b/core/imgread/chd.cpp
index 3a55f80..7405cf2 100644
--- a/core/imgread/chd.cpp
+++ b/core/imgread/chd.cpp
@@ -1,6 +1,10 @@
 #include "common.h"
 
+#ifdef USE_SYSTEM_CHDR
+#include <chd.h>
+#else
 #include "deps/chdr/chd.h"
+#endif
 
 /* tracks are padded to a multiple of this many frames */
 const uint32_t CD_TRACK_PADDING = 4;
diff --git a/core/rend/vulkan/compiler.cpp b/core/rend/vulkan/compiler.cpp
index ea644b4..485ecd3 100644
--- a/core/rend/vulkan/compiler.cpp
+++ b/core/rend/vulkan/compiler.cpp
@@ -19,7 +19,11 @@
     along with Flycast.  If not, see <https://www.gnu.org/licenses/>.
 */
 #include "compiler.h"
+#ifdef USE_SYSTEM_SPIRV
+#include <glslang/SPIRV/GlslangToSpv.h>
+#else
 #include "SPIRV/GlslangToSpv.h"
+#endif
 #include "vulkan_context.h"
 
 static const TBuiltInResource DefaultTBuiltInResource = {
diff --git a/core/rend/vulkan/shaders.h b/core/rend/vulkan/shaders.h
index ddb7b78..92b184f 100644
--- a/core/rend/vulkan/shaders.h
+++ b/core/rend/vulkan/shaders.h
@@ -20,7 +20,11 @@
 */
 #pragma once
 #include "vulkan.h"
+#ifdef USE_SYSTEM_SPIRV
+#include <glslang/SPIRV/GlslangToSpv.h>
+#else
 #include "SPIRV/GlslangToSpv.h"
+#endif
 
 #include <glm/glm.hpp>
 #include <map>
-- 
2.26.2

