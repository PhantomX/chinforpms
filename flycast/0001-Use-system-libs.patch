From be5a3065711171ba4865480745c9bf857ac81d4c Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Sun, 18 Jul 2021 20:20:11 -0300
Subject: [PATCH] Use system libs

---
 CMakeLists.txt                | 59 +++++++++++++++++++++++++++++++++--
 core/archive/7zArchive.cpp    |  7 +++++
 core/archive/7zArchive.h      |  5 +++
 core/archive/archive.cpp      |  4 +++
 core/rend/vulkan/compiler.cpp |  4 +++
 core/rend/vulkan/shaders.h    |  4 +++
 6 files changed, 80 insertions(+), 3 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 07ca010..e78369a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -16,6 +16,9 @@ option(USE_GLES2 "Use GLES2 API" OFF)
 option(USE_HOST_LIBZIP "Use host libzip" ON)
 option(USE_OPENMP "Use OpenMP if available" ON)
 option(USE_VULKAN "Build with Vulkan support" ON)
+option(USE_HOST_CHDR "Use host libchdr" OFF)
+option(USE_HOST_LZMA "Use host lzma-sdk" OFF)
+option(USE_HOST_SPIRV "Use host glslang/spirv" OFF)
 
 set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/shell/cmake")
 
@@ -100,20 +103,41 @@ else()
     target_compile_definitions(${PROJECT_NAME} PRIVATE TARGET_NO_OPENMP)
 endif()
 
+find_package(PkgConfig)
+
+pkg_search_module(XXHASH libxxhash)
+if(XXHASH_FOUND)
+    message(STATUS "Using system xxhash")
+    target_include_directories(${PROJECT_NAME} PRIVATE ${XXHASH_INCLUDE_DIRS})
+    target_link_libraries(${PROJECT_NAME} PRIVATE ${XXHASH_LIBRARIES})
+else()
 option(BUILD_SHARED_LIBS "Build shared library" OFF)
 set(XXHASH_BUILD_XXHSUM OFF CACHE BOOL "Build the xxhsum binary")
 add_subdirectory(core/deps/xxHash/cmake_unofficial)
 target_link_libraries(${PROJECT_NAME} PRIVATE xxHash::xxhash)
+endif()
 
+find_package(glm)
+if(NOT glm_FOUND)
 option(BUILD_SHARED_LIBS "Build shared library" OFF)
 add_subdirectory(core/deps/glm)
 target_link_libraries(${PROJECT_NAME} PRIVATE glm::glm)
+endif()
 
 if(NOT APPLE)
+if(USE_HOST_SPIRV)
+    pkg_search_module(GLSLANG REQUIRED glslang)
+    pkg_search_module(SPIRV REQUIRED spirv)
+    message(STATUS "Using host glslang/spirv")
+    target_compile_definitions(${PROJECT_NAME} PRIVATE USE_HOST_SPIRV)
+    target_include_directories(${PROJECT_NAME} PRIVATE ${GLSLANG_INCLUDE_DIRS} ${SPIRV_INCLUDE_DIRS})
+    target_link_libraries(${PROJECT_NAME} PRIVATE ${GLSLANG_LIBRARIES} ${SPIRV_LIBRARIES})
+else()
 	option(BUILD_EXTERNAL "Build external dependencies in /External" OFF)
 	add_subdirectory(core/deps/glslang)
 	target_link_libraries(${PROJECT_NAME} PRIVATE SPIRV)
 endif()
+endif()
 
 find_package(ALSA)
 if(ALSA_FOUND AND NOT ANDROID)
@@ -170,9 +194,17 @@ if(TARGET ZLIB::ZLIB AND NOT ANDROID AND NOT WIN32)
     set(WITH_SYSTEM_ZLIB ON CACHE BOOL "Use system provided zlib library")
     target_link_libraries(${PROJECT_NAME} PRIVATE ZLIB::ZLIB)
 endif()
+if(USE_HOST_CHDR)
+    pkg_search_module(CHDR REQUIRED libchdr)
+    message(STATUS "Using host libchdr")
+    target_compile_definitions(${PROJECT_NAME} PRIVATE USE_HOST_CHDR)
+    target_include_directories(${PROJECT_NAME} PRIVATE ${CHDR_INCLUDE_DIRS})
+    target_link_libraries(${PROJECT_NAME} PRIVATE ${CHDR_LIBRARIES})
+else()
 add_subdirectory(core/deps/libchdr)
 target_link_libraries(${PROJECT_NAME} PRIVATE chdr-static)
 target_include_directories(${PROJECT_NAME} PRIVATE core/deps/libchdr/include)
+endif()
 
 if(NOT WITH_SYSTEM_ZLIB)
     target_include_directories(${PROJECT_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/core/deps/libchdr/deps/zlib-1.2.11")
@@ -184,7 +216,6 @@ if(NOT WITH_SYSTEM_ZLIB)
     get_target_property(ZLIB_LIBRARY zlib LOCATION)
 endif()
 
-find_package(PkgConfig)
 if(PKG_CONFIG_FOUND AND NOT ANDROID AND NOT APPLE)
     pkg_check_modules(AO IMPORTED_TARGET ao)
     if(AO_FOUND)
@@ -382,15 +413,37 @@ if(NOT MSVC)
             core/deps/picotcp/stack/pico_tree.c)
 endif()
 
+if(USE_HOST_CHDR AND NOT USE_HOST_LZMA)
+  message(STATUS "Host chdr enabled without shared lzma, disabling 7zip support")
+  set_property(GLOBAL PROPERTY DISABLE_7ZIP 1)
+  target_compile_definitions(${PROJECT_NAME} PRIVATE DISABLE_7ZIP)
+endif()
+
+if (USE_HOST_LZMA)
+  pkg_search_module(LZMA REQUIRED lzmasdk-c)
+  if(LZMA_FOUND)
+    message(STATUS "Using host lzmasdk")
+    target_compile_definitions(${PROJECT_NAME} PRIVATE USE_HOST_LZMA)
+    target_include_directories(${PROJECT_NAME} PRIVATE ${LZMA_INCLUDE_DIRS})
+    target_link_libraries(${PROJECT_NAME} PRIVATE ${LZMA_LIBRARIES})
+  endif()
+else()
+if(NOT DISABLE_7ZIP)
 target_compile_definitions(${PROJECT_NAME} PRIVATE _7ZIP_ST)
 target_sources(${PROJECT_NAME} PRIVATE core/deps/lzma/7zArcIn.c core/deps/lzma/7zBuf.c core/deps/lzma/7zCrc.c core/deps/lzma/7zCrcOpt.c core/deps/lzma/7zDec.c core/deps/lzma/7zFile.c core/deps/lzma/7zStream.c core/deps/lzma/Alloc.c core/deps/lzma/Bcj2.c core/deps/lzma/Bra86.c core/deps/lzma/Bra.c core/deps/lzma/BraIA64.c core/deps/lzma/CpuArch.c core/deps/lzma/Delta.c core/deps/lzma/LzFind.c core/deps/lzma/Lzma2Dec.c core/deps/lzma/Lzma86Dec.c core/deps/lzma/Lzma86Enc.c core/deps/lzma/LzmaDec.c core/deps/lzma/LzmaEnc.c core/deps/lzma/LzmaLib.c core/deps/lzma/Sort.c)
+endif()
+endif()
 target_sources(${PROJECT_NAME} PRIVATE core/deps/libelf/elf32.cpp core/deps/libelf/elf64.cpp core/deps/libelf/elf.cpp)
 target_sources(${PROJECT_NAME} PRIVATE core/deps/imgui/imgui.cpp core/deps/imgui/imgui_demo.cpp core/deps/imgui/imgui_draw.cpp core/deps/imgui/imgui_widgets.cpp)
 target_sources(${PROJECT_NAME} PRIVATE core/deps/xbrz/xbrz.cpp)
 
-target_sources(${PROJECT_NAME} PRIVATE
+if(NOT DISABLE_7ZIP)
+  target_sources(${PROJECT_NAME} PRIVATE
         core/archive/7zArchive.cpp
-        core/archive/7zArchive.h
+        core/archive/7zArchive.h)
+endif()
+
+target_sources(${PROJECT_NAME} PRIVATE
         core/archive/archive.cpp
         core/archive/archive.h
         core/archive/rzip.cpp
diff --git a/core/archive/7zArchive.cpp b/core/archive/7zArchive.cpp
index 0bc167f..656360f 100644
--- a/core/archive/7zArchive.cpp
+++ b/core/archive/7zArchive.cpp
@@ -19,9 +19,16 @@
     along with reicast.  If not, see <https://www.gnu.org/licenses/>.
  */
 #include "7zArchive.h"
+
+#ifdef USE_HOST_LZMA
+#include <7z.h>
+#include <7zCrc.h>
+#include <Alloc.h>
+#else
 #include "deps/lzma/7z.h"
 #include "deps/lzma/7zCrc.h"
 #include "deps/lzma/Alloc.h"
+#endif
 
 #define kInputBufSize ((size_t)1 << 18)
 
diff --git a/core/archive/7zArchive.h b/core/archive/7zArchive.h
index 797f1bb..ef79635 100644
--- a/core/archive/7zArchive.h
+++ b/core/archive/7zArchive.h
@@ -21,8 +21,13 @@
 #pragma once
 
 #include "archive.h"
+#ifdef USE_HOST_LZMA
+#include <7z.h>
+#include <7zFile.h>
+#else
 #include "deps/lzma/7z.h"
 #include "deps/lzma/7zFile.h"
+#endif
 
 #include <algorithm>
 
diff --git a/core/archive/archive.cpp b/core/archive/archive.cpp
index 904839a..615011d 100644
--- a/core/archive/archive.cpp
+++ b/core/archive/archive.cpp
@@ -20,17 +20,21 @@
  */
 
 #include "archive.h"
+#ifndef DISABLE_7ZIP
 #include "7zArchive.h"
+#endif
 #include "ZipArchive.h"
 
 Archive *OpenArchive(const char *path)
 {
 	std::string base_path(path);
 
+#ifndef DISABLE_7ZIP
 	Archive *sz_archive = new SzArchive();
 	if (sz_archive->Open(base_path.c_str()) || sz_archive->Open((base_path + ".7z").c_str()) || sz_archive->Open((base_path + ".7Z").c_str()))
 		return sz_archive;
 	delete sz_archive;
+#endif
 
 	Archive *zip_archive = new ZipArchive();
 	if (zip_archive->Open(base_path.c_str()) || zip_archive->Open((base_path + ".zip").c_str()) || zip_archive->Open((base_path + ".ZIP").c_str()))
diff --git a/core/rend/vulkan/compiler.cpp b/core/rend/vulkan/compiler.cpp
index ea644b4..8bac74e 100644
--- a/core/rend/vulkan/compiler.cpp
+++ b/core/rend/vulkan/compiler.cpp
@@ -19,7 +19,11 @@
     along with Flycast.  If not, see <https://www.gnu.org/licenses/>.
 */
 #include "compiler.h"
+#ifdef USE_HOST_SPIRV
+#include <glslang/SPIRV/GlslangToSpv.h>
+#else
 #include "SPIRV/GlslangToSpv.h"
+#endif
 #include "vulkan_context.h"
 
 static const TBuiltInResource DefaultTBuiltInResource = {
diff --git a/core/rend/vulkan/shaders.h b/core/rend/vulkan/shaders.h
index e2ce5c1..c733f64 100644
--- a/core/rend/vulkan/shaders.h
+++ b/core/rend/vulkan/shaders.h
@@ -20,7 +20,11 @@
 */
 #pragma once
 #include "vulkan.h"
+#ifdef USE_HOST_SPIRV
+#include <glslang/SPIRV/GlslangToSpv.h>
+#else
 #include "SPIRV/GlslangToSpv.h"
+#endif
 
 #include <glm/glm.hpp>
 #include <map>
-- 
2.31.1

