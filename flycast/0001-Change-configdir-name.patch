From bd93b1c29c8d754370095df7dd6a79278437e041 Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Wed, 8 Apr 2020 11:39:01 -0300
Subject: [PATCH] Change configdir name

---
 core/linux-dist/main.cpp | 38 +++++++++++++++++++-------------------
 1 file changed, 19 insertions(+), 19 deletions(-)

diff --git a/core/linux-dist/main.cpp b/core/linux-dist/main.cpp
index 521e28f..51652b6 100644
--- a/core/linux-dist/main.cpp
+++ b/core/linux-dist/main.cpp
@@ -165,11 +165,11 @@ std::string find_user_config_dir()
 		std::string home = "";
 		if(getenv("HOME") != NULL)
 		{
-			// Support for the legacy config dir at "$HOME/.reicast"
-			std::string legacy_home = (std::string)getenv("HOME") + "/.reicast";
+			// Support for the legacy config dir at "$HOME/.flycast"
+			std::string legacy_home = (std::string)getenv("HOME") + "/.flycast";
 			if((stat(legacy_home.c_str(), &info) == 0) && (info.st_mode & S_IFDIR))
 			{
-				// "$HOME/.reicast" already exists, let's use it!
+				// "$HOME/.flycast" already exists, let's use it!
 				return legacy_home;
 			}
 
@@ -177,12 +177,12 @@ std::string find_user_config_dir()
 			 * Consult the XDG Base Directory Specification for details:
 			 *   http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html#variables
 			 */
-			home = (std::string)getenv("HOME") + "/.config/reicast";
+			home = (std::string)getenv("HOME") + "/.config/flycast";
 		}
 		if(getenv("XDG_CONFIG_HOME") != NULL)
 		{
 			// If XDG_CONFIG_HOME is set explicitly, we'll use that instead of $HOME/.config
-			home = (std::string)getenv("XDG_CONFIG_HOME") + "/reicast";
+			home = (std::string)getenv("XDG_CONFIG_HOME") + "/flycast";
 		}
 
 		if(!home.empty())
@@ -207,11 +207,11 @@ std::string find_user_data_dir()
 		std::string data = "";
 		if(getenv("HOME") != NULL)
 		{
-			// Support for the legacy config dir at "$HOME/.reicast"
-			std::string legacy_data = (std::string)getenv("HOME") + "/.reicast";
+			// Support for the legacy config dir at "$HOME/.flycast"
+			std::string legacy_data = (std::string)getenv("HOME") + "/.flycast";
 			if((stat(legacy_data.c_str(), &info) == 0) && (info.st_mode & S_IFDIR))
 			{
-				// "$HOME/.reicast" already exists, let's use it!
+				// "$HOME/.flycast" already exists, let's use it!
 				return legacy_data;
 			}
 
@@ -219,12 +219,12 @@ std::string find_user_data_dir()
 			 * Consult the XDG Base Directory Specification for details:
 			 *   http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html#variables
 			 */
-			data = (std::string)getenv("HOME") + "/.local/share/reicast";
+			data = (std::string)getenv("HOME") + "/.local/share/flycast";
 		}
 		if(getenv("XDG_DATA_HOME") != NULL)
 		{
 			// If XDG_DATA_HOME is set explicitly, we'll use that instead of $HOME/.config
-			data = (std::string)getenv("XDG_DATA_HOME") + "/reicast";
+			data = (std::string)getenv("XDG_DATA_HOME") + "/flycast";
 		}
 
 		if(!data.empty())
@@ -253,17 +253,17 @@ std::vector<std::string> find_system_config_dirs()
 		std::string::size_type n = s.find(':', pos);
 		while(n != std::string::npos)
 		{
-			dirs.push_back(s.substr(pos, n-pos) + "/reicast");
+			dirs.push_back(s.substr(pos, n-pos) + "/flycast");
 			pos = n + 1;
 			n = s.find(':', pos);
 		}
 		// Separator not found
-		dirs.push_back(s.substr(pos) + "/reicast");
+		dirs.push_back(s.substr(pos) + "/flycast");
 	}
 	else
 	{
-		dirs.push_back("/etc/reicast"); // This isn't part of the XDG spec, but much more common than /etc/xdg/
-		dirs.push_back("/etc/xdg/reicast");
+		dirs.push_back("/etc/flycast"); // This isn't part of the XDG spec, but much more common than /etc/xdg/
+		dirs.push_back("/etc/xdg/flycast");
 	}
 	return dirs;
 }
@@ -279,17 +279,17 @@ std::vector<std::string> find_system_data_dirs()
 		std::string::size_type n = s.find(':', pos);
 		while(n != std::string::npos)
 		{
-			dirs.push_back(s.substr(pos, n-pos) + "/reicast");
+			dirs.push_back(s.substr(pos, n-pos) + "/flycast");
 			pos = n + 1;
 			n = s.find(':', pos);
 		}
 		// Separator not found
-		dirs.push_back(s.substr(pos) + "/reicast");
+		dirs.push_back(s.substr(pos) + "/flycast");
 	}
 	else
 	{
-		dirs.push_back("/usr/local/share/reicast");
-		dirs.push_back("/usr/share/reicast");
+		dirs.push_back("/usr/local/share/flycast");
+		dirs.push_back("/usr/share/flycast");
 	}
 	return dirs;
 }
@@ -331,7 +331,7 @@ int main(int argc, char* argv[])
 	settings.profile.run_counts=0;
 
 	if (reicast_init(argc, argv))
-		die("Reicast initialization failed\n");
+		die("Flycast initialization failed\n");
 
 	#if FEAT_HAS_NIXPROF
 	install_prof_handler(1);
-- 
2.26.0

