From 1016fcab97ee63e8e78c0c8f2526da63a5469809 Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Sat, 14 Mar 2020 22:21:15 -0300
Subject: [PATCH] Change configdir name

---
 core/linux-dist/main.cpp | 34 +++++++++++++++++-----------------
 1 file changed, 17 insertions(+), 17 deletions(-)

diff --git a/core/linux-dist/main.cpp b/core/linux-dist/main.cpp
index e1a37f4..a10b3a2 100644
--- a/core/linux-dist/main.cpp
+++ b/core/linux-dist/main.cpp
@@ -175,8 +175,8 @@ string find_user_config_dir()
 		string home = "";
 		if(getenv("HOME") != NULL)
 		{
-			// Support for the legacy config dir at "$HOME/.reicast"
-			string legacy_home = (string)getenv("HOME") + "/.reicast";
+			// Support for the legacy config dir at "$HOME/.flycast"
+			string legacy_home = (string)getenv("HOME") + "/.flycast";
 			if((stat(legacy_home.c_str(), &info) == 0) && (info.st_mode & S_IFDIR))
 			{
 				// "$HOME/.reicast" already exists, let's use it!
@@ -187,12 +187,12 @@ string find_user_config_dir()
 			 * Consult the XDG Base Directory Specification for details:
 			 *   http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html#variables
 			 */
-			home = (string)getenv("HOME") + "/.config/reicast";
+			home = (string)getenv("HOME") + "/.config/flycast";
 		}
 		if(getenv("XDG_CONFIG_HOME") != NULL)
 		{
 			// If XDG_CONFIG_HOME is set explicitly, we'll use that instead of $HOME/.config
-			home = (string)getenv("XDG_CONFIG_HOME") + "/reicast";
+			home = (string)getenv("XDG_CONFIG_HOME") + "/flycast";
 		}
 
 		if(!home.empty())
@@ -217,8 +217,8 @@ string find_user_data_dir()
 		string data = "";
 		if(getenv("HOME") != NULL)
 		{
-			// Support for the legacy config dir at "$HOME/.reicast"
-			string legacy_data = (string)getenv("HOME") + "/.reicast";
+			// Support for the legacy config dir at "$HOME/.flycast"
+			string legacy_data = (string)getenv("HOME") + "/.flycast";
 			if((stat(legacy_data.c_str(), &info) == 0) && (info.st_mode & S_IFDIR))
 			{
 				// "$HOME/.reicast" already exists, let's use it!
@@ -229,12 +229,12 @@ string find_user_data_dir()
 			 * Consult the XDG Base Directory Specification for details:
 			 *   http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html#variables
 			 */
-			data = (string)getenv("HOME") + "/.local/share/reicast";
+			data = (string)getenv("HOME") + "/.local/share/flycast";
 		}
 		if(getenv("XDG_DATA_HOME") != NULL)
 		{
 			// If XDG_DATA_HOME is set explicitly, we'll use that instead of $HOME/.config
-			data = (string)getenv("XDG_DATA_HOME") + "/reicast";
+			data = (string)getenv("XDG_DATA_HOME") + "/flycast";
 		}
 
 		if(!data.empty())
@@ -263,17 +263,17 @@ std::vector<string> find_system_config_dirs()
 		string::size_type n = s.find(':', pos);
 		while(n != std::string::npos)
 		{
-			dirs.push_back(s.substr(pos, n-pos) + "/reicast");
+			dirs.push_back(s.substr(pos, n-pos) + "/flycast");
 			pos = n + 1;
 			n = s.find(':', pos);
 		}
 		// Separator not found
-		dirs.push_back(s.substr(pos) + "/reicast");
+		dirs.push_back(s.substr(pos) + "/flycast");
 	}
 	else
 	{
-		dirs.push_back("/etc/reicast"); // This isn't part of the XDG spec, but much more common than /etc/xdg/
-		dirs.push_back("/etc/xdg/reicast");
+		dirs.push_back("/etc/flycast"); // This isn't part of the XDG spec, but much more common than /etc/xdg/
+		dirs.push_back("/etc/xdg/flycast");
 	}
 	return dirs;
 }
@@ -289,17 +289,17 @@ std::vector<string> find_system_data_dirs()
 		string::size_type n = s.find(':', pos);
 		while(n != std::string::npos)
 		{
-			dirs.push_back(s.substr(pos, n-pos) + "/reicast");
+			dirs.push_back(s.substr(pos, n-pos) + "/flycast");
 			pos = n + 1;
 			n = s.find(':', pos);
 		}
 		// Separator not found
-		dirs.push_back(s.substr(pos) + "/reicast");
+		dirs.push_back(s.substr(pos) + "/flycast");
 	}
 	else
 	{
-		dirs.push_back("/usr/local/share/reicast");
-		dirs.push_back("/usr/share/reicast");
+		dirs.push_back("/usr/local/share/flycast");
+		dirs.push_back("/usr/share/flycast");
 	}
 	return dirs;
 }
@@ -341,7 +341,7 @@ int main(int argc, char* argv[])
 	settings.profile.run_counts=0;
 
 	if (reicast_init(argc, argv))
-		die("Reicast initialization failed\n");
+		die("Flycast initialization failed\n");
 
 	#if FEAT_HAS_NIXPROF
 	install_prof_handler(1);
-- 
2.24.1

