From b38935f1cf701b019d1699197004c348e91963ad Mon Sep 17 00:00:00 2001
From: =?utf8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Fri, 13 May 2022 13:17:13 +0200
Subject: [PATCH] winegstreamer: Introduce a new custom memory allocator.
MIME-Version: 1.0
Content-Type: text/plain; charset=utf8
Content-Transfer-Encoding: 8bit

Signed-off-by: RÃ©mi Bernon <rbernon@codeweavers.com>
---
 dlls/winegstreamer/Makefile.in    |   1 +
 dlls/winegstreamer/unix_private.h |   3 +
 dlls/winegstreamer/wg_transform.c |  12 ++-
 4 files changed, 176 insertions(+), 2 deletions(-)

diff --git a/dlls/winegstreamer/Makefile.in b/dlls/winegstreamer/Makefile.in
index e4c2636d02d..50f4dc861d4 100644
--- a/dlls/winegstreamer/Makefile.in
+++ b/dlls/winegstreamer/Makefile.in
@@ -14,6 +14,7 @@ C_SRCS = \
 	mfplat.c \
 	quartz_parser.c \
 	quartz_transform.c \
+	wg_allocator.c \
 	wg_format.c \
 	wg_parser.c \
 	wg_transform.c \
diff --git a/dlls/winegstreamer/unix_private.h b/dlls/winegstreamer/unix_private.h
index 7bce8263aaf..16615ef0833 100644
--- a/dlls/winegstreamer/unix_private.h
+++ b/dlls/winegstreamer/unix_private.h
@@ -37,4 +37,7 @@ extern NTSTATUS wg_transform_destroy(void *args) DECLSPEC_HIDDEN;
 extern NTSTATUS wg_transform_push_data(void *args) DECLSPEC_HIDDEN;
 extern NTSTATUS wg_transform_read_data(void *args) DECLSPEC_HIDDEN;
 
+extern GstAllocator *wg_allocator_create(void) DECLSPEC_HIDDEN;
+extern void wg_allocator_destroy(GstAllocator *allocator) DECLSPEC_HIDDEN;
+
 #endif /* __WINE_WINEGSTREAMER_UNIX_PRIVATE_H */
diff --git a/dlls/winegstreamer/wg_transform.c b/dlls/winegstreamer/wg_transform.c
index 9a5c16afe74..16c73bcbcd6 100644
--- a/dlls/winegstreamer/wg_transform.c
+++ b/dlls/winegstreamer/wg_transform.c
@@ -47,6 +47,7 @@ GST_DEBUG_CATEGORY_EXTERN(wine);
 struct wg_transform
 {
     GstElement *container;
+    GstAllocator *allocator;
     GstPad *my_src, *my_sink;
     GstPad *their_sink, *their_src;
     GstSegment segment;
@@ -153,6 +154,7 @@ static gboolean transform_sink_query_cb(GstPad *pad, GstObject *parent, GstQuery
 
                 gst_buffer_pool_config_set_params(config, caps,
                         info.size, 0, 0);
+                gst_buffer_pool_config_set_allocator(config, transform->allocator, NULL);
                 if (!gst_buffer_pool_set_config(pool, config))
                     GST_ERROR("Failed to set pool %p config.", pool);
             }
@@ -162,9 +164,10 @@ static gboolean transform_sink_query_cb(GstPad *pad, GstObject *parent, GstQuery
                 GST_ERROR("Pool %p failed to activate.", pool);
 
             gst_query_add_allocation_pool(query, pool, info.size, 0, 0);
+            gst_query_add_allocation_param(query, transform->allocator, NULL);
 
-            GST_INFO("Proposing pool %p, buffer size %#zx, for query %p.",
-                    pool, info.size, query);
+            GST_INFO("Proposing pool %p, buffer size %#zx, allocator %p, for query %p.",
+                    pool, info.size, transform->allocator, query);
 
             g_object_unref(pool);
             return true;
@@ -222,6 +225,7 @@ NTSTATUS wg_transform_destroy(void *args)
     while ((sample = gst_atomic_queue_pop(transform->output_queue)))
         gst_sample_unref(sample);
 
+    wg_allocator_destroy(transform->allocator);
     g_object_unref(transform->their_sink);
     g_object_unref(transform->their_src);
     g_object_unref(transform->container);
@@ -326,6 +330,8 @@ NTSTATUS wg_transform_create(void *args)
         goto out;
     if (!(transform->output_queue = gst_atomic_queue_new(8)))
         goto out;
+    if (!(transform->allocator = wg_allocator_create()))
+        goto out;
     transform->input_max_length = 1;
     transform->output_plane_align = 0;
 
@@ -482,6 +488,8 @@ out:
         gst_object_unref(transform->my_src);
     if (src_caps)
         gst_caps_unref(src_caps);
+    if (transform->allocator)
+        wg_allocator_destroy(transform->allocator);
     if (transform->output_queue)
         gst_atomic_queue_unref(transform->output_queue);
     if (transform->input)
-- 
2.20.1

