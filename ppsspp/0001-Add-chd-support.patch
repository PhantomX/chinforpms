From 401e94a011a71214e424418c428b8628784f8ed7 Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Tue, 11 May 2021 20:17:41 -0300
Subject: [PATCH] Add chd support

Using shared library, modified from https://github.com/SleepyMan/ppsspp
See https://github.com/hrydgard/ppsspp/pull/13810

Performance is not good
---
 CMakeLists.txt                    |   9 ++
 Core/FileSystems/BlockDevices.cpp | 156 ++++++++++++++++++++++++++++++
 Core/FileSystems/BlockDevices.h   |  24 +++++
 Core/Loaders.cpp                  |   8 ++
 Core/Loaders.h                    |   3 +
 UI/MainScreen.cpp                 |   4 +
 6 files changed, 204 insertions(+)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index edbb416..13f162a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1955,6 +1955,15 @@ else()
 	target_link_libraries(${CoreLibName} libzstd_static)
 endif()
 
+find_package(PkgConfig QUIET)
+pkg_search_module(CHDR libchdr)
+if(CHDR_FOUND)
+message(STATUS "Enabling CHD support with shared libchdr")
+add_definitions(-DUSE_CHDR=1)
+include_directories(${CHDR_INCLUDE_DIRS})
+target_link_libraries(${CoreLibName} ${CHDR_LIBRARIES})
+endif()
+
 # Discord integration
 if(USE_DISCORD AND NOT IOS AND NOT LIBRETRO)
 	add_definitions(-DUSE_DISCORD=1)
diff --git a/Core/FileSystems/BlockDevices.cpp b/Core/FileSystems/BlockDevices.cpp
index 0cbd59b..5022290 100644
--- a/Core/FileSystems/BlockDevices.cpp
+++ b/Core/FileSystems/BlockDevices.cpp
@@ -29,6 +29,10 @@
 
 extern "C"
 {
+#ifdef USE_CHDR
+#include <dirent.h>
+#include <chd.h>
+#endif
 #include "zlib.h"
 #include "ext/libkirk/amctrl.h"
 #include "ext/libkirk/kirk_engine.h"
@@ -40,12 +44,23 @@ BlockDevice *constructBlockDevice(FileLoader *fileLoader) {
 	// Check for CISO
 	if (!fileLoader->Exists())
 		return nullptr;
+#ifdef USE_CHDR
+	char buffer[8]{};
+	size_t size = fileLoader->ReadAt(0, 1, 8, buffer);
+	if (size >= 4 && !memcmp(buffer, "CISO", 4))
+		return new CISOFileBlockDevice(fileLoader);
+	else if (size >= 4 && !memcmp(buffer, "\x00PBP", 4))
+		return new NPDRMDemoBlockDevice(fileLoader);
+	else if (size >= 8 && !memcmp(buffer, "MComprHD", 8))
+		return new CHDFileBlockDevice(fileLoader);
+#else
 	char buffer[4]{};
 	size_t size = fileLoader->ReadAt(0, 1, 4, buffer);
 	if (size == 4 && !memcmp(buffer, "CISO", 4))
 		return new CISOFileBlockDevice(fileLoader);
 	else if (size == 4 && !memcmp(buffer, "\x00PBP", 4))
 		return new NPDRMDemoBlockDevice(fileLoader);
+#endif
 	else
 		return new FileBlockDevice(fileLoader);
 }
@@ -379,6 +394,147 @@ bool CISOFileBlockDevice::ReadBlocks(u32 minBlock, int count, u8 *outPtr) {
 	return true;
 }
 
+#ifdef USE_CHDR
+/*
+ * CHD file
+ */
+static const UINT8 nullsha1[CHD_SHA1_BYTES] = { 0 };
+
+CHDFileBlockDevice::CHDFileBlockDevice(FileLoader *fileLoader)
+	: chd(), header()
+{
+  // Default, in case of failure
+  numBlocks = 0;
+
+  chd_header childHeader;
+
+  int depth = 0;
+  std::string paths[8];
+  paths[0] = fileLoader->GetPath();
+
+  chd_error err = chd_read_header(paths[0].c_str(), &childHeader);
+  if (err != CHDERR_NONE) {
+    ERROR_LOG(LOADER, "Error loading CHD header for '%s': %s", fileLoader->GetPath().c_str(), chd_error_string(err));
+    NotifyReadError();
+    return;
+  }
+
+  if (memcmp(nullsha1, childHeader.parentsha1, sizeof(childHeader.sha1)) != 0) {
+    chd_header parentHeader;
+
+    // Look for parent CHD in current directory
+    std::string chdDir;
+#ifdef _WIN32
+    const size_t sepIndex = fileLoader->GetPath().rfind("\\");
+#else
+    const size_t sepIndex = fileLoader->GetPath().rfind("/");
+#endif
+    if (sepIndex != std::string::npos) {
+      chdDir = fileLoader->GetPath().substr(0, sepIndex);
+    } else {
+      chdDir = ".";
+    }
+    DIR *dir;
+    struct dirent *entry;
+    std::string filepath;
+
+    do {
+      parentHeader.length = 0;
+      dir = opendir(chdDir.c_str());
+      while ((entry = readdir(dir)) != NULL) {
+#ifdef _WIN32
+        filepath = chdDir + "\\" + entry->d_name;
+#else
+        filepath = chdDir + "/" + entry->d_name;
+#endif
+        if (chd_read_header(filepath.c_str(), &parentHeader) == CHDERR_NONE &&
+            memcmp(parentHeader.sha1, childHeader.parentsha1, sizeof(parentHeader.sha1)) == 0) {
+          // ERROR_LOG(LOADER, "Checking '%s'", filepath.c_str());
+          paths[++depth] = filepath;
+          break;
+        }
+      }
+      // Check if parentHeader was opened
+      if (parentHeader.length == 0) {
+        ERROR_LOG(LOADER, "Error loading CHD '%s': parents not found", fileLoader->GetPath().c_str());
+        NotifyReadError();
+        return;
+      }
+      memcpy(childHeader.parentsha1, parentHeader.parentsha1, sizeof(childHeader.parentsha1));
+    } while (memcmp(nullsha1, childHeader.parentsha1, sizeof(childHeader.sha1)) != 0);
+  }
+
+  chd_file *parent = NULL;
+  chd_file *child = NULL;
+  err = chd_open(paths[depth].c_str(), CHD_OPEN_READ, NULL, &child);
+  if (err != CHDERR_NONE) {
+    ERROR_LOG(LOADER, "Error loading CHD '%s': %s", paths[depth].c_str(), chd_error_string(err));
+    NotifyReadError();
+    return;
+  }
+  for (int d = depth-1; d >= 0; d--) {
+    parent = child;
+    child = NULL;
+    err = chd_open(paths[d].c_str(), CHD_OPEN_READ, parent, &child);
+    if (err != CHDERR_NONE) {
+      ERROR_LOG(LOADER, "Error loading CHD '%s': %s", paths[d].c_str(), chd_error_string(err));
+      NotifyReadError();
+      return;
+    }
+  }
+  chd = child;
+
+  header = chd_get_header(chd);
+  readBuffer = new u8[header->hunkbytes];
+  currentHunk = -1;
+  blocksPerHunk = header->hunkbytes / header->unitbytes;
+  numBlocks = header->unitcount;
+}
+
+CHDFileBlockDevice::~CHDFileBlockDevice()
+{
+  if (numBlocks > 0) {
+    chd_close(chd);
+	  delete [] readBuffer;
+  }
+}
+
+bool CHDFileBlockDevice::ReadBlock(int blockNumber, u8 *outPtr, bool uncached)
+{
+	if ((u32)blockNumber >= numBlocks) {
+		memset(outPtr, 0, GetBlockSize());
+		return false;
+	}
+  u32 hunk = blockNumber / blocksPerHunk;
+  u32 blockInHunk = blockNumber % blocksPerHunk;
+
+  if (currentHunk != hunk) {
+    chd_error err = chd_read(chd, hunk, readBuffer);
+    if (err != CHDERR_NONE) {
+      ERROR_LOG(LOADER, "CHD read failed: %d %d %s", blockNumber, hunk, chd_error_string(err));
+      NotifyReadError();
+    }
+  }
+  memcpy(outPtr, readBuffer + blockInHunk * header->unitbytes, GetBlockSize());
+
+	return true;
+}
+
+bool CHDFileBlockDevice::ReadBlocks(u32 minBlock, int count, u8 *outPtr) {
+	if (minBlock >= numBlocks) {
+		memset(outPtr, 0, GetBlockSize() * count);
+		return false;
+	}
+
+	for (int i = 0; i < count; i++) {
+		if (!ReadBlock(minBlock+i, outPtr+i*GetBlockSize())) {
+      return false;
+    }
+	}
+	return true;
+}
+#endif
+
 NPDRMDemoBlockDevice::NPDRMDemoBlockDevice(FileLoader *fileLoader)
 	: fileLoader_(fileLoader)
 {
diff --git a/Core/FileSystems/BlockDevices.h b/Core/FileSystems/BlockDevices.h
index 3268b27..89305f6 100644
--- a/Core/FileSystems/BlockDevices.h
+++ b/Core/FileSystems/BlockDevices.h
@@ -24,6 +24,9 @@
 // with CISO images.
 
 #include <mutex>
+#ifdef USE_CHDR
+#include <chd.h>
+#endif
 
 #include "Common/CommonTypes.h"
 #include "Core/ELF/PBPReader.h"
@@ -78,6 +81,27 @@ class CISOFileBlockDevice : public BlockDevice {
 };
 
 
+#ifdef USE_CHDR
+class CHDFileBlockDevice : public BlockDevice {
+public:
+	CHDFileBlockDevice(FileLoader *fileLoader);
+	~CHDFileBlockDevice();
+	bool ReadBlock(int blockNumber, u8 *outPtr, bool uncached = false) override;
+	bool ReadBlocks(u32 minBlock, int count, u8 *outPtr) override;
+	u32 GetNumBlocks() override { return numBlocks; }
+	bool IsDisc() override { return true; }
+
+private:
+  chd_file *chd;
+  const chd_header *header;
+	u8 *readBuffer;
+  u32 currentHunk;
+  u32 blocksPerHunk;
+  u32 numBlocks;
+};
+#endif
+
+
 class FileBlockDevice : public BlockDevice {
 public:
 	FileBlockDevice(FileLoader *fileLoader);
diff --git a/Core/Loaders.cpp b/Core/Loaders.cpp
index 6ae0509..414727e 100644
--- a/Core/Loaders.cpp
+++ b/Core/Loaders.cpp
@@ -87,6 +87,10 @@ IdentifiedFileType Identify_File(FileLoader *fileLoader) {
 			// maybe it also just happened to have that size, 
 		}
 		return IdentifiedFileType::PSP_ISO;
+#ifdef USE_CHDR
+	} else if (extension == ".chd") {
+		return IdentifiedFileType::PSP_ISO;
+#endif
 	} else if (extension == ".cso") {
 		return IdentifiedFileType::PSP_ISO;
 	} else if (extension == ".ppst") {
@@ -185,6 +189,10 @@ IdentifiedFileType Identify_File(FileLoader *fileLoader) {
 	} else if (extension == ".pbp") {
 		ERROR_LOG(LOADER, "A PBP with the wrong magic number?");
 		return IdentifiedFileType::PSP_PBP;
+#ifdef USE_CHDR
+	} else if (extension ==".chd") {
+		return IdentifiedFileType::ARCHIVE_CHD;
+#endif
 	} else if (extension == ".bin") {
 		return IdentifiedFileType::UNKNOWN_BIN;
 	} else if (extension == ".zip") {
diff --git a/Core/Loaders.h b/Core/Loaders.h
index 959ec62..f405a10 100644
--- a/Core/Loaders.h
+++ b/Core/Loaders.h
@@ -41,6 +41,9 @@ enum class IdentifiedFileType {
 	ARCHIVE_RAR,
 	ARCHIVE_ZIP,
 	ARCHIVE_7Z,
+#ifdef USE_CHDR
+	ARCHIVE_CHD,
+#endif
 	PSP_PS1_PBP,
 	ISO_MODE2,
 
diff --git a/UI/MainScreen.cpp b/UI/MainScreen.cpp
index 182c4fd..1641cfd 100644
--- a/UI/MainScreen.cpp
+++ b/UI/MainScreen.cpp
@@ -713,7 +713,11 @@ void GameBrowser::Refresh() {
 		}
 	} else if (!listingPending_) {
 		std::vector<File::FileInfo> fileInfo;
+#ifdef USE_CHDR
+		path_.GetListing(fileInfo, "iso:cso:pbp:elf:prx:ppdmp:chd:");
+#else
 		path_.GetListing(fileInfo, "iso:cso:pbp:elf:prx:ppdmp:");
+#endif
 		for (size_t i = 0; i < fileInfo.size(); i++) {
 			bool isGame = !fileInfo[i].isDirectory;
 			bool isSaveData = false;
-- 
2.31.1

