From 3b571b85dfee6a993db09fe15b1b87a53225a4ca Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Mon, 12 Feb 2024 23:11:26 -0300
Subject: [PATCH] Revert Some renaming, add a bunch of sanity debug-asserts

This reverts commit 25a1e6aa1438570d6ab45c3510aa7d6bd3a978f1

https://github.com/hrydgard/ppsspp/issues/18850
---
 Common/GPU/Vulkan/VulkanFrameData.cpp     | 11 +++++------
 Common/GPU/Vulkan/VulkanFrameData.h       |  6 +++---
 Common/GPU/Vulkan/VulkanQueueRunner.cpp   |  2 +-
 Common/GPU/Vulkan/VulkanRenderManager.cpp | 11 +++--------
 4 files changed, 12 insertions(+), 18 deletions(-)

diff --git a/Common/GPU/Vulkan/VulkanFrameData.cpp b/Common/GPU/Vulkan/VulkanFrameData.cpp
index a95dd42..66d6a9f 100644
--- a/Common/GPU/Vulkan/VulkanFrameData.cpp
+++ b/Common/GPU/Vulkan/VulkanFrameData.cpp
@@ -169,7 +169,7 @@ VkCommandBuffer FrameData::GetInitCmd(VulkanContext *vulkan) {
 	return initCmd;
 }
 
-void FrameData::Submit(VulkanContext *vulkan, FrameSubmitType type, FrameDataShared &sharedData) {
+void FrameData::SubmitPending(VulkanContext *vulkan, FrameSubmitType type, FrameDataShared &sharedData) {
 	VkCommandBuffer cmdBufs[3];
 	int numCmdBufs = 0;
 
@@ -200,8 +200,7 @@ void FrameData::Submit(VulkanContext *vulkan, FrameSubmitType type, FrameDataSha
 		hasMainCommands = false;
 	}
 
-	if (hasPresentCommands) {
-		_dbg_assert_(type != FrameSubmitType::Pending);
+	if (hasPresentCommands && type != FrameSubmitType::Pending) {
 		VkResult res = vkEndCommandBuffer(presentCmd);
 
 		_assert_msg_(res == VK_SUCCESS, "vkEndCommandBuffer failed (present)! result=%s", VulkanResultToString(res));
@@ -209,7 +208,7 @@ void FrameData::Submit(VulkanContext *vulkan, FrameSubmitType type, FrameDataSha
 		cmdBufs[numCmdBufs++] = presentCmd;
 		hasPresentCommands = false;
 
-		if (type == FrameSubmitType::FinishFrame) {
+		if (type == FrameSubmitType::Present) {
 			fenceToTrigger = fence;
 		}
 	}
@@ -221,7 +220,7 @@ void FrameData::Submit(VulkanContext *vulkan, FrameSubmitType type, FrameDataSha
 
 	VkSubmitInfo submit_info{ VK_STRUCTURE_TYPE_SUBMIT_INFO };
 	VkPipelineStageFlags waitStage[1]{ VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT };
-	if (type == FrameSubmitType::FinishFrame && !skipSwap) {
+	if (type == FrameSubmitType::Present && !skipSwap) {
 		_dbg_assert_(hasAcquired);
 		submit_info.waitSemaphoreCount = 1;
 		submit_info.pWaitSemaphores = &acquireSemaphore;
@@ -229,7 +228,7 @@ void FrameData::Submit(VulkanContext *vulkan, FrameSubmitType type, FrameDataSha
 	}
 	submit_info.commandBufferCount = (uint32_t)numCmdBufs;
 	submit_info.pCommandBuffers = cmdBufs;
-	if (type == FrameSubmitType::FinishFrame && !skipSwap) {
+	if (type == FrameSubmitType::Present && !skipSwap) {
 		submit_info.signalSemaphoreCount = 1;
 		submit_info.pSignalSemaphores = &renderingCompleteSemaphore;
 	}
diff --git a/Common/GPU/Vulkan/VulkanFrameData.h b/Common/GPU/Vulkan/VulkanFrameData.h
index 3a6e9d8..97d387e 100644
--- a/Common/GPU/Vulkan/VulkanFrameData.h
+++ b/Common/GPU/Vulkan/VulkanFrameData.h
@@ -65,7 +65,7 @@ struct FrameDataShared {
 enum class FrameSubmitType {
 	Pending,
 	Sync,
-	FinishFrame,
+	Present,
 };
 
 // Per-frame data, round-robin so we can overlap submission with execution of the previous frame.
@@ -121,8 +121,8 @@ struct FrameData {
 	// Generally called from the main thread, unlike most of the rest.
 	VkCommandBuffer GetInitCmd(VulkanContext *vulkan);
 
-	// Submits pending command buffers.
-	void Submit(VulkanContext *vulkan, FrameSubmitType type, FrameDataShared &shared);
+	// This will only submit if we are actually recording init commands.
+	void SubmitPending(VulkanContext *vulkan, FrameSubmitType type, FrameDataShared &shared);
 
 private:
 	// Metadata for logging etc
diff --git a/Common/GPU/Vulkan/VulkanQueueRunner.cpp b/Common/GPU/Vulkan/VulkanQueueRunner.cpp
index 07a2f99..cc84a0e 100644
--- a/Common/GPU/Vulkan/VulkanQueueRunner.cpp
+++ b/Common/GPU/Vulkan/VulkanQueueRunner.cpp
@@ -369,7 +369,7 @@ void VulkanQueueRunner::RunSteps(std::vector<VKRStep *> &steps, int curFrame, Fr
 				if (emitLabels) {
 					vkCmdEndDebugUtilsLabelEXT(cmd);
 				}
-				frameData.Submit(vulkan_, FrameSubmitType::Pending, frameDataShared);
+				frameData.SubmitPending(vulkan_, FrameSubmitType::Pending, frameDataShared);
 
 				// When stepping in the GE debugger, we can end up here multiple times in a "frame".
 				// So only acquire once.
diff --git a/Common/GPU/Vulkan/VulkanRenderManager.cpp b/Common/GPU/Vulkan/VulkanRenderManager.cpp
index d8a2bea..8cf7260 100644
--- a/Common/GPU/Vulkan/VulkanRenderManager.cpp
+++ b/Common/GPU/Vulkan/VulkanRenderManager.cpp
@@ -958,11 +958,6 @@ void VulkanRenderManager::BindFramebufferAsRenderTarget(VKRFramebuffer *fb, VKRR
 		EndCurRenderStep();
 	}
 
-	// Sanity check that we don't have binds to the backbuffer before binds to other buffers. It must always be bound last.
-	if (steps_.size() >= 1 && steps_.back()->stepType == VKRStepType::RENDER && steps_.back()->render.framebuffer == nullptr && fb != nullptr) {
-		_dbg_assert_(false);
-	}
-
 	// Older Mali drivers have issues with depth and stencil don't match load/clear/etc.
 	// TODO: Determine which versions and do this only where necessary.
 	u32 lateClearMask = 0;
@@ -1487,7 +1482,7 @@ void VulkanRenderManager::Run(VKRRenderThreadTask &task) {
 	if (!frameTimeHistory_[frameData.frameId].firstSubmit) {
 		frameTimeHistory_[frameData.frameId].firstSubmit = time_now_d();
 	}
-	frameData.Submit(vulkan_, FrameSubmitType::Pending, frameDataShared_);
+	frameData.SubmitPending(vulkan_, FrameSubmitType::Pending, frameDataShared_);
 
 	// Flush descriptors.
 	double descStart = time_now_d();
@@ -1524,12 +1519,12 @@ void VulkanRenderManager::Run(VKRRenderThreadTask &task) {
 
 	switch (task.runType) {
 	case VKRRunType::SUBMIT:
-		frameData.Submit(vulkan_, FrameSubmitType::FinishFrame, frameDataShared_);
+		frameData.SubmitPending(vulkan_, FrameSubmitType::Present, frameDataShared_);
 		break;
 
 	case VKRRunType::SYNC:
 		// The submit will trigger the readbackFence, and also do the wait for it.
-		frameData.Submit(vulkan_, FrameSubmitType::Sync, frameDataShared_);
+		frameData.SubmitPending(vulkan_, FrameSubmitType::Sync, frameDataShared_);
 
 		if (useRenderThread_) {
 			std::unique_lock<std::mutex> lock(syncMutex_);
-- 
2.43.0

