From 52447baa356c8c4a6f949cd51d2a8216842a381b Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Thu, 14 Aug 2025 20:44:13 -0300
Subject: [PATCH] Use system libraries

FindMBETLS.cmake from Dolphin-emu project:
https://github.com/dolphin-emu/dolphin
https://github.com/dolphin-emu/dolphin/raw/master/CMake/FindMBEDTLS.cmake
---
 CMakeLists.txt                        |  9 +++--
 CMakeModules/FindMBEDTLS.cmake        | 23 ++++++++++++
 externals/CMakeLists.txt              | 51 +++++++++++++++++++++++++++
 externals/ffmpeg/CMakeLists.txt       |  5 +++
 src/dynarmic/externals/CMakeLists.txt | 30 ++++++++++++++++
 src/yuzu/externals/CMakeLists.txt     | 11 ++++++
 6 files changed, 127 insertions(+), 2 deletions(-)
 create mode 100644 CMakeModules/FindMBEDTLS.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8fb69b9..51bea1a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -10,7 +10,6 @@ list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/externals/cmake-modul
 
 set(CPM_SOURCE_CACHE ${CMAKE_SOURCE_DIR}/.cache/cpm)
 
-include(DownloadExternals)
 include(CMakeDependentOption)
 include(CTest)
 
@@ -521,7 +520,7 @@ if (YUZU_USE_CPM)
     endif()
 else()
     # Enforce the search mode of non-required packages for better and shorter failure messages
-    find_package(fmt 8 REQUIRED)
+    find_package(fmt 8)
     find_package(LLVM MODULE COMPONENTS Demangle)
     find_package(nlohmann_json 3.8 REQUIRED)
     find_package(lz4 REQUIRED)
@@ -531,6 +530,12 @@ else()
     find_package(ZLIB 1.2 REQUIRED)
     find_package(zstd 1.5 REQUIRED)
 
+    if(fmt_FOUND)
+        message(STATUS "Using the system fmt")
+    else()
+        add_subdirectory("externals/fmt" EXCLUDE_FROM_ALL)
+    endif()
+
     if (YUZU_TESTS)
         find_package(Catch2 3.0.1 REQUIRED)
     endif()
diff --git a/CMakeModules/FindMBEDTLS.cmake b/CMakeModules/FindMBEDTLS.cmake
new file mode 100644
index 0000000..97c4515
--- /dev/null
+++ b/CMakeModules/FindMBEDTLS.cmake
@@ -0,0 +1,23 @@
+find_path(MBEDTLS_INCLUDE_DIR mbedtls/ssl.h)
+
+find_library(MBEDTLS_LIBRARY mbedtls)
+find_library(MBEDX509_LIBRARY mbedx509)
+find_library(MBEDCRYPTO_LIBRARY mbedcrypto)
+
+set(MBEDTLS_INCLUDE_DIRS ${MBEDTLS_INCLUDE_DIR})
+set(MBEDTLS_LIBRARIES ${MBEDTLS_LIBRARY} ${MBEDX509_LIBRARY} ${MBEDCRYPTO_LIBRARY})
+
+set(CMAKE_REQUIRED_INCLUDES ${MBEDTLS_INCLUDE_DIRS})
+check_cxx_source_compiles("
+	#include <mbedtls/version.h>
+	#if MBEDTLS_VERSION_NUMBER < 0x02040000
+	#error \"Your mbed TLS version is too old.\"
+	#endif
+	int main() {}"
+	MBEDTLS_VERSION_OK)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(MBEDTLS DEFAULT_MSG
+	MBEDTLS_INCLUDE_DIR MBEDTLS_LIBRARY MBEDX509_LIBRARY MBEDCRYPTO_LIBRARY MBEDTLS_VERSION_OK)
+
+mark_as_advanced(MBEDTLS_INCLUDE_DIR MBEDTLS_LIBRARY MBEDX509_LIBRARY MBEDCRYPTO_LIBRARY)
diff --git a/externals/CMakeLists.txt b/externals/CMakeLists.txt
index 91659ee..1f0bccb 100644
--- a/externals/CMakeLists.txt
+++ b/externals/CMakeLists.txt
@@ -41,12 +41,19 @@ if (ARCHITECTURE_x86 OR ARCHITECTURE_x86_64)
         set(XBYAK_SHA512SUM 5824e92159e07fa36a774aedd3b3ef3541d0241371d522cffa4ab3e1f215fa5097b1b77865b47b2481376c704fa079875557ea463ca63d0a7fd6a8a20a589e70)
     endif()
 
+  if (YUZU_USE_CPM)
     AddPackage(
         NAME xbyak
         REPO "Lizzie841/xbyak"
         SHA ${XBYAK_HASH}
         HASH ${XBYAK_SHA512SUM}
     )
+  else()
+    find_package(xbyak 7 CONFIG GLOBAL)
+    if (NOT TARGET xbyak::xbyak)
+      add_subdirectory(xbyak)
+    endif()
+  endif()
 endif()
 
 # Oaknut (also used by Dynarmic, so needs to be added first)
@@ -70,6 +77,7 @@ add_subdirectory(glad)
 
 # mbedtls
 # TODO(crueter): test local mbedtls
+if (YUZU_USE_CPM)
 AddPackage(
     NAME mbedtls
     REPO "Mbed-TLS/mbedtls"
@@ -78,6 +86,19 @@ AddPackage(
     PATCHES
         ${CMAKE_SOURCE_DIR}/.patch/mbedtls/0001-cmake-version.patch
 )
+else()
+  find_package(MBEDTLS GLOBAL)
+  if(MBEDTLS_FOUND)
+      message(STATUS "Using the system mbed TLS")
+      add_library(mbedtls-shared INTERFACE)
+      target_link_libraries(mbedtls-shared INTERFACE "${MBEDTLS_LIBRARIES}")
+      target_include_directories(mbedtls-shared INTERFACE "${MBEDTLS_INCLUDE_DIRS}")
+      add_library(mbedtls ALIAS mbedtls-shared)
+  else()
+      set(mbedtls_SOURCE_DIR ${PROJECT_SOURCE_DIR}/externals/mbedtls)
+      add_subdirectory(mbedtls)
+      set(mbedtls_ADDED ON)
+  endif()
 
 if (mbedtls_ADDED)
     target_include_directories(mbedtls PUBLIC ${mbedtls_SOURCE_DIR}/include)
@@ -88,6 +109,7 @@ if (mbedtls_ADDED)
             -Wno-string-concatenation)
     endif()
 endif()
+endif()
 
 # libusb
 if (ENABLE_LIBUSB AND NOT TARGET libusb::usb)
@@ -207,13 +229,18 @@ endif()
 
 # Sirit
 # TODO(crueter): spirv-tools doesn't work w/ system
+if (YUZU_USE_CPM)
 AddPackage(
     NAME SPIRV-Headers
     REPO "KhronosGroup/SPIRV-Headers"
     SHA 4e209d3d7e
     HASH f48bbe18341ed55ea0fe280dbbbc0a44bf222278de6e716e143ca1e95ca320b06d4d23d6583fbf8d03e1428f3dac8fa00e5b82ddcd6b425e6236d85af09550a4
 )
+else()
+  find_package(SPIRV-Headers GLOBAL)
+endif()
 
+if (YUZU_USE_CPM)
 AddPackage(
     NAME sirit
     REPO "eden-emulator/sirit"
@@ -222,9 +249,14 @@ AddPackage(
     OPTIONS
         "SIRIT_USE_SYSTEM_SPIRV_HEADERS ON"
 )
+else()
+  set(SIRIT_USE_SYSTEM_SPIRV_HEADERS ON)
+  add_subdirectory(sirit)
+endif()
 
 # httplib
 if ((ENABLE_WEB_SERVICE OR ENABLE_QT_UPDATE_CHECKER))
+  if (YUZU_USE_CPM)
     AddPackage(
         NAME httplib
         REPO "yhirose/cpp-httplib"
@@ -233,10 +265,17 @@ if ((ENABLE_WEB_SERVICE OR ENABLE_QT_UPDATE_CHECKER))
         OPTIONS
             "HTTPLIB_REQUIRE_OPENSSL ${ENABLE_OPENSSL}"
     )
+  else()
+    if (NOT TARGET httplib::httplib)
+      set(HTTPLIB_REQUIRE_OPENSSL ${ENABLE_OPENSSL})
+      add_subdirectory(cpp-httplib)
+    endif()
+  endif()
 endif()
 
 # cpp-jwt
 if (ENABLE_WEB_SERVICE)
+  if (YUZU_USE_CPM)
     AddPackage(
         NAME cpp-jwt
         VERSION 1.4
@@ -252,6 +291,14 @@ if (ENABLE_WEB_SERVICE)
             ${CMAKE_SOURCE_DIR}/.patch/cpp-jwt/0001-no-install.patch
             ${CMAKE_SOURCE_DIR}/.patch/cpp-jwt/0002-missing-decl.patch
     )
+  else()
+    if (NOT TARGET cpp-jwt::cpp-jwt)
+      set(CPP_JWT_BUILD_EXAMPLES OFF)
+      set(CPP_JWT_BUILD_TESTS OFF)
+      set(CPP_JWT_USE_VENDORED_NLOHMANN_JSON OFF)
+      add_subdirectory(cpp-jwt)
+    endif()
+  endif()
 endif()
 
 # Opus
@@ -319,6 +366,7 @@ endif()
 
 # Boost headers
 if (NOT Boost_ADDED AND NOT TARGET Boost::headers)
+  if (YUZU_USE_CPM)
     AddPackage(
         NAME boost_headers
         REPO "boostorg/headers"
@@ -326,6 +374,9 @@ if (NOT Boost_ADDED AND NOT TARGET Boost::headers)
         HASH 50cd75dcdfc5f082225cdace058f47b4fb114a47585f7aee1d22236a910a80b667186254c214fa2fcebac67ae6d37ba4b6e695e1faea8affd6fd42a03cf996e3
         BUNDLED_PACKAGE ON
     )
+  else()
+    add_subdirectory(boost-headers)
+  endif()
 endif()
 
 # TZDB (Time Zone Database)
diff --git a/externals/ffmpeg/CMakeLists.txt b/externals/ffmpeg/CMakeLists.txt
index 048ab36..284534a 100644
--- a/externals/ffmpeg/CMakeLists.txt
+++ b/externals/ffmpeg/CMakeLists.txt
@@ -19,6 +19,7 @@ if (NOT WIN32 AND NOT ANDROID)
         message(FATAL_ERROR "Required program `autoconf` not found.")
     endif()
 
+  if (YUZU_USE_CPM)
     AddPackage(
         NAME ffmpeg
         REPO "FFmpeg/FFmpeg"
@@ -29,6 +30,10 @@ if (NOT WIN32 AND NOT ANDROID)
 
     set(FFmpeg_PREFIX ${ffmpeg_SOURCE_DIR})
     set(FFmpeg_BUILD_DIR ${ffmpeg_BINARY_DIR})
+    else()
+      set(FFmpeg_PREFIX ${PROJECT_SOURCE_DIR}/externals/ffmpeg/ffmpeg)
+      set(FFmpeg_BUILD_DIR ${PROJECT_BINARY_DIR}/externals/ffmpeg-build)
+    endif()
     set(FFmpeg_MAKEFILE ${FFmpeg_BUILD_DIR}/Makefile)
     make_directory(${FFmpeg_BUILD_DIR})
 
diff --git a/src/dynarmic/externals/CMakeLists.txt b/src/dynarmic/externals/CMakeLists.txt
index 072558a..15119a2 100644
--- a/src/dynarmic/externals/CMakeLists.txt
+++ b/src/dynarmic/externals/CMakeLists.txt
@@ -50,6 +50,7 @@ if (NOT TARGET fmt::fmt)
 endif()
 
 # mcl
+if (YUZU_USE_CPM)
 AddPackage(
     NAME mcl
     VERSION 0.1.12
@@ -59,6 +60,13 @@ AddPackage(
     OPTIONS
         "MCL_INSTALL OFF"
 )
+else()
+  find_package(mcl 0.1.12 EXACT CONFIG)
+  if (NOT TARGET merry::mcl)
+      set(MCL_INSTALL ON)
+      add_subdirectory(mcl)
+  endif()
+endif()
 
 # oaknut
 
@@ -72,6 +80,7 @@ AddPackage(
 
 # unordered_dense
 
+if (YUZU_USE_CPM)
 AddPackage(
     NAME unordered_dense
     REPO "Lizzie841/unordered_dense"
@@ -81,6 +90,13 @@ AddPackage(
     OPTIONS
         "UNORDERED_DENSE_INSTALL OFF"
 )
+else()
+  find_package(unordered_dense CONFIG)
+  if (NOT TARGET ankerl::unordered_dense)
+      set(UNORDERED_DENSE_INSTALL ON)
+      add_subdirectory(unordered_dense)
+  endif()
+endif()
 
 # xbyak
 # uncomment if in an independent repo
@@ -96,6 +112,7 @@ AddPackage(
 # TODO(crueter): maybe it's just Gentoo but zydis system package really sucks
 if ("x86_64" IN_LIST ARCHITECTURE)
     # TODO(crueter): system zycore doesn't work with zydis
+  if (YUZU_USE_CPM)
     AddPackage(
         NAME Zycore
         REPO "zyantific/zycore-c"
@@ -122,4 +139,17 @@ if ("x86_64" IN_LIST ARCHITECTURE)
             "CMAKE_DISABLE_FIND_PACKAGE_Doxygen ON"
         EXCLUDE_FROM_ALL ON
     )
+  else()
+    find_package(Zydis 4 CONFIG)
+    if (NOT TARGET Zydis::Zydis)
+        set(ZYDIS_BUILD_TOOLS OFF)
+        set(ZYDIS_BUILD_EXAMPLES OFF)
+        set(ZYDIS_BUILD_DOXYGEN OFF)
+        set(ZYAN_ZYCORE_PATH "${CMAKE_CURRENT_LIST_DIR}/zycore-c" CACHE PATH "")
+        set(CMAKE_DISABLE_FIND_PACKAGE_Doxygen ON)
+        if (NOT TARGET Zydis)
+            add_subdirectory(zydis)
+        endif()
+    endif()
+  endif()
 endif()
diff --git a/src/yuzu/externals/CMakeLists.txt b/src/yuzu/externals/CMakeLists.txt
index d7f3f14..ef4736c 100644
--- a/src/yuzu/externals/CMakeLists.txt
+++ b/src/yuzu/externals/CMakeLists.txt
@@ -14,6 +14,7 @@ set(BUILD_SHARED_LIBS OFF)
 set_directory_properties(PROPERTIES EXCLUDE_FROM_ALL ON)
 
 # QuaZip
+if (YUZU_USE_CPM)
 AddPackage(
     NAME QuaZip-Qt6
     VERSION 1.3
@@ -23,3 +24,13 @@ AddPackage(
     OPTIONS
         "QUAZIP_INSTALL OFF"
 )
+else()
+  find_package(PkgConfig REQUIRED)
+  pkg_check_modules(quazip IMPORTED_TARGET quazip1-qt6)
+  if (TARGET PkgConfig::quazip)
+    message(STATUS "Using the system Quazip")
+    add_library(quazip INTERFACE)
+    target_link_libraries(quazip INTERFACE PkgConfig::quazip)
+    add_library(QuaZip::QuaZip ALIAS quazip)
+  endif()
+endif()
-- 
2.50.1

