From d32bbd52f7d51cb6a01306815267b0e39448c981 Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Mon, 4 Apr 2022 15:48:06 -0300
Subject: [PATCH] Use system libraries

CheckLib.cmake and enet search from Dolphin-emu project:
https://github.com/dolphin-emu/dolphin
---
 dep/CMakeLists.txt                    |  71 +++++++++++++-
 dep/discord-rpc/CMakeLists.txt        |   7 +-
 dep/minizip/CMakeLists.txt            |   8 +-
 dep/stb/CMakeLists.txt                |   5 +
 src/common/CMakeLists.txt             |  46 ++++++++-
 src/common/vulkan/shader_compiler.cpp | 129 ++++++++++++++++++++++++++
 src/core/CMakeLists.txt               |  12 ++-
 src/core/texture_replacements.cpp     |   2 +
 src/duckstation-qt/CMakeLists.txt     |   8 +-
 src/frontend-common/CMakeLists.txt    |   4 +-
 src/util/CMakeLists.txt               |  22 ++++-
 11 files changed, 301 insertions(+), 13 deletions(-)

diff --git a/dep/CMakeLists.txt b/dep/CMakeLists.txt
index 312ba8f..c143de7 100644
--- a/dep/CMakeLists.txt
+++ b/dep/CMakeLists.txt
@@ -1,22 +1,89 @@
+find_package(fmt 8)
+if(fmt_FOUND)
+  message(STATUS "Using the system fmt")
+else()
 add_subdirectory(fmt)
+endif()
 add_subdirectory(glad)
-add_subdirectory(stb)
+pkg_search_module(zlib zlib)
+if(zlib_FOUND)
+  message(STATUS "Using the system zlib")
+else()
 add_subdirectory(zlib)
+endif()
+
+add_subdirectory(stb)
+
+pkg_search_module(minizip minizip)
+if(minizip_FOUND)
+  message(STATUS "Using the system minizip")
+else()
 add_subdirectory(minizip)
+endif()
+
+pkg_search_module(libchdr libchdr)
+if(libchdr_FOUND)
+  message(STATUS "Using the system libchdr")
+else()
 add_subdirectory(lzma)
 add_subdirectory(libchdr)
+endif()
+
+pkg_search_module(xxhash libxxhash)
+if(xxhash_FOUND)
+  message(STATUS "Using the system libxxhash")
+else()
 add_subdirectory(xxhash)
+endif()
+
+pkg_search_module(rapidjson RapidJSON)
+if(rapidjson_FOUND)
+  message(STATUS "Using the system rapidjson")
+else()
 add_subdirectory(rapidjson)
+endif()
+
+pkg_search_module(SPIRV_Tools SPIRV-Tools)
+pkg_search_module(SPIRV spirv)
+pkg_search_module(glslang glslang)
+if(SPIRV_FOUND AND SPIRV_Tools_FOUND AND glslang_FOUND)
+  message(STATUS "Using the system glslang")
+else()
 add_subdirectory(glslang)
+endif()
+
 add_subdirectory(imgui)
 add_subdirectory(simpleini)
+
+find_path(vulkan_INCLUDE_DIRS vulkan/vulkan.h PATHS ${INCLUDE_INSTALL_DIR} /usr/include /usr/local/include)
+if(vulkan_INCLUDE_DIRS)
+  message(STATUS "Using the system vulkan-headers")
+else()
 add_subdirectory(vulkan)
+endif()
 
+pkg_search_module(samplerate samplerate)
+if(samplerate_FOUND)
+  message(STATUS "Using the system libsamplerate")
+else()
 set(LIBSAMPLERATE_ENABLE_SINC_BEST_CONVERTER OFF)
 add_subdirectory(libsamplerate)
+endif()
+
+find_package(tinyxml2)
+if(tinyxml2_FOUND)
+  message(STATUS "Using the system tinyxml2")
+else()
+  add_subdirectory(tinyxml2)
+endif()
+
+find_package(cubeb)
+if(cubeb_FOUND)
+  message(STATUS "Using the system cubeb")
+else()
+  add_subdirectory(cubeb)
+endif()
 
-add_subdirectory(tinyxml2)
-add_subdirectory(cubeb)
 add_subdirectory(googletest)
 
 if(ENABLE_DISCORD_PRESENCE)
diff --git a/dep/discord-rpc/CMakeLists.txt b/dep/discord-rpc/CMakeLists.txt
index b7a2511..6b5f9ed 100644
--- a/dep/discord-rpc/CMakeLists.txt
+++ b/dep/discord-rpc/CMakeLists.txt
@@ -13,7 +13,12 @@ set(SRCS
 
 add_library(discord-rpc ${SRCS})
 target_include_directories(discord-rpc PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/include")
-target_link_libraries(discord-rpc rapidjson)
+if(rapidjson_FOUND)
+target_include_directories(discord-rpc PRIVATE ${rapidjson_INCLUDE_DIRS})
+else()
+target_link_libraries(discord-rpc PRIVATE rapidjson)
+endif()
+target_link_libraries(discord-rpc)
 
 if(WIN32)
   target_sources(discord-rpc PRIVATE
diff --git a/dep/minizip/CMakeLists.txt b/dep/minizip/CMakeLists.txt
index 6a05c01..3e015fa 100644
--- a/dep/minizip/CMakeLists.txt
+++ b/dep/minizip/CMakeLists.txt
@@ -18,5 +18,11 @@ endif()
     
 target_include_directories(minizip PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/include")
 target_include_directories(minizip INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/include")
-target_link_libraries(minizip zlib)
+if(zlib_FOUND)
+target_include_directories(minizip PRIVATE ${zlib_INCLUDE_DIRS})
+target_link_libraries(minizip PRIVATE ${zlib_LIBRARIES})
+else()
+target_link_libraries(minizip PRIVATE zlib)
+endif()
+target_link_libraries(minizip)
 
diff --git a/dep/stb/CMakeLists.txt b/dep/stb/CMakeLists.txt
index 8206b10..bd575a4 100644
--- a/dep/stb/CMakeLists.txt
+++ b/dep/stb/CMakeLists.txt
@@ -9,5 +9,10 @@ set(SRCS
 
 add_library(stb ${SRCS})
 target_include_directories(stb PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/include" "${CMAKE_CURRENT_SOURCE_DIR}/src")
+if(zlib_FOUND)
+target_include_directories(stb INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/include" ${zlib_INCLUDE_DIRS})
+target_link_libraries(stb ${zlib_LIBRARIES} Threads::Threads "${CMAKE_DL_LIBS}")
+else()
 target_include_directories(stb INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/include")
 target_link_libraries(stb zlib Threads::Threads "${CMAKE_DL_LIBS}")
+endif()
diff --git a/src/common/CMakeLists.txt b/src/common/CMakeLists.txt
index 61a0814..3dd9292 100644
--- a/src/common/CMakeLists.txt
+++ b/src/common/CMakeLists.txt
@@ -86,10 +86,52 @@ add_library(common
   window_info.h
 )
 
+if(libchdr_FOUND)
+target_include_directories(common PRIVATE ${libchdr_INCLUDE_DIRS})
+target_link_libraries(common PRIVATE ${libchdr_LIBRARIES})
+else()
+target_link_libraries(common PRIVATE libchdr)
+endif()
+
+if(minizip_FOUND)
+target_include_directories(common PRIVATE ${minizip_INCLUDE_DIRS})
+target_link_libraries(common PRIVATE ${minizip_LIBRARIES})
+else()
+target_link_libraries(common PRIVATE minizip)
+endif()
+
+if(samplerate_FOUND)
+target_include_directories(common PRIVATE ${samplerate_INCLUDE_DIRS})
+target_link_libraries(common PRIVATE ${samplerate_LIBRARIES})
+else()
+target_link_libraries(common PRIVATE samplerate)
+endif()
+
+if(SPIRV_FOUND AND SPIRV_Tools_FOUND AND glslang_FOUND)
+target_compile_definitions(common PUBLIC "-DSYSTEM_GLSLANG=1")
+target_include_directories(common PRIVATE ${SPIRV_INCLUDE_DIRS} ${SPIRV_Tools_INCLUDE_DIRS} ${glslang_INCLUDE_DIRS})
+target_link_libraries(common PRIVATE MachineIndependent GenericCodeGen ${glslang_LIBRARIES} ${SPIRV_LIBRARIES} ${SPIRV_Tools_LIBRARIES})
+else()
+target_link_libraries(common PRIVATE glslang)
+endif()
+
+if(zlib_FOUND)
+target_include_directories(common PRIVATE ${zlib_INCLUDE_DIRS})
+target_link_libraries(common PRIVATE ${zlib_LIBRARIES})
+else()
+target_link_libraries(common PRIVATE zlib)
+endif()
+
+if(vulkan_INCLUDE_DIRS)
+target_include_directories(common PRIVATE ${vulkan_INCLUDE_DIRS})
+else()
+target_link_libraries(common PUBLIC vulkan-headers)
+endif()
+
 target_include_directories(common PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/..")
 target_include_directories(common PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/..")
-target_link_libraries(common PUBLIC fmt Threads::Threads vulkan-headers)
-target_link_libraries(common PRIVATE glad stb libchdr glslang zlib minizip samplerate "${CMAKE_DL_LIBS}")
+target_link_libraries(common PUBLIC fmt Threads::Threads)
+target_link_libraries(common PRIVATE glad stb "${CMAKE_DL_LIBS}")
 
 if(WIN32)
   target_sources(common PRIVATE
diff --git a/src/common/vulkan/shader_compiler.cpp b/src/common/vulkan/shader_compiler.cpp
index 45833e5..994614c 100644
--- a/src/common/vulkan/shader_compiler.cpp
+++ b/src/common/vulkan/shader_compiler.cpp
@@ -14,14 +14,25 @@
 Log_SetChannel(Vulkan::ShaderCompiler);
 
 // glslang includes
+#ifdef SYSTEM_GLSLANG
+#include <glslang/SPIRV/GlslangToSpv.h>
+#include <glslang/Include/ResourceLimits.h>
+#include <glslang/Public/ShaderLang.h>
+#else
 #include "SPIRV/GlslangToSpv.h"
 #include "StandAlone/ResourceLimits.h"
 #include "glslang/Public/ShaderLang.h"
+#endif
 
 namespace Vulkan::ShaderCompiler {
 // Registers itself for cleanup via atexit
 bool InitializeGlslang();
 
+#ifdef SYSTEM_GLSLANG
+// Resource limits used when compiling shaders
+static const TBuiltInResource* GetCompilerResourceLimits();
+#endif
+
 static unsigned s_next_bad_shader_id = 1;
 
 static bool glslang_initialized = false;
@@ -69,7 +80,11 @@ static std::optional<SPIRVCodeVector> CompileShaderToSPV(EShLanguage stage, cons
     }
   };
 
+#ifdef SYSTEM_GLSLANG
+  if (!shader->parse(GetCompilerResourceLimits(), default_version, profile, false, true, messages, includer))
+#else
   if (!shader->parse(&glslang::DefaultTBuiltInResource, default_version, profile, false, true, messages, includer))
+#endif
   {
     DumpBadShader("Failed to parse shader");
     return std::nullopt;
@@ -139,6 +154,120 @@ void DeinitializeGlslang()
   glslang_initialized = false;
 }
 
+#ifdef SYSTEM_GLSLANG
+const TBuiltInResource* GetCompilerResourceLimits()
+{
+  static const TBuiltInResource limits = {
+    /* .MaxLights = */ 32,
+    /* .MaxClipPlanes = */ 6,
+    /* .MaxTextureUnits = */ 32,
+    /* .MaxTextureCoords = */ 32,
+    /* .MaxVertexAttribs = */ 64,
+    /* .MaxVertexUniformComponents = */ 4096,
+    /* .MaxVaryingFloats = */ 64,
+    /* .MaxVertexTextureImageUnits = */ 32,
+    /* .MaxCombinedTextureImageUnits = */ 80,
+    /* .MaxTextureImageUnits = */ 32,
+    /* .MaxFragmentUniformComponents = */ 4096,
+    /* .MaxDrawBuffers = */ 32,
+    /* .MaxVertexUniformVectors = */ 128,
+    /* .MaxVaryingVectors = */ 8,
+    /* .MaxFragmentUniformVectors = */ 16,
+    /* .MaxVertexOutputVectors = */ 16,
+    /* .MaxFragmentInputVectors = */ 15,
+    /* .MinProgramTexelOffset = */ -8,
+    /* .MaxProgramTexelOffset = */ 7,
+    /* .MaxClipDistances = */ 8,
+    /* .MaxComputeWorkGroupCountX = */ 65535,
+    /* .MaxComputeWorkGroupCountY = */ 65535,
+    /* .MaxComputeWorkGroupCountZ = */ 65535,
+    /* .MaxComputeWorkGroupSizeX = */ 1024,
+    /* .MaxComputeWorkGroupSizeY = */ 1024,
+    /* .MaxComputeWorkGroupSizeZ = */ 64,
+    /* .MaxComputeUniformComponents = */ 1024,
+    /* .MaxComputeTextureImageUnits = */ 16,
+    /* .MaxComputeImageUniforms = */ 8,
+    /* .MaxComputeAtomicCounters = */ 8,
+    /* .MaxComputeAtomicCounterBuffers = */ 1,
+    /* .MaxVaryingComponents = */ 60,
+    /* .MaxVertexOutputComponents = */ 64,
+    /* .MaxGeometryInputComponents = */ 64,
+    /* .MaxGeometryOutputComponents = */ 128,
+    /* .MaxFragmentInputComponents = */ 128,
+    /* .MaxImageUnits = */ 8,
+    /* .MaxCombinedImageUnitsAndFragmentOutputs = */ 8,
+    /* .MaxCombinedShaderOutputResources = */ 8,
+    /* .MaxImageSamples = */ 0,
+    /* .MaxVertexImageUniforms = */ 0,
+    /* .MaxTessControlImageUniforms = */ 0,
+    /* .MaxTessEvaluationImageUniforms = */ 0,
+    /* .MaxGeometryImageUniforms = */ 0,
+    /* .MaxFragmentImageUniforms = */ 8,
+    /* .MaxCombinedImageUniforms = */ 8,
+    /* .MaxGeometryTextureImageUnits = */ 16,
+    /* .MaxGeometryOutputVertices = */ 256,
+    /* .MaxGeometryTotalOutputComponents = */ 1024,
+    /* .MaxGeometryUniformComponents = */ 1024,
+    /* .MaxGeometryVaryingComponents = */ 64,
+    /* .MaxTessControlInputComponents = */ 128,
+    /* .MaxTessControlOutputComponents = */ 128,
+    /* .MaxTessControlTextureImageUnits = */ 16,
+    /* .MaxTessControlUniformComponents = */ 1024,
+    /* .MaxTessControlTotalOutputComponents = */ 4096,
+    /* .MaxTessEvaluationInputComponents = */ 128,
+    /* .MaxTessEvaluationOutputComponents = */ 128,
+    /* .MaxTessEvaluationTextureImageUnits = */ 16,
+    /* .MaxTessEvaluationUniformComponents = */ 1024,
+    /* .MaxTessPatchComponents = */ 120,
+    /* .MaxPatchVertices = */ 32,
+    /* .MaxTessGenLevel = */ 64,
+    /* .MaxViewports = */ 16,
+    /* .MaxVertexAtomicCounters = */ 0,
+    /* .MaxTessControlAtomicCounters = */ 0,
+    /* .MaxTessEvaluationAtomicCounters = */ 0,
+    /* .MaxGeometryAtomicCounters = */ 0,
+    /* .MaxFragmentAtomicCounters = */ 8,
+    /* .MaxCombinedAtomicCounters = */ 8,
+    /* .MaxAtomicCounterBindings = */ 1,
+    /* .MaxVertexAtomicCounterBuffers = */ 0,
+    /* .MaxTessControlAtomicCounterBuffers = */ 0,
+    /* .MaxTessEvaluationAtomicCounterBuffers = */ 0,
+    /* .MaxGeometryAtomicCounterBuffers = */ 0,
+    /* .MaxFragmentAtomicCounterBuffers = */ 1,
+    /* .MaxCombinedAtomicCounterBuffers = */ 1,
+    /* .MaxAtomicCounterBufferSize = */ 16384,
+    /* .MaxTransformFeedbackBuffers = */ 4,
+    /* .MaxTransformFeedbackInterleavedComponents = */ 64,
+    /* .MaxCullDistances = */ 8,
+    /* .MaxCombinedClipAndCullDistances = */ 8,
+    /* .MaxSamples = */ 4,
+    /* .maxMeshOutputVerticesNV = */ 256,
+    /* .maxMeshOutputPrimitivesNV = */ 512,
+    /* .maxMeshWorkGroupSizeX_NV = */ 32,
+    /* .maxMeshWorkGroupSizeY_NV = */ 1,
+    /* .maxMeshWorkGroupSizeZ_NV = */ 1,
+    /* .maxTaskWorkGroupSizeX_NV = */ 32,
+    /* .maxTaskWorkGroupSizeY_NV = */ 1,
+    /* .maxTaskWorkGroupSizeZ_NV = */ 1,
+    /* .maxMeshViewCountNV = */ 4,
+    /* .maxDualSourceDrawBuffersEXT = */ 1,
+
+    /* .limits = */ {
+        /* .nonInductiveForLoops = */ 1,
+        /* .whileLoops = */ 1,
+        /* .doWhileLoops = */ 1,
+        /* .generalUniformIndexing = */ 1,
+        /* .generalAttributeMatrixVectorIndexing = */ 1,
+        /* .generalVaryingIndexing = */ 1,
+        /* .generalSamplerIndexing = */ 1,
+        /* .generalVariableIndexing = */ 1,
+        /* .generalConstantMatrixVectorIndexing = */ 1,
+  }};
+
+  return &limits;
+ }
+#endif
+
 std::optional<SPIRVCodeVector> CompileVertexShader(std::string_view source_code)
 {
   return CompileShaderToSPV(EShLangVertex, "vs", source_code);
diff --git a/src/core/CMakeLists.txt b/src/core/CMakeLists.txt
index f6239e6..2fac0af 100644
--- a/src/core/CMakeLists.txt
+++ b/src/core/CMakeLists.txt
@@ -118,10 +118,18 @@ set(RECOMPILER_SRCS
     cpu_recompiler_types.h
 )
 
+if(xxhash_FOUND)
+  target_compile_definitions(core PUBLIC "-DSYSTEM_XXHASH=1")
+  target_include_directories(core PRIVATE ${xxhash_INCLUDE_DIRS})
+  target_link_libraries(core PRIVATE ${xxhash_LIBRARIES})
+else()
+target_link_libraries(core PRIVATE xxhash)
+endif()
+
 target_include_directories(core PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/..")
 target_include_directories(core PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/..")
-target_link_libraries(core PUBLIC Threads::Threads common util zlib)
-target_link_libraries(core PRIVATE glad stb xxhash imgui rapidjson tinyxml2)
+target_link_libraries(core PUBLIC Threads::Threads common util)
+target_link_libraries(core PRIVATE glad stb imgui)
 
 if(WIN32)
   target_sources(core PRIVATE
diff --git a/src/core/texture_replacements.cpp b/src/core/texture_replacements.cpp
index 7d44aa4..3e5d910 100644
--- a/src/core/texture_replacements.cpp
+++ b/src/core/texture_replacements.cpp
@@ -9,9 +9,11 @@
 #include "host.h"
 #include "settings.h"
 #include "xxhash.h"
+#ifndef SYSTEM_XXHASH
 #if defined(CPU_X86) || defined(CPU_X64)
 #include "xxh_x86dispatch.h"
 #endif
+#endif
 #include <cinttypes>
 Log_SetChannel(TextureReplacements);
 
diff --git a/src/duckstation-qt/CMakeLists.txt b/src/duckstation-qt/CMakeLists.txt
index b5320e3..7336f85 100644
--- a/src/duckstation-qt/CMakeLists.txt
+++ b/src/duckstation-qt/CMakeLists.txt
@@ -160,7 +160,13 @@ qt6_add_translation(QM_FILES ${TS_FILES})
 
 add_executable(duckstation-qt ${SRCS} ${QM_FILES})
 target_include_directories(duckstation-qt PRIVATE "${Qt6Gui_PRIVATE_INCLUDE_DIRS}" "${CMAKE_CURRENT_SOURCE_DIR}")
-target_link_libraries(duckstation-qt PRIVATE frontend-common core common imgui glad minizip scmversion Qt6::Core Qt6::Gui Qt6::Widgets Qt6::Network)
+if(minizip_FOUND)
+target_include_directories(duckstation-qt PRIVATE ${minizip_INCLUDE_DIRS})
+target_link_libraries(duckstation-qt PRIVATE ${minizip_LIBRARIES})
+else()
+target_link_libraries(duckstation-qt PRIVATE minizip)
+endif()
+target_link_libraries(duckstation-qt PRIVATE frontend-common core common imgui glad scmversion Qt6::Core Qt6::Gui Qt6::Widgets Qt6::Network)
 
 if(WIN32)
   # We want a Windows subsystem application not console.
diff --git a/src/frontend-common/CMakeLists.txt b/src/frontend-common/CMakeLists.txt
index 91c12cf..c62ddde 100644
--- a/src/frontend-common/CMakeLists.txt
+++ b/src/frontend-common/CMakeLists.txt
@@ -40,7 +40,7 @@ add_library(frontend-common
   vulkan_host_display.h
 )
 
-target_link_libraries(frontend-common PUBLIC core common glad cubeb imgui tinyxml2 rapidjson scmversion)
+target_link_libraries(frontend-common PUBLIC core common glad cubeb imgui tinyxml2 scmversion)
 
 if(WIN32)
   target_sources(frontend-common PRIVATE
@@ -115,7 +115,7 @@ if(ENABLE_CHEEVOS)
     achievements.h
   )
   target_compile_definitions(frontend-common PUBLIC -DWITH_CHEEVOS=1)
-  target_link_libraries(frontend-common PRIVATE rcheevos rapidjson)
+  target_link_libraries(frontend-common PRIVATE rcheevos)
 endif()
 
 # Copy the provided data directory to the output directory.
diff --git a/src/util/CMakeLists.txt b/src/util/CMakeLists.txt
index 8cf36ce..492c942 100644
--- a/src/util/CMakeLists.txt
+++ b/src/util/CMakeLists.txt
@@ -44,4 +44,24 @@ add_library(util
 target_include_directories(util PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/..")
 target_include_directories(util PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/..")
 target_link_libraries(util PUBLIC common simpleini)
-target_link_libraries(util PRIVATE libchdr samplerate zlib)
+
+if(libchdr_FOUND)
+target_include_directories(util PRIVATE ${libchdr_INCLUDE_DIRS})
+target_link_libraries(util PRIVATE ${libchdr_LIBRARIES})
+else()
+target_link_libraries(util PRIVATE libchdr)
+endif()
+
+if(samplerate_FOUND)
+target_include_directories(util PRIVATE ${samplerate_INCLUDE_DIRS})
+target_link_libraries(util PRIVATE ${samplerate_LIBRARIES})
+else()
+target_link_libraries(util PRIVATE samplerate)
+endif()
+
+if(zlib_FOUND)
+target_include_directories(util PRIVATE ${zlib_INCLUDE_DIRS})
+target_link_libraries(util PRIVATE ${zlib_LIBRARIES})
+else()
+target_link_libraries(util PRIVATE zlib)
+endif()
-- 
2.37.1

