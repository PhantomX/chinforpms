From 449f8d6a715a13255e301d730ba3f442fa0a3f4f Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Mon, 1 Aug 2022 15:42:10 -0300
Subject: [PATCH] Use system libraries

---
 dep/CMakeLists.txt                | 96 +++++++++++++++++++++++++++++--
 src/core/gpu_hw_texture_cache.cpp |  4 +-
 src/util/compress_helpers.cpp     |  4 ++
 3 files changed, 98 insertions(+), 6 deletions(-)

diff --git a/dep/CMakeLists.txt b/dep/CMakeLists.txt
index 4b79ce8..58008f8 100644
--- a/dep/CMakeLists.txt
+++ b/dep/CMakeLists.txt
@@ -1,30 +1,98 @@
+find_package(fmt 11.0)
+if(fmt_FOUND)
+  message(STATUS "Using the system fmt")
+  add_library(fmt INTERFACE)
+  target_link_libraries(fmt INTERFACE fmt::fmt)
+else()
 set(FMT_INSTALL OFF CACHE BOOL "")
 add_subdirectory(fmt EXCLUDE_FROM_ALL)
 disable_compiler_warnings_for_target(fmt)
+endif()
+pkg_search_module(minizip IMPORTED_TARGET minizip)
+if(minizip_FOUND)
+  message(STATUS "Using the system minizip")
+  add_library(minizip INTERFACE)
+  target_link_libraries(minizip INTERFACE PkgConfig::minizip)
+else()
 add_subdirectory(minizip EXCLUDE_FROM_ALL)
 disable_compiler_warnings_for_target(minizip)
-add_subdirectory(lzma EXCLUDE_FROM_ALL)
-disable_compiler_warnings_for_target(lzma)
+endif()
+pkg_search_module(libchdr IMPORTED_TARGET libchdr)
+pkg_search_module(lzma IMPORTED_TARGET lzmasdk-c)
+if(libchdr_FOUND AND NOT lzma_FOUND)
+  message(FATAL_ERROR "System libchdr found but no system lzma")
+endif()
+if(libchdr_FOUND)
+  message(STATUS "Using the system libchdr")
+  add_library(libchdr INTERFACE)
+  target_link_libraries(libchdr INTERFACE PkgConfig::libchdr)
+else()
 add_subdirectory(libchdr EXCLUDE_FROM_ALL)
 disable_compiler_warnings_for_target(libchdr)
+endif()
+if(lzma_FOUND)
+  message(STATUS "Using the system lzma")
+  add_library(lzma INTERFACE)
+  target_compile_definitions(lzma INTERFACE SYSTEM_LZMA=1)
+  target_link_libraries(lzma INTERFACE PkgConfig::lzma)
+else()
+add_subdirectory(lzma EXCLUDE_FROM_ALL)
+disable_compiler_warnings_for_target(lzma)
+endif()
+pkg_search_module(xxhash IMPORTED_TARGET libxxhash)
+if(xxhash_FOUND)
+  message(STATUS "Using the system libxxhash")
+  add_library(xxhash INTERFACE)
+  target_compile_definitions(xxhash INTERFACE SYSTEM_XXHASH=1)
+  target_link_libraries(xxhash INTERFACE PkgConfig::xxhash)
+else()
 add_subdirectory(xxhash EXCLUDE_FROM_ALL)
 disable_compiler_warnings_for_target(xxhash)
+endif()
 add_subdirectory(imgui EXCLUDE_FROM_ALL)
 disable_compiler_warnings_for_target(imgui)
 add_subdirectory(simpleini EXCLUDE_FROM_ALL)
 disable_compiler_warnings_for_target(simpleini)
+find_package(VulkanHeaders)
+if(VulkanHeaders_FOUND)
+  message(STATUS "Using the system vulkan-headers")
+  add_library(vulkan-headers INTERFACE)
+  target_link_libraries(vulkan-headers INTERFACE Vulkan::Headers)
+else()
 add_subdirectory(vulkan EXCLUDE_FROM_ALL)
+endif()
 add_subdirectory(googletest EXCLUDE_FROM_ALL)
+find_package(FastFloat)
+if(FastFloat_FOUND)
+  message(STATUS "Using the system fast_float")
+  add_library(fast_float INTERFACE)
+  target_link_libraries(fast_float INTERFACE FastFloat::fast_float)
+else()
 add_subdirectory(fast_float EXCLUDE_FROM_ALL)
+endif()
 add_subdirectory(reshadefx EXCLUDE_FROM_ALL)
 disable_compiler_warnings_for_target(reshadefx)
 add_subdirectory(rcheevos EXCLUDE_FROM_ALL)
 disable_compiler_warnings_for_target(rcheevos)
+find_package(ryml)
+if(ryml_FOUND)
+  message(STATUS "Using the system rapidyml")
+  add_library(rapidyaml INTERFACE)
+  target_link_libraries(rapidyaml INTERFACE ryml::ryml)
+else()
 add_subdirectory(rapidyaml EXCLUDE_FROM_ALL)
 disable_compiler_warnings_for_target(rapidyaml)
+endif()
+find_package(cubeb)
+if(cubeb_FOUND)
+  message(STATUS "Using the system cubeb")
+  add_library(cubeb INTERFACE)
+  target_link_libraries(cubeb INTERFACE cubeb::cubeb)
+else()
 add_subdirectory(cubeb EXCLUDE_FROM_ALL)
 disable_compiler_warnings_for_target(cubeb)
 disable_compiler_warnings_for_target(speex)
+endif()
 
 if(ENABLE_OPENGL)
   add_subdirectory(glad EXCLUDE_FROM_ALL)
@@ -32,9 +100,27 @@ if(ENABLE_OPENGL)
 endif()
 
 if(CPU_ARCH_X64)
-  add_subdirectory(xbyak EXCLUDE_FROM_ALL)
-  add_subdirectory(zydis EXCLUDE_FROM_ALL)
-  disable_compiler_warnings_for_target(zydis)
+  find_package(xbyak)
+  if(xbyak_FOUND)
+    message(STATUS "Using the system xbyak")
+    add_library(xbyak INTERFACE)
+    target_compile_definitions(xbyak INTERFACE "XBYAK_NO_EXCEPTION=1")
+    target_link_libraries(xbyak INTERFACE xbyak::xbyak)
+  else()
+    add_subdirectory(xbyak EXCLUDE_FROM_ALL)
+  endif()
+
+  if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
+    find_package(zydis)
+    if(zydis_FOUND)
+      message(STATUS "Using the system zydis")
+      add_library(zydis INTERFACE)
+      target_link_libraries(zydis INTERFACE Zydis::Zydis)
+    else()
+      add_subdirectory(zydis EXCLUDE_FROM_ALL)
+      disable_compiler_warnings_for_target(zydis)
+    endif()
+  endif()
 endif()
 
 if(CPU_ARCH_ARM32 OR CPU_ARCH_ARM64)
diff --git a/src/core/gpu_hw_texture_cache.cpp b/src/core/gpu_hw_texture_cache.cpp
index 29d8f6a..3a6c3eb 100644
--- a/src/core/gpu_hw_texture_cache.cpp
+++ b/src/core/gpu_hw_texture_cache.cpp
@@ -27,9 +27,11 @@
 #define XXH_STATIC_LINKING_ONLY
 #endif
 #include "xxhash.h"
+#ifndef SYSTEM_XXHASH
 #ifdef CPU_ARCH_SSE
 #include "xxh_x86dispatch.h"
 #endif
+#endif
 
 #include <algorithm>
 #include <cmath>
@@ -3306,4 +3308,4 @@ void GPUTextureCache::ApplyTextureReplacements(SourceKey key, HashType tex_hash,
   entry->texture = std::move(replacement_tex);
 
   g_gpu->RestoreDeviceContext();
-}
\ No newline at end of file
+}
diff --git a/src/util/compress_helpers.cpp b/src/util/compress_helpers.cpp
index e20efc2..89fa859 100644
--- a/src/util/compress_helpers.cpp
+++ b/src/util/compress_helpers.cpp
@@ -21,6 +21,10 @@
 #include <zstd.h>
 #include <zstd_errors.h>
 
+#ifdef SYSTEM_LZMA
+#define False False7z
+#endif
+
 LOG_CHANNEL(CompressHelpers);
 
 // TODO: Use streaming API to avoid mallocing the whole input buffer. But one read() call is probably still faster..
-- 
2.47.0

