From 938a6be05d519862616092be0b091969fbee128e Mon Sep 17 00:00:00 2001
From: Phantom X <PhantomX@users.noreply.github.com>
Date: Mon, 1 Aug 2022 15:42:10 -0300
Subject: [PATCH] Use system libraries

---
 dep/CMakeLists.txt                    | 117 ++++++++++++++++++++++-
 src/common/vulkan/shader_compiler.cpp | 129 ++++++++++++++++++++++++++
 src/core/texture_replacements.cpp     |   2 +
 3 files changed, 245 insertions(+), 3 deletions(-)

diff --git a/dep/CMakeLists.txt b/dep/CMakeLists.txt
index 3846d78..e129f80 100644
--- a/dep/CMakeLists.txt
+++ b/dep/CMakeLists.txt
@@ -1,24 +1,144 @@
+find_package(fmt 8)
+if(fmt_FOUND)
+  message(STATUS "Using the system fmt")
+else()
 add_subdirectory(fmt)
+endif()
 add_subdirectory(glad)
-add_subdirectory(stb)
+find_package(ZLIB)
+if(ZLIB_FOUND)
+  message(STATUS "Using the system zlib")
+  add_library(zlib-shared INTERFACE)
+  target_link_libraries(zlib-shared INTERFACE ZLIB::ZLIB)
+  add_library(zlib ALIAS zlib-shared)
+else()
 add_subdirectory(zlib)
-add_subdirectory(zstd)
+endif()
+
+add_subdirectory(stb)
+
+pkg_search_module(minizip IMPORTED_TARGET minizip)
+if(minizip_FOUND)
+  message(STATUS "Using the system minizip")
+  add_library(minizip-shared INTERFACE)
+  target_link_libraries(minizip-shared INTERFACE PkgConfig::minizip)
+  add_library(minizip ALIAS minizip-shared)
+else()
 add_subdirectory(minizip)
+endif()
+
+pkg_search_module(zstd IMPORTED_TARGET libzstd)
+if(zstd_FOUND)
+  message(STATUS "Using the system zstd")
+  add_library(zstd-shared INTERFACE)
+  target_link_libraries(zstd-shared INTERFACE PkgConfig::zstd)
+  add_library(Zstd::Zstd ALIAS zstd-shared)
+else()
+add_subdirectory(zstd)
+endif()
+
+pkg_search_module(libchdr IMPORTED_TARGET libchdr)
+if(libchdr_FOUND)
+  message(STATUS "Using the system libchdr")
+  add_library(libchdr-shared INTERFACE)
+  target_link_libraries(libchdr-shared INTERFACE PkgConfig::libchdr)
+  add_library(libchdr ALIAS libchdr-shared)
+else()
 add_subdirectory(lzma)
 add_subdirectory(libchdr)
+endif()
+
+pkg_search_module(xxhash IMPORTED_TARGET libxxhash)
+if(xxhash_FOUND)
+  message(STATUS "Using the system libxxhash")
+  add_library(xxhash-shared INTERFACE)
+  target_compile_definitions(xxhash-shared INTERFACE SYSTEM_XXHASH=1)
+  target_link_libraries(xxhash-shared INTERFACE PkgConfig::xxhash)
+  add_library(xxhash ALIAS xxhash-shared)
+else()
 add_subdirectory(xxhash)
+endif()
+
+pkg_search_module(rapidjson IMPORTED_TARGET RapidJSON)
+if(rapidjson_FOUND)
+  message(STATUS "Using the system rapidjson")
+  add_library(rapidjson-shared INTERFACE)
+  add_library(rapidjson ALIAS rapidjson-shared)
+else()
 add_subdirectory(rapidjson)
+endif()
+
+pkg_search_module(SPIRV_Tools IMPORTED_TARGET SPIRV-Tools)
+pkg_search_module(SPIRV IMPORTED_TARGET spirv)
+pkg_search_module(glslang IMPORTED_TARGET glslang)
+
+if(SPIRV_FOUND AND SPIRV_Tools_FOUND AND glslang_FOUND)
+  message(STATUS "Using the system glslang")
+  add_library(SPIRV_Tools-shared INTERFACE)
+  target_link_libraries(SPIRV_Tools-shared INTERFACE PkgConfig::SPIRV_Tools)
+  add_library(SPIRV_Tools ALIAS SPIRV_Tools-shared)
+
+  add_library(SPIRV-shared INTERFACE)
+  target_link_libraries(SPIRV-shared INTERFACE PkgConfig::SPIRV)
+  add_library(SPIRV ALIAS SPIRV-shared)
+
+  add_library(glslang-shared INTERFACE)
+  target_compile_definitions(glslang-shared PUBLIC SYSTEM_GLSLANG=1)
+  target_link_libraries(glslang-shared INTERFACE PkgConfig::glslang)
+  add_library(glslang ALIAS glslang-shared)
+else()
 add_subdirectory(glslang)
+endif()
+
 add_subdirectory(imgui)
 add_subdirectory(simpleini)
+
+find_path(vulkan_INCLUDE_DIRS vulkan/vulkan.h)
+if(vulkan_INCLUDE_DIRS)
+  message(STATUS "Using the system vulkan-headers")
+  add_library(vulkan-shared INTERFACE)
+  add_library(vulkan-headers ALIAS vulkan-shared)
+else()
 add_subdirectory(vulkan)
+endif()
+
+pkg_search_module(soundtouch IMPORTED_TARGET soundtouch)
+if(soundtouch_FOUND)
+  message(STATUS "Using the system soundtouch")
+  add_library(soundtouch-shared INTERFACE)
+  target_link_libraries(soundtouch-shared INTERFACE PkgConfig::soundtouch)
+  add_library(soundtouch ALIAS soundtouch-shared)
+else()
 add_subdirectory(soundtouch)
 add_subdirectory(tinyxml2)
+endif()
+
+find_package(tinyxml2)
+if(tinyxml2_FOUND)
+  message(STATUS "Using the system tinyxml2")
+else()
+  add_subdirectory(tinyxml2)
+endif()
+
 add_subdirectory(googletest)
+
+pkg_search_module(cpuinfo IMPORTED_TARGET libcpuinfo)
+if(cpuinfo_FOUND)
+  message(STATUS "Using the system cpuinfo")
+  add_library(cpuinfo-shared INTERFACE)
+  target_link_libraries(cpuinfo-shared INTERFACE PkgConfig::cpuinfo)
+  add_library(cpuinfo ALIAS cpuinfo-shared)
+else()
 add_subdirectory(cpuinfo)
+endif()
 
 if(ENABLE_CUBEB)
-  add_subdirectory(cubeb)
+  find_package(cubeb)
+  if(cubeb_FOUND)
+    message(STATUS "Using the system cubeb")
+  else()
+    add_subdirectory(cubeb)
+  endif()
 endif()
 
 if(ENABLE_DISCORD_PRESENCE)
diff --git a/src/common/vulkan/shader_compiler.cpp b/src/common/vulkan/shader_compiler.cpp
index 45833e5..994614c 100644
--- a/src/common/vulkan/shader_compiler.cpp
+++ b/src/common/vulkan/shader_compiler.cpp
@@ -14,14 +14,25 @@
 Log_SetChannel(Vulkan::ShaderCompiler);
 
 // glslang includes
+#ifdef SYSTEM_GLSLANG
+#include <glslang/SPIRV/GlslangToSpv.h>
+#include <glslang/Include/ResourceLimits.h>
+#include <glslang/Public/ShaderLang.h>
+#else
 #include "SPIRV/GlslangToSpv.h"
 #include "StandAlone/ResourceLimits.h"
 #include "glslang/Public/ShaderLang.h"
+#endif
 
 namespace Vulkan::ShaderCompiler {
 // Registers itself for cleanup via atexit
 bool InitializeGlslang();
 
+#ifdef SYSTEM_GLSLANG
+// Resource limits used when compiling shaders
+static const TBuiltInResource* GetCompilerResourceLimits();
+#endif
+
 static unsigned s_next_bad_shader_id = 1;
 
 static bool glslang_initialized = false;
@@ -69,7 +80,11 @@ static std::optional<SPIRVCodeVector> CompileShaderToSPV(EShLanguage stage, cons
     }
   };
 
+#ifdef SYSTEM_GLSLANG
+  if (!shader->parse(GetCompilerResourceLimits(), default_version, profile, false, true, messages, includer))
+#else
   if (!shader->parse(&glslang::DefaultTBuiltInResource, default_version, profile, false, true, messages, includer))
+#endif
   {
     DumpBadShader("Failed to parse shader");
     return std::nullopt;
@@ -139,6 +154,120 @@ void DeinitializeGlslang()
   glslang_initialized = false;
 }
 
+#ifdef SYSTEM_GLSLANG
+const TBuiltInResource* GetCompilerResourceLimits()
+{
+  static const TBuiltInResource limits = {
+    /* .MaxLights = */ 32,
+    /* .MaxClipPlanes = */ 6,
+    /* .MaxTextureUnits = */ 32,
+    /* .MaxTextureCoords = */ 32,
+    /* .MaxVertexAttribs = */ 64,
+    /* .MaxVertexUniformComponents = */ 4096,
+    /* .MaxVaryingFloats = */ 64,
+    /* .MaxVertexTextureImageUnits = */ 32,
+    /* .MaxCombinedTextureImageUnits = */ 80,
+    /* .MaxTextureImageUnits = */ 32,
+    /* .MaxFragmentUniformComponents = */ 4096,
+    /* .MaxDrawBuffers = */ 32,
+    /* .MaxVertexUniformVectors = */ 128,
+    /* .MaxVaryingVectors = */ 8,
+    /* .MaxFragmentUniformVectors = */ 16,
+    /* .MaxVertexOutputVectors = */ 16,
+    /* .MaxFragmentInputVectors = */ 15,
+    /* .MinProgramTexelOffset = */ -8,
+    /* .MaxProgramTexelOffset = */ 7,
+    /* .MaxClipDistances = */ 8,
+    /* .MaxComputeWorkGroupCountX = */ 65535,
+    /* .MaxComputeWorkGroupCountY = */ 65535,
+    /* .MaxComputeWorkGroupCountZ = */ 65535,
+    /* .MaxComputeWorkGroupSizeX = */ 1024,
+    /* .MaxComputeWorkGroupSizeY = */ 1024,
+    /* .MaxComputeWorkGroupSizeZ = */ 64,
+    /* .MaxComputeUniformComponents = */ 1024,
+    /* .MaxComputeTextureImageUnits = */ 16,
+    /* .MaxComputeImageUniforms = */ 8,
+    /* .MaxComputeAtomicCounters = */ 8,
+    /* .MaxComputeAtomicCounterBuffers = */ 1,
+    /* .MaxVaryingComponents = */ 60,
+    /* .MaxVertexOutputComponents = */ 64,
+    /* .MaxGeometryInputComponents = */ 64,
+    /* .MaxGeometryOutputComponents = */ 128,
+    /* .MaxFragmentInputComponents = */ 128,
+    /* .MaxImageUnits = */ 8,
+    /* .MaxCombinedImageUnitsAndFragmentOutputs = */ 8,
+    /* .MaxCombinedShaderOutputResources = */ 8,
+    /* .MaxImageSamples = */ 0,
+    /* .MaxVertexImageUniforms = */ 0,
+    /* .MaxTessControlImageUniforms = */ 0,
+    /* .MaxTessEvaluationImageUniforms = */ 0,
+    /* .MaxGeometryImageUniforms = */ 0,
+    /* .MaxFragmentImageUniforms = */ 8,
+    /* .MaxCombinedImageUniforms = */ 8,
+    /* .MaxGeometryTextureImageUnits = */ 16,
+    /* .MaxGeometryOutputVertices = */ 256,
+    /* .MaxGeometryTotalOutputComponents = */ 1024,
+    /* .MaxGeometryUniformComponents = */ 1024,
+    /* .MaxGeometryVaryingComponents = */ 64,
+    /* .MaxTessControlInputComponents = */ 128,
+    /* .MaxTessControlOutputComponents = */ 128,
+    /* .MaxTessControlTextureImageUnits = */ 16,
+    /* .MaxTessControlUniformComponents = */ 1024,
+    /* .MaxTessControlTotalOutputComponents = */ 4096,
+    /* .MaxTessEvaluationInputComponents = */ 128,
+    /* .MaxTessEvaluationOutputComponents = */ 128,
+    /* .MaxTessEvaluationTextureImageUnits = */ 16,
+    /* .MaxTessEvaluationUniformComponents = */ 1024,
+    /* .MaxTessPatchComponents = */ 120,
+    /* .MaxPatchVertices = */ 32,
+    /* .MaxTessGenLevel = */ 64,
+    /* .MaxViewports = */ 16,
+    /* .MaxVertexAtomicCounters = */ 0,
+    /* .MaxTessControlAtomicCounters = */ 0,
+    /* .MaxTessEvaluationAtomicCounters = */ 0,
+    /* .MaxGeometryAtomicCounters = */ 0,
+    /* .MaxFragmentAtomicCounters = */ 8,
+    /* .MaxCombinedAtomicCounters = */ 8,
+    /* .MaxAtomicCounterBindings = */ 1,
+    /* .MaxVertexAtomicCounterBuffers = */ 0,
+    /* .MaxTessControlAtomicCounterBuffers = */ 0,
+    /* .MaxTessEvaluationAtomicCounterBuffers = */ 0,
+    /* .MaxGeometryAtomicCounterBuffers = */ 0,
+    /* .MaxFragmentAtomicCounterBuffers = */ 1,
+    /* .MaxCombinedAtomicCounterBuffers = */ 1,
+    /* .MaxAtomicCounterBufferSize = */ 16384,
+    /* .MaxTransformFeedbackBuffers = */ 4,
+    /* .MaxTransformFeedbackInterleavedComponents = */ 64,
+    /* .MaxCullDistances = */ 8,
+    /* .MaxCombinedClipAndCullDistances = */ 8,
+    /* .MaxSamples = */ 4,
+    /* .maxMeshOutputVerticesNV = */ 256,
+    /* .maxMeshOutputPrimitivesNV = */ 512,
+    /* .maxMeshWorkGroupSizeX_NV = */ 32,
+    /* .maxMeshWorkGroupSizeY_NV = */ 1,
+    /* .maxMeshWorkGroupSizeZ_NV = */ 1,
+    /* .maxTaskWorkGroupSizeX_NV = */ 32,
+    /* .maxTaskWorkGroupSizeY_NV = */ 1,
+    /* .maxTaskWorkGroupSizeZ_NV = */ 1,
+    /* .maxMeshViewCountNV = */ 4,
+    /* .maxDualSourceDrawBuffersEXT = */ 1,
+
+    /* .limits = */ {
+        /* .nonInductiveForLoops = */ 1,
+        /* .whileLoops = */ 1,
+        /* .doWhileLoops = */ 1,
+        /* .generalUniformIndexing = */ 1,
+        /* .generalAttributeMatrixVectorIndexing = */ 1,
+        /* .generalVaryingIndexing = */ 1,
+        /* .generalSamplerIndexing = */ 1,
+        /* .generalVariableIndexing = */ 1,
+        /* .generalConstantMatrixVectorIndexing = */ 1,
+  }};
+
+  return &limits;
+ }
+#endif
+
 std::optional<SPIRVCodeVector> CompileVertexShader(std::string_view source_code)
 {
   return CompileShaderToSPV(EShLangVertex, "vs", source_code);
diff --git a/src/core/texture_replacements.cpp b/src/core/texture_replacements.cpp
index 7d44aa4..3e5d910 100644
--- a/src/core/texture_replacements.cpp
+++ b/src/core/texture_replacements.cpp
@@ -9,9 +9,11 @@
 #include "host.h"
 #include "settings.h"
 #include "xxhash.h"
+#ifndef SYSTEM_XXHASH
 #if defined(CPU_X86) || defined(CPU_X64)
 #include "xxh_x86dispatch.h"
 #endif
+#endif
 #include <cinttypes>
 Log_SetChannel(TextureReplacements);
 
-- 
2.37.2

